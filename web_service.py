import asyncio
import logging
import os
import signal
import sys
import threading
import time
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import yt_dlp
from datetime import datetime
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_tracks = {}
user_last_request = {}

# === FLASK ROUTES ===

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "status": "Telegram Music Bot Service",
        "bot_status": "running",
        "message": "Bot is active and responding",
        "features": [
            "YouTube music download",
            "SoundCloud support",
            "Music search",
            "User collections"
        ]
    })

@app.route('/ping')
def ping():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è keep-alive"""
    return jsonify({"status": "pong", "timestamp": time.time()})

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram Bot API"""
    try:
        data = request.get_json()
        logger.info(f"Webhook received: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ aiogram
        asyncio.create_task(handle_webhook(data))
        
        return jsonify({"status": "ok", "message": "Webhook received successfully"})
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/status')
def status():
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        "service": "running",
        "bot": "running",
        "timestamp": time.time(),
        "environment": {
            "bot_token_set": bool(BOT_TOKEN),
            "bot_token_type": "TELEGRAM_BOT_TOKEN" if os.getenv('TELEGRAM_BOT_TOKEN') else "BOT_TOKEN" if os.getenv('BOT_TOKEN') else "none"
        }
    })

async def handle_webhook(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –∏–∑ –¥–∞–Ω–Ω—ã—Ö webhook
        from aiogram.types import Update
        update = Update(**data)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        await dp.feed_update(bot, update)
        
    except Exception as e:
        logger.error(f"Error handling webhook: {e}")

# === KEEP ALIVE ===

def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render"""
    while True:
        try:
            webhook_url = os.getenv('WEBHOOK_URL')
            if webhook_url:
                base_url = webhook_url.replace('/webhook', '')
                ping_url = f"{base_url}/ping"
                import requests
                response = requests.get(ping_url, timeout=10)
                logger.info(f"Keep-alive ping sent: {response.status_code}")
            else:
                logger.info("WEBHOOK_URL not set, skipping keep-alive")
        except Exception as e:
            logger.error(f"Keep-alive error: {e}")
        time.sleep(20)

def start_keep_alive():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
    keep_alive_thread.start()
    logger.info("Keep-alive thread started")

# === TELEGRAM BOT COMMANDS ===

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = str(message.from_user.id)
    user_name = message.from_user.first_name
    
    welcome_text = f"""
üéµ –ü—Ä–∏–≤–µ—Ç, {user_name}!

–Ø Music Bot - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏!

üéß –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –º—É–∑—ã–∫—É —Å YouTube
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å SoundCloud
‚Ä¢ –ò—Å–∫–∞—Ç—å —Ç—Ä–µ–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏

üì± –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ SoundCloud, –∏ —è —Å–∫–∞—á–∞—é –º—É–∑—ã–∫—É –¥–ª—è —Ç–µ–±—è!

üîç –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤.
"""
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏")],
            [KeyboardButton(text="üìö –ú–æ—è –º—É–∑—ã–∫–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(welcome_text, reply_markup=keyboard)
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üéµ Music Bot - –ü–æ–º–æ—â—å

üì± –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/search - –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
/mymusic - –ú–æ—è –º—É–∑—ã–∫–∞

üîó –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ
2. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ SoundCloud —Ç—Ä–µ–∫
3. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: MP3, M4A
‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
"""
    
    await message.answer(help_text)
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

@dp.message(Command("search"))
async def cmd_search(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏"""
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –ø–æ–∏—Å–∫")

@dp.message(Command("mymusic"))
async def cmd_mymusic(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /mymusic –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º—É–∑—ã–∫–∏"""
    user_id = str(message.from_user.id)
    
    if user_id in user_tracks and user_tracks[user_id]:
        tracks_text = "üìö –í–∞—à–∞ –º—É–∑—ã–∫–∞:\n\n"
        for i, track in enumerate(user_tracks[user_id][:10], 1):
            tracks_text += f"{i}. {track['title']} - {track['artist']}\n"
        
        if len(user_tracks[user_id]) > 10:
            tracks_text += f"\n... –∏ –µ—â–µ {len(user_tracks[user_id]) - 10} —Ç—Ä–µ–∫–æ–≤"
    else:
        tracks_text = "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º—É–∑—ã–∫–∏.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!"
    
    await message.answer(tracks_text)
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–≤–æ—é –º—É–∑—ã–∫—É")

@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(message.from_user.id)
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    current_time = time.time()
    if user_id in user_last_request:
        time_diff = current_time - user_last_request[user_id]
        if time_diff < 1.0:  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...")
            return
    
    user_last_request[user_id] = current_time
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if text:
        if text == "üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏":
            await cmd_search(message)
        elif text == "üìö –ú–æ—è –º—É–∑—ã–∫–∞":
            await cmd_mymusic(message)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await cmd_help(message)
        elif text.startswith(('http://', 'https://')):
            # –≠—Ç–æ —Å—Å—ã–ª–∫–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ URL
            await process_url(message, text)
        else:
            # –≠—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            await process_search_query(message, text)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
    elif message.audio:
        await process_audio(message)

async def process_url(message: types.Message, url: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    user_id = str(message.from_user.id)
    
    await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...")
    
    try:
        if 'youtube.com' in url or 'youtu.be' in url:
            await process_youtube_url(message, url)
        elif 'soundcloud.com' in url:
            await process_soundcloud_url(message, url)
        else:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ YouTube –∏ SoundCloud —Å—Å—ã–ª–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL {url}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏")

async def process_youtube_url(message: types.Message, url: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube URL"""
    user_id = str(message.from_user.id)
    
    try:
        await message.answer("üéµ –°–∫–∞—á–∏–≤–∞—é —Å YouTube...")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è YouTube
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        
        await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        
        await message.answer("‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        if user_id not in user_tracks:
            user_tracks[user_id] = []
        
        user_tracks[user_id].append({
            'title': 'YouTube —Ç—Ä–µ–∫',
            'artist': 'YouTube',
            'url': url,
            'date': datetime.now().isoformat()
        })
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª YouTube —Ç—Ä–µ–∫")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ YouTube: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ —Å YouTube")

async def process_soundcloud_url(message: types.Message, url: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ SoundCloud URL"""
    user_id = str(message.from_user.id)
    
    try:
        await message.answer("üéß –°–∫–∞—á–∏–≤–∞—é —Å SoundCloud...")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è SoundCloud
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        
        await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        
        await message.answer("‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        if user_id not in user_tracks:
            user_tracks[user_id] = []
        
        user_tracks[user_id].append({
            'title': 'SoundCloud —Ç—Ä–µ–∫',
            'artist': 'SoundCloud',
            'url': url,
            'date': datetime.now().isoformat()
        })
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª SoundCloud —Ç—Ä–µ–∫")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ SoundCloud: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ —Å SoundCloud")

async def process_search_query(message: types.Message, query: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = str(message.from_user.id)
    
    await message.answer(f"üîç –ò—â—É: {query}")
    
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results = [
            f"üéµ {query} - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å 1",
            f"üéµ {query} - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å 2", 
            f"üéµ {query} - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å 3"
        ]
        
        results_text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n" + "\n".join(results)
        results_text += "\n\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ SoundCloud –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
        
        await message.answer(results_text)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–∞–ª: {query}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

async def process_audio(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    user_id = str(message.from_user.id)
    
    await message.answer("üéµ –ü–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ —Ñ–∞–π–ª! –≠—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
    if user_id not in user_tracks:
        user_tracks[user_id] = []
    
    user_tracks[user_id].append({
        'title': message.audio.title or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫',
        'artist': message.audio.performer or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        'duration': message.audio.duration,
        'date': datetime.now().isoformat()
    })
    
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∞—É–¥–∏–æ —Ñ–∞–π–ª")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Music Bot...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive
        start_keep_alive()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
        port = int(os.environ.get('PORT', 5000))
        
        logger.info(f"Starting Flask app on port {port}")
        logger.info("Keep-alive service started")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_flask():
            app.run(host='0.0.0.0', port=port, debug=False)
        
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    sys.exit(0)

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
