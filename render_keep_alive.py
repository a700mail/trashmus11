#!/usr/bin/env python3
"""
Keep Alive –¥–ª—è Render - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Å—ã–ø–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
"""

import os
import time
import requests
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RenderKeepAlive:
    def __init__(self):
        self.ping_count = 0
        self.error_count = 0
        self.start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Render
        self.service_url = os.environ.get('RENDER_EXTERNAL_URL')
        if not self.service_url:
            # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.service_url = "http://localhost:10000"
        
        logger.info(f"üöÄ Render Keep Alive –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è: {self.service_url}")
    
    def ping_external_services(self):
        """–ü–∏–Ω–≥—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        external_services = [
            "https://httpbin.org/get",
            "https://api.github.com",
            "https://www.google.com",
            "https://www.cloudflare.com"
        ]
        
        for service in external_services:
            try:
                response = requests.get(service, timeout=5)
                if response.status_code in [200, 301, 302]:
                    logger.info(f"üåê –í–Ω–µ—à–Ω–∏–π ping —É—Å–ø–µ—à–µ–Ω: {service}")
                    return True
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è Ping {service} –Ω–µ —É–¥–∞–ª—Å—è: {e}")
                continue
        
        return False
    
    def ping_own_service(self):
        """–ü–∏–Ω–≥—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
        try:
            # –ü–∏–Ω–≥—É–µ–º health endpoint
            health_url = f"{self.service_url}/health"
            response = requests.get(health_url, timeout=3)
            
            if response.status_code == 200:
                data = response.json()
                status = data.get('status', 'unknown')
                logger.info(f"üíì Health check —É—Å–ø–µ—à–µ–Ω: {status}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Health check –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Health check –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            return False
    
    def ping_home_endpoint(self):
        """–ü–∏–Ω–≥—É–µ—Ç –≥–ª–∞–≤–Ω—ã–π endpoint"""
        try:
            response = requests.get(self.service_url, timeout=3)
            if response.status_code == 200:
                logger.info(f"üè† –ì–ª–∞–≤–Ω—ã–π endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π endpoint –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def run_keep_alive(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª keep alive"""
        logger.info("üíì Render Keep Alive –∑–∞–ø—É—â–µ–Ω")
        
        while True:
            try:
                self.ping_count += 1
                current_time = datetime.now().strftime("%H:%M:%S")
                
                logger.info(f"üíì [{current_time}] Keep Alive #{self.ping_count}")
                
                # 1. –ü–∏–Ω–≥—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                own_service_ok = self.ping_own_service()
                
                # 2. –ü–∏–Ω–≥—É–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
                external_ok = self.ping_external_services()
                
                # 3. –ü–∏–Ω–≥—É–µ–º –≥–ª–∞–≤–Ω—ã–π endpoint
                home_ok = self.ping_home_endpoint()
                
                # 4. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if own_service_ok and external_ok and home_ok:
                    logger.info(f"‚úÖ [{current_time}] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω—ã")
                    if self.error_count > 0:
                        logger.info(f"‚úÖ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ (–±—ã–ª–æ: {self.error_count})")
                        self.error_count = 0
                else:
                    self.error_count += 1
                    logger.warning(f"‚ö†Ô∏è [{current_time}] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ (–æ—à–∏–±–æ–∫: {self.error_count})")
                
                # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                uptime = time.time() - self.start_time
                hours = int(uptime // 3600)
                minutes = int((uptime % 3600) // 60)
                logger.info(f"üìä Uptime: {hours}—á {minutes}–º | Ping: {self.ping_count} | –û—à–∏–±–æ–∫: {self.error_count}")
                
                # 6. –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ ping
                # –î–ª—è Render –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç (840 —Å–µ–∫—É–Ω–¥)
                # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Å—ã–ø–∞–Ω–∏–µ, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Ä–≤–∏—Å
                sleep_time = 840  # 14 –º–∏–Ω—É—Ç
                logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π ping —á–µ—Ä–µ–∑ {sleep_time//60} –º–∏–Ω—É—Ç")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                for _ in range(sleep_time):
                    time.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—é keep alive")
                break
            except Exception as e:
                self.error_count += 1
                current_time = datetime.now().strftime("%H:%M:%S")
                logger.error(f"‚ùå [{current_time}] –û—à–∏–±–∫–∞ –≤ keep alive #{self.error_count}: {e}")
                
                # –ü—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if self.error_count > 5:
                    logger.warning(f"‚ö†Ô∏è [{current_time}] –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, —É–≤–µ–ª–∏—á–∏–≤–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 30 –º–∏–Ω—É—Ç")
                    time.sleep(1800)  # 30 –º–∏–Ω—É—Ç
                else:
                    time.sleep(300)  # 5 –º–∏–Ω—É—Ç
        
        logger.info("‚úÖ Render Keep Alive –∑–∞–≤–µ—Ä—à–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Render Keep Alive")
    logger.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Render
    if os.environ.get('RENDER'):
        logger.info("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω Render - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        logger.info(f"üîó Service URL: {os.environ.get('RENDER_EXTERNAL_URL', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
        logger.info(f"üîó Service ID: {os.environ.get('RENDER_SERVICE_ID', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
    else:
        logger.info("üíª –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º keep alive
    keep_alive = RenderKeepAlive()
    
    try:
        keep_alive.run_keep_alive()
    except KeyboardInterrupt:
        logger.info("üì¥ Keep alive –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
