from flask import Flask, request, jsonify
import os
import threading
import time
from keep_alive import start_keep_alive

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
bot_running = False
bot_thread = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
def get_bot_token():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('BOT_TOKEN')

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "status": "Telegram Music Bot Service",
        "bot_status": "running" if bot_running else "stopped",
        "message": "Service is active and responding",
        "features": [
            "YouTube music download",
            "SoundCloud support", 
            "Payment processing",
            "Premium features"
        ]
    })

@app.route('/ping')
def ping():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è keep-alive"""
    return jsonify({"status": "pong", "timestamp": time.time()})

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram Bot API"""
    try:
        data = request.get_json()
        print(f"Webhook received: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
        if not bot_running:
            return jsonify({"status": "error", "message": "Bot is not running"}), 500
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
        # –≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å aiogram –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        
        return jsonify({"status": "ok", "message": "Webhook received successfully"})
    except Exception as e:
        print(f"Webhook error: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/start_bot', methods=['POST', 'GET'])
def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_running, bot_thread
    
    if bot_running:
        return jsonify({"status": "already_running"})
    
    try:
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = get_bot_token()
        print(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot_token else '–ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º web_service.py –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º web_service.py...")
        import subprocess
        import sys
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º web_service.py –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        process = subprocess.Popen([
            sys.executable, 'web_service.py'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        bot_thread = process
        bot_running = True
        
        print("üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ!")
        
        return jsonify({
            "status": "started", 
            "message": "Bot started successfully in separate process",
            "process_id": process.pid
        })
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return jsonify({"status": "error", "message": str(e), "traceback": traceback.format_exc()}), 500

@app.route('/stop_bot', methods=['POST', 'GET'])
def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    global bot_running, bot_thread
    
    if not bot_running:
        return jsonify({"status": "not_running"})
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
        if bot_thread and hasattr(bot_thread, 'terminate'):
            bot_thread.terminate()
            bot_thread.wait(timeout=5)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        bot_running = False
        return jsonify({"status": "stopped", "message": "Bot process terminated"})
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/status')
def status():
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    bot_token = get_bot_token()
    return jsonify({
        "service": "running",
        "bot": "running" if bot_running else "stopped",
        "timestamp": time.time(),
        "environment": {
            "bot_token_set": bool(bot_token),
            "bot_token_type": "TELEGRAM_BOT_TOKEN" if os.getenv('TELEGRAM_BOT_TOKEN') else "BOT_TOKEN" if os.getenv('BOT_TOKEN') else "none",
            "payment_token_set": bool(os.getenv('PAYMENT_PROVIDER_TOKEN')),
            "yoomoney_configured": all([
                os.getenv('YOOMONEY_CLIENT_ID'),
                os.getenv('YOOMONEY_CLIENT_SECRET'),
                os.getenv('YOOMONEY_ACCOUNT')
            ])
        }
    })

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive
    start_keep_alive()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
    port = int(os.environ.get('PORT', 5000))
    
    print(f"Starting Flask app on port {port}")
    print("Keep-alive service started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host='0.0.0.0', port=port, debug=False)
