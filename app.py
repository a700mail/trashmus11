import os
import logging
import requests
from flask import Flask, request, jsonify
import threading
import time
import asyncio
import aiohttp
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏
bot_thread = None
bot_running = False
keep_alive_thread = None
shutdown_event = threading.Event()

# Graceful shutdown handler
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞—é graceful shutdown...")
    shutdown_event.set()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    global bot_running
    bot_running = False
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
    if bot_thread and bot_thread.is_alive():
        logger.info("‚è≥ –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞...")
        bot_thread.join(timeout=10)
    
    if keep_alive_thread and keep_alive_thread.is_alive():
        logger.info("‚è≥ –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è keep alive –ø–æ—Ç–æ–∫–∞...")
        keep_alive_thread.join(timeout=5)
    
    logger.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

async def async_health_check():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:10000/health", timeout=3) as response:
                if response.status == 200:
                    return True, response.status
                else:
                    return False, response.status
    except Exception as e:
        return False, str(e)

async def async_external_ping():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ping –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    external_services = [
        "https://httpbin.org/get",
        "https://api.github.com",
        "https://www.google.com"
    ]
    
    async with aiohttp.ClientSession() as session:
        for service in external_services:
            try:
                async with session.get(service, timeout=5) as response:
                    if response.status in [200, 301, 302]:
                        return True, service
            except Exception:
                continue
    
    return False, "no_services_available"

@app.route('/')
def home():
    return jsonify({
        "status": "running",
        "bot_status": "running" if bot_running else "stopped",
        "message": "Telegram Music Bot is running on Render",
        "endpoints": {
            "home": "/",
            "health": "/health",
            "status": "/status",
            "bot_status": "/bot_status",
            "start_bot": "/start_bot (GET/POST)",
            "stop_bot": "/stop_bot (GET/POST)"
        }
    })

@app.route('/health')
def health():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π health endpoint –¥–ª—è Render"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        bot_alive = bot_running and bot_thread and bot_thread.is_alive()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å keep alive
        keep_alive_alive = keep_alive_thread and keep_alive_thread.is_alive()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è Render)
        external_status = {}
        external_services = [
            "https://httpbin.org/get",
            "https://api.github.com",
            "https://www.google.com"
        ]
        
        for service in external_services:
            try:
                start_time = time.time()
                response = requests.get(service, timeout=3)
                response_time = time.time() - start_time
                external_status[service] = {
                    "status": "healthy",
                    "response_time": response_time,
                    "status_code": response.status_code
                }
            except Exception as e:
                external_status[service] = {
                    "status": "unhealthy",
                    "error": str(e)
                }
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        overall_status = "healthy"
        if not bot_alive:
            overall_status = "degraded"
        if not keep_alive_alive:
            overall_status = "degraded"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        healthy_services = sum(1 for s in external_status.values() if s.get("status") == "healthy")
        if healthy_services == 0:
            overall_status = "unhealthy"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Render
        is_render = os.environ.get('RENDER', False)
        render_info = {}
        if is_render:
            render_info = {
                "service_id": os.environ.get('RENDER_SERVICE_ID'),
                "service_url": os.environ.get('RENDER_EXTERNAL_URL'),
                "environment": os.environ.get('RENDER_ENVIRONMENT', 'production')
            }
        
        return jsonify({
            "status": overall_status,
            "timestamp": time.time(),
            "bot_status": "running" if bot_alive else "stopped",
            "bot_thread_alive": bot_thread.is_alive() if bot_thread else False,
            "keep_alive_status": "running" if keep_alive_alive else "stopped",
            "keep_alive_thread_alive": keep_alive_thread.is_alive() if keep_alive_thread else False,
            "external_services": external_status,
            "external_services_summary": {
                "total": len(external_services),
                "healthy": healthy_services,
                "unhealthy": len(external_services) - healthy_services
            },
            "uptime": time.time() - (getattr(app, '_start_time', time.time())),
            "shutdown_requested": shutdown_event.is_set(),
            "render": {
                "is_render": is_render,
                "info": render_info
            },
            "memory_usage": "N/A"  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å psutil –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
        })
    except Exception as e:
        logger.error(f"Health check error: {e}")
        return jsonify({
            "status": "unhealthy",
            "error": str(e),
            "timestamp": time.time()
        }), 500

@app.route('/status')
def status():
    """–ê–ª–∏–∞—Å –¥–ª—è /health –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return health()

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint –¥–ª—è Telegram Bot API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        update = request.get_json()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        logger.info(f"Received webhook update: {update.get('update_id', 'unknown')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        logger.info(f"Bot status: bot_thread={bot_thread}, bot_running={bot_running}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
        if bot_thread and bot_running:
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                from music_bot import process_webhook_update
                import asyncio
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π event loop –∏–∑ –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –±–æ—Ç–∞ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ loop
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(process_webhook_update(update))
                loop.close()
                
                logger.info(f"Update {update.get('update_id', 'unknown')} queued for processing")
                
            except Exception as e:
                logger.error(f"Error processing update: {e}")
                # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                return jsonify({"status": "error", "message": f"Failed to process update: {str(e)}"}), 500
        else:
            logger.warning(f"Bot not ready: bot_thread={bot_thread}, bot_running={bot_running}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if not bot_running:
                logger.info("Attempting to start bot automatically...")
                try:
                    start_bot()
                    logger.info("Bot started automatically from webhook")
                    
                    # –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    try:
                        from music_bot import process_webhook_update
                        import asyncio
                        
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        loop.run_until_complete(process_webhook_update(update))
                        loop.close()
                        
                        logger.info(f"Update {update.get('update_id', 'unknown')} processed after auto-start")
                        
                    except Exception as process_error:
                        logger.error(f"Failed to process update after auto-start: {process_error}")
                        return jsonify({"status": "error", "message": f"Bot started but failed to process update: {str(process_error)}"}), 500
                        
                except Exception as e:
                    logger.error(f"Failed to start bot automatically: {e}")
                    return jsonify({"status": "error", "message": f"Failed to start bot: {str(e)}"}), 500
            else:
                return jsonify({"status": "error", "message": "Bot is starting up, please retry"}), 503
        
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

def run_bot_in_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏"""
    global bot_running, shutdown_event
    
    logger.info("üöÄ Starting bot thread...")
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        logger.info("‚úÖ Event loop created for bot thread")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ main_worker (–±–µ–∑ polling)
        logger.info("üì• Importing main_worker from music_bot...")
        from music_bot import main_worker
        logger.info("‚úÖ main_worker imported successfully")
        
        logger.info("üöÄ Starting main_worker...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º main_worker —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π graceful shutdown
        try:
            loop.run_until_complete(main_worker())
        except KeyboardInterrupt:
            logger.info("üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main_worker: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
        finally:
            # Graceful shutdown –¥–ª—è –±–æ—Ç–∞
            if not shutdown_event.is_set():
                logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                time.sleep(5)
                if not shutdown_event.is_set():
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                    bot_thread_new = threading.Thread(target=run_bot_in_thread, daemon=True)
                    bot_thread_new.start()
                    bot_thread = bot_thread_new
                    return
        
        logger.info("‚úÖ main_worker completed")
        
    except Exception as e:
        logger.error(f"‚ùå Bot thread error: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        if not shutdown_event.is_set():
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            if not shutdown_event.is_set():
                try:
                    bot_thread_new = threading.Thread(target=run_bot_in_thread, daemon=True)
                    bot_thread_new.start()
                    bot_thread = bot_thread_new
                    logger.info("‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏")
                except Exception as restart_error:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {restart_error}")
                    bot_running = False
    finally:
        try:
            if 'loop' in locals() and loop and not loop.is_closed():
                loop.close()
                logger.info("‚úÖ Event loop closed")
        except Exception as e:
            logger.error(f"‚ùå Error closing event loop: {e}")
        
        # –ü–æ–º–µ—á–∞–µ–º –±–æ—Ç–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
        bot_running = False
        logger.info("üì¥ –ë–æ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")

@app.route('/start_bot', methods=['GET', 'POST'])
def start_bot():
    global bot_thread, bot_running
    
    if bot_running:
        return jsonify({"status": "already_running", "message": "Bot is already running"})
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
        bot_thread = threading.Thread(target=run_bot_in_thread, daemon=True)
        bot_thread.start()
        bot_running = True
        
        logger.info("Bot started successfully")
        return jsonify({"status": "started", "message": "Bot started successfully"})
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/stop_bot', methods=['GET', 'POST'])
def stop_bot():
    global bot_running
    
    if not bot_running:
        return jsonify({"status": "not_running", "message": "Bot is not running"})
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥)
    bot_running = False
    logger.info("Bot stop requested")
    return jsonify({"status": "stopped", "message": "Bot stop requested"})

@app.route('/bot_status')
def bot_status():
    return jsonify({
        "bot_running": bot_running,
        "bot_thread_alive": bot_thread.is_alive() if bot_thread else False,
        "timestamp": time.time()
    })

@app.errorhandler(404)
def not_found(error):
    return jsonify({
        "error": "Endpoint not found",
        "available_endpoints": {
            "home": "/",
            "health": "/health", 
            "status": "/status",
            "bot_status": "/bot_status",
            "start_bot": "/start_bot (GET/POST)",
            "stop_bot": "/stop_bot (GET/POST)"
        }
    }), 404

@app.errorhandler(405)
def method_not_allowed(error):
    return jsonify({
        "error": "Method not allowed",
        "message": "This endpoint supports both GET and POST methods",
        "endpoint": request.endpoint
    }), 405

def render_keep_alive():
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π keep alive –¥–ª—è Render - –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è"""
    global bot_running, bot_thread, shutdown_event
    
    logger.info("üöÄ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π Render Keep Alive –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)")
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    ping_count = 0
    error_count = 0
    
    while not shutdown_event.is_set():
        try:
            ping_count += 1
            current_time = time.strftime("%H:%M:%S")
            
            # 1. –ü—Ä–æ—Å—Ç–æ–π health check
            try:
                response = requests.get("http://localhost:10000/health", timeout=3)
                if response.status_code == 200:
                    logger.info(f"üíì [{current_time}] Keep alive #{ping_count} - –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è [{current_time}] Health check –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [{current_time}] Health check –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            
            # 2. –í–Ω–µ—à–Ω–∏–π ping –¥–ª—è Render (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Å—ã–ø–∞–Ω–∏–µ)
            try:
                external_services = [
                    "https://httpbin.org/get",
                    "https://api.github.com",
                    "https://www.google.com",
                    "https://www.cloudflare.com"
                ]
                
                external_success = False
                for service in external_services:
                    try:
                        response = requests.get(service, timeout=5)
                        if response.status_code in [200, 301, 302]:
                            logger.info(f"üåê [{current_time}] –í–Ω–µ—à–Ω–∏–π ping —É—Å–ø–µ—à–µ–Ω: {service}")
                            external_success = True
                            break
                    except Exception:
                        continue
                
                if not external_success:
                    logger.warning(f"‚ö†Ô∏è [{current_time}] –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ –ø–∏–Ω–≥–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å")
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [{current_time}] –í–Ω–µ—à–Ω–∏–π ping –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            if bot_running and bot_thread and bot_thread.is_alive():
                logger.info(f"ü§ñ [{current_time}] –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.warning(f"‚ö†Ô∏è [{current_time}] –ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
                    bot_running = False
                    time.sleep(2)
                    
                    if not shutdown_event.is_set():
                        bot_thread_new = threading.Thread(target=run_bot_in_thread, daemon=True)
                        bot_thread_new.start()
                        bot_running = True
                        bot_thread = bot_thread_new
                        logger.info(f"üîÑ [{current_time}] –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                    
                except Exception as restart_error:
                    logger.error(f"‚ùå [{current_time}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {restart_error}")
            
            # 4. –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            if error_count > 0:
                logger.info(f"‚úÖ [{current_time}] –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ (–±—ã–ª–æ: {error_count})")
                error_count = 0
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª shutdown
            if shutdown_event.is_set():
                logger.info("üì¥ Keep alive –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª shutdown, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É")
                break
            
            # 6. –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ keep alive - –ê–ì–†–ï–°–°–ò–í–ù–û –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥!
            sleep_time = 30  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è Render
            logger.info(f"‚è≥ [{current_time}] –°–ª–µ–¥—É—é—â–∏–π keep alive —á–µ—Ä–µ–∑ {sleep_time} —Å–µ–∫—É–Ω–¥")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for _ in range(sleep_time):
                if shutdown_event.is_set():
                    break
                time.sleep(1)
            
        except Exception as e:
            error_count += 1
            current_time = time.strftime("%H:%M:%S")
            logger.error(f"‚ùå [{current_time}] –û—à–∏–±–∫–∞ –≤ keep alive #{error_count}: {e}")
            
            # –ü—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ
            if error_count > 5:
                logger.warning(f"‚ö†Ô∏è [{current_time}] –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, —É–≤–µ–ª–∏—á–∏–≤–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 2 –º–∏–Ω—É—Ç")
                for _ in range(120):  # 2 –º–∏–Ω—É—Ç—ã
                    if shutdown_event.is_set():
                        break
                    time.sleep(1)
            else:
                for _ in range(60):  # 1 –º–∏–Ω—É—Ç–∞
                    if shutdown_event.is_set():
                        break
                    time.sleep(1)
    
    logger.info("‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π Render Keep Alive –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == '__main__':
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app._start_time = time.time()
    logger.info(f"üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        bot_thread = threading.Thread(target=run_bot_in_thread, daemon=True)
        bot_thread.start()
        bot_running = True
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    try:
        keep_alive_thread = threading.Thread(target=render_keep_alive, daemon=True)
        keep_alive_thread.start()
        logger.info("üíì Keep alive –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å keep alive –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    try:
        logger.info("üåê –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º host='0.0.0.0' –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–≤–Ω–µ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º port –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        port = int(os.environ.get('PORT', 10000))
        
        app.run(
            host='0.0.0.0',
            port=port,
            debug=False,  # –û—Ç–∫–ª—é—á–∞–µ–º debug –¥–ª—è production
            use_reloader=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reloader –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            threaded=True  # –í–∫–ª—é—á–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ Flask –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
        shutdown_event.set()
        if bot_thread and bot_thread.is_alive():
            bot_thread.join(timeout=10)
        if keep_alive_thread and keep_alive_thread.is_alive():
            keep_alive_thread.join(timeout=5)
        sys.exit(1)
