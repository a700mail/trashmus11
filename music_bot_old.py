import logging
import os
import asyncio
import json
import time
import random
import yt_dlp
import browser_cookie3
from http.cookiejar import MozillaCookieJar
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import secrets
import re
from functools import partial

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("BOT_TOKEN", "8421693077:AAGkkuoHSp9-P2vQ369ZGjaNAizs4z54Zho")
MAX_FILE_SIZE_MB = 50
CACHE_DIR = "cache"
COOKIES_FILE = os.path.join(os.path.dirname(__file__), "cookies.txt")
TRACKS_FILE = os.path.join(os.path.dirname(__file__), "tracks.json")
SEARCH_CACHE_FILE = os.path.join(os.path.dirname(__file__), "search_cache.json")
SHARED_FILE = os.path.join(os.path.dirname(__file__), "shared_playlists.json")


ARTIST_FACTS_FILE = os.path.join(os.path.dirname(__file__), "artist_facts.json")
PREMIUM_USERS_FILE = os.path.join(os.path.dirname(__file__), "premium_users.json")
SEARCH_CACHE_TTL = 600
SHARE_TTL = 86400
PAGE_SIZE = 10  # –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏



logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
os.makedirs(CACHE_DIR, exist_ok=True)

# === JSON —Ñ—É–Ω–∫—Ü–∏–∏ ===
def load_json(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {e}")
            return default
    return default

def save_json(path, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {e}")

# üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–≥–æ–≤
async def save_json_async(path, data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç event loop"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º aiofiles –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        try:
            import aiofiles
            async with aiofiles.open(path, "w", encoding="utf-8") as f:
                await f.write(json.dumps(data, ensure_ascii=False, indent=2))
        except ImportError:
            # Fallback –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ aiofiles –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            with open(path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        
        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ {path}")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {e}")
        return False

def is_premium_user(user_id: str, username: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º –ø–æ ID –∏–ª–∏ username"""
    try:
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
        if str(user_id) in premium_data.get("premium_users", []):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
        if username and username in premium_data.get("premium_usernames", []):
            return True
            
        return False
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {user_id} (username: {username}): {e}")
        return False

def add_premium_user(user_id: str = None, username: str = None) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ ID –∏–ª–∏ username"""
    try:
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        
        if user_id:
            if str(user_id) not in premium_data.get("premium_users", []):
                premium_data["premium_users"].append(str(user_id))
                save_json(PREMIUM_USERS_FILE, premium_data)
                logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º")
                return True
            else:
                logging.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ –ø—Ä–µ–º–∏—É–º —Å–ø–∏—Å–∫–µ")
                return False
                
        elif username:
            if username not in premium_data.get("premium_usernames", []):
                premium_data["premium_usernames"].append(username)
                save_json(PREMIUM_USERS_FILE, premium_data)
                logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º")
                return True
            else:
                logging.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –≤ –ø—Ä–µ–º–∏—É–º —Å–ø–∏—Å–∫–µ")
                return False
        else:
            logging.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–∏ user_id, –Ω–∏ username")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–µ–º–∏—É–º: {e}")
        return False

def remove_premium_user(user_id: str = None, username: str = None) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ ID –∏–ª–∏ username"""
    try:
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        
        if user_id:
            if str(user_id) in premium_data.get("premium_users", []):
                premium_data["premium_users"].remove(str(user_id))
                save_json(PREMIUM_USERS_FILE, premium_data)
                logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–µ–º–∏—É–º")
                return True
            else:
                logging.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º —Å–ø–∏—Å–∫–µ")
                return False
                
        elif username:
            if username in premium_data.get("premium_usernames", []):
                premium_data["premium_usernames"].remove(username)
                save_json(PREMIUM_USERS_FILE, premium_data)
                logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–µ–º–∏—É–º")
                return True
            else:
                logging.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º —Å–ø–∏—Å–∫–µ")
                return False
        else:
            logging.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–∏ user_id, –Ω–∏ username")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–º–∏—É–º: {e}")
        return False



user_tracks = load_json(TRACKS_FILE, {})
search_cache = load_json(SEARCH_CACHE_FILE, {})
shared_playlists = load_json(SHARED_FILE, {})


artist_facts = load_json(ARTIST_FACTS_FILE, {"facts": {}})



def save_tracks():
    save_json(TRACKS_FILE, user_tracks)

# üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–≥–æ–≤
async def save_tracks_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç event loop"""
    return await save_json_async(TRACKS_FILE, user_tracks)

def save_shared():
    save_json(SHARED_FILE, shared_playlists)

# üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ shared –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–≥–æ–≤
async def save_shared_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ shared - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç event loop"""
    return await save_json_async(SHARED_FILE, shared_playlists)





# === –≠–∫—Å–ø–æ—Ä—Ç cookies (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
def export_cookies():
    try:
        cj = browser_cookie3.chrome(domain_name=".youtube.com")
        cj_mozilla = MozillaCookieJar()
        for cookie in cj:
            cj_mozilla.set_cookie(cookie)
        cj_mozilla.save(COOKIES_FILE, ignore_discard=True, ignore_expires=True)
        logging.info("‚úÖ Cookies —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ cookies: {e}")

# –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
try:
    export_cookies()
except Exception:
    pass

# –Ω–µ–±–æ–ª—å—à–æ–π diagnostic: –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ cookies.txt —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –∏–º–µ–Ω–∞
def check_cookies_file():
    if not os.path.exists(COOKIES_FILE):
        logging.warning("Cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", COOKIES_FILE)
        return
    try:
        cj = MozillaCookieJar()
        cj.load(COOKIES_FILE, ignore_discard=True, ignore_expires=True)
        names = [c.name for c in cj]
        logging.info("Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã (%d): %s", len(names), ", ".join(names[:10]) + ("..." if len(names) > 10 else ""))
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies.txt: %s", e)

check_cookies_file()



# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–ò ===
MP3_CLEANUP_INTERVAL = 600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ MP3 —Ñ–∞–π–ª–æ–≤ (10 –º–∏–Ω—É—Ç)
MP3_FILE_MAX_AGE = 15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç MP3 —Ñ–∞–π–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º

# üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ MP3 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–≥–æ–≤
async def periodic_mp3_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ MP3 —Ñ–∞–π–ª—ã —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç"""
    while True:
        try:
            await asyncio.sleep(MP3_CLEANUP_INTERVAL)
            
            logging.info("üßπ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ MP3 —Ñ–∞–π–ª–æ–≤...")
            
            cache_dir = CACHE_DIR
            if not os.path.exists(cache_dir):
                logging.info("üìÅ –ü–∞–ø–∫–∞ cache –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ cache
            files_to_remove = []
            current_time = time.time()
            
            for filename in os.listdir(cache_dir):
                file_path = os.path.join(cache_dir, filename)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ MP3 —Ñ–∞–π–ª—ã
                if filename.lower().endswith('.mp3'):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                        file_creation_time = os.path.getctime(file_path)
                        file_age_minutes = (current_time - file_creation_time) / 60
                        
                        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
                        if file_age_minutes > MP3_FILE_MAX_AGE:
                            files_to_remove.append((file_path, file_age_minutes))
                            
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ MP3 —Ñ–∞–π–ª—ã
            removed_count = 0
            total_size_mb = 0
            
            for file_path, age_minutes in files_to_remove:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    file_size = os.path.getsize(file_path)
                    file_size_mb = file_size / (1024 * 1024)
                    total_size_mb += file_size_mb
                    
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    os.remove(file_path)
                    removed_count += 1
                    
                    logging.info(f"üßπ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π MP3 —Ñ–∞–π–ª: {os.path.basename(file_path)} (–≤–æ–∑—Ä–∞—Å—Ç: {age_minutes:.1f} –º–∏–Ω, —Ä–∞–∑–º–µ—Ä: {file_size_mb:.2f} MB)")
                    
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            
            if removed_count > 0:
                logging.info(f"üßπ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {removed_count} MP3 —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {total_size_mb:.2f} MB")
            else:
                logging.info("üßπ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: —Å—Ç–∞—Ä—ã—Ö MP3 —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ MP3: {e}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# === –ö—ç—à –ø–æ–∏—Å–∫–∞ ===
def get_cached_search(query):
    query_l = query.lower()
    if query_l in search_cache:
        data = search_cache[query_l]
        if time.time() - data["time"] < SEARCH_CACHE_TTL:
            return data["results"]
    return None

def set_cached_search(query, results):
    search_cache[query.lower()] = {"time": time.time(), "results": results}
    save_json(SEARCH_CACHE_FILE, search_cache)

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è yt_dlp ===
def _ydl_download_blocking(url, outtmpl, cookiefile):
    """–ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ yt-dlp"""
    try:
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': outtmpl,
            'postprocessors': [{'key': 'FFmpegExtractAudio', 'preferredcodec': 'mp3', 'preferredquality': '192'}],
            'quiet': True,
            'no_warnings': True,
            'ignoreerrors': True,
            'extract_flat': False,  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω—É–∂–Ω–æ False
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies —Ñ–∞–π–ª
        if cookiefile and os.path.exists(cookiefile):
            try:
                ydl_opts['cookiefile'] = cookiefile
                logging.info(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies —Ñ–∞–π–ª: {cookiefile}")
            except Exception as cookie_error:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å cookies —Ñ–∞–π–ª–æ–º: {cookie_error}")
        else:
            logging.info("üç™ Cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                info = ydl.extract_info(url, download=True)
                
                if not info:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {url}")
                    return None
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = ydl.prepare_filename(info)
                if not filename:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è: {url}")
                    return None
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ .mp3
                mp3_filename = os.path.splitext(filename)[0] + ".mp3"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
                if not os.path.exists(mp3_filename):
                    logging.error(f"‚ùå MP3 —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {mp3_filename}")
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                try:
                    file_size = os.path.getsize(mp3_filename)
                    if file_size == 0:
                        logging.error(f"‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: {mp3_filename}")
                        return None
                    logging.info(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {mp3_filename} ({file_size} –±–∞–π—Ç)")
                except Exception as size_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {size_error}")
                    return None
                
                return mp3_filename, info
                
            except Exception as extract_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {extract_error}")
                return None
                
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _ydl_download_blocking: {e}")
        return None

async def download_track_from_url(user_id, url):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ), –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Ç—å –≤ user_tracks.
    """
    outtmpl = os.path.join(CACHE_DIR, '%(title)s.%(ext)s')
    try:
        logging.info(f"üíæ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {url}")
        
        # –≤—ã–ø–æ–ª–Ω–∏—Ç—å blocking ytdl –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
        fn_info = await asyncio.to_thread(_ydl_download_blocking, url, outtmpl, COOKIES_FILE)
        if not fn_info:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ: {url}")
            return None
            
        filename, info = fn_info
        logging.info(f"üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        size_mb = os.path.getsize(filename) / (1024 * 1024)
        if size_mb > MAX_FILE_SIZE_MB:
            try:
                os.remove(filename)
                logging.warning(f"‚ùå –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {MAX_FILE_SIZE_MB}MB: {size_mb:.2f}MB")
            except:
                pass
            return None
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tracks.setdefault(str(user_id), []).append(filename)
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ–Ω–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        asyncio.create_task(save_tracks_async())
        
        logging.info(f"‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {filename} ({size_mb:.2f}MB)")
        return filename
        
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def download_track_from_url_for_genre(user_id, url):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –¥–ª—è –∂–∞–Ω—Ä–æ–≤ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ), –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ user_tracks.
    """
    outtmpl = os.path.join(CACHE_DIR, '%(title)s.%(ext)s')
    try:
        logging.info(f"üíæ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç—Ä–µ–∫–∞ –ø–æ –∂–∞–Ω—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
        if not url or 'youtube.com' not in url:
            logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {url}")
            return None
        
        # –≤—ã–ø–æ–ª–Ω–∏—Ç—å blocking ytdl –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
        try:
            fn_info = await asyncio.to_thread(_ydl_download_blocking, url, outtmpl, COOKIES_FILE)
        except Exception as ytdl_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp –¥–ª—è {url}: {ytdl_error}")
            return None
            
        if not fn_info:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ: {url}")
            return None
            
        filename, info = fn_info
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
        if not filename or not os.path.exists(filename):
            logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {filename}")
            return None
            
        logging.info(f"üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        try:
            size_mb = os.path.getsize(filename) / (1024 * 1024)
            if size_mb > MAX_FILE_SIZE_MB:
                try:
                    os.remove(filename)
                    logging.warning(f"‚ùå –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {MAX_FILE_SIZE_MB}MB: {size_mb:.2f}MB")
                except Exception as remove_error:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª {filename}: {remove_error}")
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
            if size_mb < 0.1:  # –ú–µ–Ω—å—à–µ 100KB
                try:
                    os.remove(filename)
                    logging.warning(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: {size_mb:.2f}MB")
                except Exception as remove_error:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª {filename}: {remove_error}")
                return None
                
        except Exception as size_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {filename}: {size_error}")
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
            try:
                os.remove(filename)
            except:
                pass
            return None
            
        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∂–∞–Ω—Ä–æ–≤
        logging.info(f"‚úÖ –¢—Ä–µ–∫ –ø–æ –∂–∞–Ω—Ä—É —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {filename} ({size_mb:.2f}MB)")
        return filename
        
    except Exception as e:
        logging.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –ø–æ –∂–∞–Ω—Ä—É {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            if 'filename' in locals() and filename and os.path.exists(filename):
                os.remove(filename)
                logging.info(f"üßπ –û—á–∏—â–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {filename}")
        except:
            pass
        return None

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class SearchStates(StatesGroup):
    waiting_for_search = State()
    waiting_for_artist = State()

class ShareStates(StatesGroup):
    waiting_for_code = State()



# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ñ∂Ô∏è –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube")],
        [KeyboardButton(text="üéº –ú–æ—è –º—É–∑—ã–∫–∞")],
        [KeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏"), KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º")]
    ],
    resize_keyboard=True
)

# === –ü—Ä–µ–º–∏—É–º –º–µ–Ω—é ===
premium_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé≠ –ü–æ –∂–∞–Ω—Ä–∞–º"), KeyboardButton(text="üë§ –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º")],
        [KeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º"), KeyboardButton(text="üì• –û—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")],
        [KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# === –ú–µ–Ω—é –¥–ª—è –Ω–µ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
non_premium_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# === –ú–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞ ===
buy_premium_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

back_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ===
@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def global_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å YouTube.", reply_markup=main_menu)

@dp.message(F.text == "üíé –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏")
async def show_premium_menu(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_premium_user(user_id, username):
        await message.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\nüíé –†–∞–∑–¥–µ–ª ¬´–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏¬ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\nüõí –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º!", reply_markup=non_premium_menu)
        return
    
    await message.answer("üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–º–∏—É–º —Ä–∞–∑–¥–µ–ª!\n\n–ó–¥–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ üé≠ –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º\n‚Ä¢ üë§ –ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º\n‚Ä¢ üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º\n‚Ä¢ üì• –û—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç\n‚Ä¢ üö´ –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø", reply_markup=premium_menu)

@dp.message(F.text == "üõí –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
async def go_to_payment(message: types.Message):
    await show_buy_premium(message)

@dp.message(F.text == "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ")
async def go_to_payment_from_buy_menu(message: types.Message):
    await message.answer("üí≥ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ\n\nüîó –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ.", reply_markup=buy_premium_menu)

@dp.message(F.text == "üõí –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
async def show_buy_premium(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if is_premium_user(user_id, username):
        await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø!\n\nüíé –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.", reply_markup=main_menu)
        return
    
    await message.answer("üõí –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø\n\nüíé –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç:\n‚Ä¢ üé≠ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º\n‚Ä¢ üë§ –ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º\n‚Ä¢ üì§ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∏—Ç—å—Å—è –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏\n‚Ä¢ üì• –û—Ç–∫—Ä—ã—Ç–∏–µ —á—É–∂–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ 2$/–º–µ—Å—è—Ü", reply_markup=buy_premium_menu)

@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_from_premium(message: types.Message):
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.callback_query(F.data == "back_to_premium")
async def back_to_premium_menu(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text("üíé –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏", reply_markup=premium_menu)
    except Exception as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ back_to_premium_menu: {e}")
        await callback.message.answer("üíé –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏", reply_markup=premium_menu)
        await callback.message.delete()









@dp.message(Command("add_premium"))
async def add_premium_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–µ–º–∏—É–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin_ids = ["123456789"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_usernames = ["wtfguys4"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    is_admin = (user_id in admin_ids) or (username in admin_usernames)
    
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=main_menu)
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /add_premium <user_id –∏–ª–∏ @username>
    command_parts = message.text.split()
    if len(command_parts) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ /add_premium <user_id>\n‚Ä¢ /add_premium @username", reply_markup=main_menu)
        return
    
    target = command_parts[1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ username
    if target.startswith("@"):
        # –≠—Ç–æ username
        target_username = target[1:]  # –£–±–∏—Ä–∞–µ–º @
        if add_premium_user(username=target_username):
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º!", reply_markup=main_menu)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_username} –≤ –ø—Ä–µ–º–∏—É–º.", reply_markup=main_menu)
    else:
        # –≠—Ç–æ ID
        if add_premium_user(user_id=target):
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º!", reply_markup=main_menu)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} –≤ –ø—Ä–µ–º–∏—É–º.", reply_markup=main_menu)

@dp.message(Command("remove_premium"))
async def remove_premium_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–º–∏—É–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin_ids = ["123456789"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_usernames = ["wtfguys4"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    is_admin = (user_id in admin_ids) or (username in admin_usernames)
    
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=main_menu)
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /remove_premium <user_id –∏–ª–∏ @username>
    command_parts = message.text.split()
    if len(command_parts) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ /remove_premium <user_id>\n‚Ä¢ /remove_premium @username", reply_markup=main_menu)
        return
    
    target = command_parts[1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ username
    if target.startswith("@"):
        # –≠—Ç–æ username
        target_username = target[1:]  # –£–±–∏—Ä–∞–µ–º @
        if remove_premium_user(username=target_username):
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–µ–º–∏—É–º!", reply_markup=main_menu)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_username} –∏–∑ –ø—Ä–µ–º–∏—É–º.", reply_markup=main_menu)
    else:
        # –≠—Ç–æ ID
        if remove_premium_user(user_id=target):
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–µ–º–∏—É–º!", reply_markup=main_menu)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} –∏–∑ –ø—Ä–µ–º–∏—É–º.", reply_markup=main_menu)

@dp.message(Command("check_premium"))
async def check_premium_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if is_premium_user(user_id, username):
        await message.answer("üíé –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø!", reply_markup=main_menu)
    else:
        await message.answer("üîí –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞.", reply_markup=main_menu)

@dp.message(Command("list_premium"))
async def list_premium_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin_ids = ["123456789"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_usernames = ["admin"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    is_admin = (user_id in admin_ids) or (username in admin_usernames)
    
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=main_menu)
        return
    
    try:
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        premium_users = premium_data.get("premium_users", [])
        premium_usernames = premium_data.get("premium_usernames", [])
        
        total_premium = len(premium_users) + len(premium_usernames)
        
        if total_premium > 0:
            message_text = f"üíé –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({total_premium}):\n\n"
            
            if premium_users:
                message_text += "üÜî **–ü–æ ID:**\n"
                message_text += "\n".join([f"‚Ä¢ {user_id}" for user_id in premium_users]) + "\n\n"
            
            if premium_usernames:
                message_text += "üë§ **–ü–æ username:**\n"
                message_text += "\n".join([f"‚Ä¢ @{username}" for username in premium_usernames])
            
            await message.answer(message_text, reply_markup=main_menu)
        else:
            await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=main_menu)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", reply_markup=main_menu)

@dp.message(F.text == "üé≠ –ü–æ –∂–∞–Ω—Ä–∞–º")
async def show_genres(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_premium_user(user_id, username):
        await message.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\nüíé –§—É–Ω–∫—Ü–∏—è ¬´–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º¬ª –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_menu)
        return
    
    genres = get_genres()
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏
    keyboard = []
    for genre_name in genres.keys():
        keyboard.append([InlineKeyboardButton(text=genre_name, callback_data=f"genre:{genre_name}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        "üé≠ **–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏:**\n\n"
        "üéµ –Ø –Ω–∞–π–¥—É –∏ —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂—É –¥–ª—è –≤–∞—Å 8-12 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞!\n\n"
        "üí° –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∂–∞–Ω—Ä–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
        "‚Ä¢ üé≤ **–ö–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–µ–∫–∏!**\n\n"
        "üîÑ **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∂–∞–Ω—Ä –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤!**",
        parse_mode="Markdown",
        reply_markup=kb
    )

@dp.message(F.text == "üë§ –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º")
async def ask_artist_name(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_premium_user(user_id, username):
        await message.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\nüíé –§—É–Ω–∫—Ü–∏—è ¬´–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º¬ª –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_menu)
        return
    
    await state.set_state(SearchStates.waiting_for_artist)
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é
    premium_back_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –ø—Ä–µ–º–∏—É–º")]],
        resize_keyboard=True
    )
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã:", reply_markup=premium_back_keyboard)

@dp.message(SearchStates.waiting_for_artist, F.text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –ø—Ä–µ–º–∏—É–º")
async def back_from_artist_search(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –≤ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é"""
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é", reply_markup=premium_menu)











# === –ü–æ–∏—Å–∫ ===
@dp.message(F.text == "‚ñ∂Ô∏è –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube")
async def ask_track_name(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É:", reply_markup=back_button)
    await state.set_state(SearchStates.waiting_for_search)

@dp.message(SearchStates.waiting_for_search, F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_from_track_search(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)







@dp.message(SearchStates.waiting_for_search, F.text)
async def search_music(message: types.Message, state: FSMContext):
    query = message.text.strip()
    user_id = str(message.from_user.id)
    await state.clear()

    logging.info(f"üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}'")



    yt_url_pattern = r"(https?://)?(www\.)?(youtube\.com|youtu\.be)/.+"
    if re.match(yt_url_pattern, query):
        # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ–º –≤ background (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª)
        asyncio.create_task(download_track_from_url(message.from_user.id, query))
        return await message.answer("‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞. –û–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ ¬´–ú–æ—è –º—É–∑—ã–∫–∞¬ª –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.", reply_markup=main_menu)

    cached = get_cached_search(query)
    if cached:
        return await send_search_results(message.chat.id, cached)

    await message.answer("üîç –ò—â—É —Ç—Ä–µ–∫–∏...")
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–π yt-dlp search –≤ executor ‚Äî –¥–æ–±–∞–≤–∏–ª cookiefile –∑–¥–µ—Å—å —Ç–æ–∂–µ
        def search_block(q):
            ydl_opts = {
                'format': 'bestaudio/best',
                'noplaylist': True,
                'quiet': True,
                'cookiefile': COOKIES_FILE
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                return ydl.extract_info(f"ytsearch5:{q}", download=False)
        info = await asyncio.to_thread(search_block, query)
        results = info.get("entries", [])
        if not results:
            return await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.")
        set_cached_search(query, results)
        await send_search_results(message.chat.id, results)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: %s", e)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(SearchStates.waiting_for_artist, F.text)
async def search_by_artist(message: types.Message, state: FSMContext):
    """–ò—â–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    artist_name = message.text.strip()
    user_id = str(message.from_user.id)
    await state.clear()

    logging.info(f"üë§ –ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{artist_name}'")



    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    search_msg = await message.answer(
        f"üîç **–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
        "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ YouTube...\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        parse_mode="Markdown"
    )

    try:
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        results = await asyncio.to_thread(search_artist_tracks, artist_name, 12)
        
        if not results:
            await search_msg.edit_text(
                f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                f"üö´ –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é '{artist_name}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ YouTube\n"
                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É\n\n"
                "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è\n"
                "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await search_msg.edit_text(
            f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
            "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
            "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        downloaded_tracks = []
        failed_tracks = []

        for i, track in enumerate(results, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await search_msg.edit_text(
                        f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ {i}/{len(results)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                        f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
                        "üíæ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...",
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
                url = f"https://www.youtube.com/watch?v={track['id']}"
                
                try:
                    download_task = asyncio.create_task(
                        download_track_from_url_for_genre(user_id, url)
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue

                if filename:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        downloaded_tracks.append({
                            'filename': filename,
                            'title': track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'duration': track.get('duration', 0),
                            'size_mb': file_size_mb
                        })
                    except Exception as size_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {size_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞)")
                        continue

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                    try:
                        await message.answer_audio(
                            types.FSInputFile(filename),
                            title=track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            performer=artist_name,
                            duration=track.get('duration', 0)
                        )
                        logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {audio_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        try:
                            await message.answer_document(
                                types.FSInputFile(filename),
                                caption=f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist_name}"
                            )
                            logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        except Exception as doc_error:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {doc_error}")
                            failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            continue

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)

                else:
                    failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {e}")
                failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_count = len(downloaded_tracks)
        failed_count = len(failed_tracks)

        message_text = f"‚úÖ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        message_text += f"üéµ **–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {success_count} —Ç—Ä–µ–∫–æ–≤\n"

        if success_count > 0:
            total_size = sum(track.get('size_mb', 0) for track in downloaded_tracks)
            message_text += f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.1f} MB\n\n"

        if failed_count > 0:
            message_text += f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:** {failed_count} —Ç—Ä–µ–∫–æ–≤\n\n"
            message_text += "üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å:\n"
            message_text += "‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ YouTube\n"
            message_text += "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            message_text += "‚Ä¢ –ó–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏\n"
            message_text += "‚Ä¢ –ü—Ä–µ–≤—ã—Å–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏\n\n"

        message_text += "üéµ –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        message_text += "üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n\n"
        message_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message_text += "‚Ä¢ –°–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å\n"
        message_text += "‚Ä¢ –ò—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        message_text += "‚Ä¢ üé≤ **–ù–∞–∂–∞—Ç—å '–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º' –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞!**"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        keyboard_buttons = []

        if failed_count > 0:
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")])

        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        try:
            await search_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.answer(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except Exception as send_error:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")

        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {artist_name}: {e}")
        
        try:
            await search_msg.edit_text(
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}.\n"
                f"üîç –û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")],
                    [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
        except Exception as final_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {final_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            except Exception as last_error:
                logging.error(f"‚ùå –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {last_error}")

async def send_search_results(chat_id, results):
    keyboard = [
        [InlineKeyboardButton(text=(video.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")[:60], callback_data=f"dl:{video['id']}")]
        for video in results[:5]
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    await bot.send_message(chat_id, "üé∂ –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

# === Callback: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –ø–æ–∏—Å–∫–∞ ===
@dp.callback_query(F.data.startswith("dl:"))
async def download_track(callback: types.CallbackQuery):
    video_id = callback.data.split(":")[1]
    url = f"https://www.youtube.com/watch?v={video_id}"
    await callback.message.edit_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é...")
    # –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
    task = asyncio.create_task(download_track_from_url(callback.from_user.id, url))
    # –º–æ–∂–Ω–æ await task –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è, –Ω–æ –º—ã —Ö–æ—Ç–∏–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
        "‚úÖ **–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞**\n\n"
        "üéµ –¢—Ä–µ–∫ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
        "üíæ –û–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –º—É–∑—ã–∫–∞¬ª, –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

# === –í—Å–ø–æ–º–æ–≥: —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def build_tracks_keyboard(tracks, page=0, owner_for_buttons=None):
    kb = []
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    for i, path in enumerate(tracks[start:end], start=start):
        title = os.path.basename(path)
        row = []
        if owner_for_buttons:
            row.append(InlineKeyboardButton(text=(title[:35] + '...') if len(title) > 38 else title,
                                            callback_data=f"play_shared:{owner_for_buttons}:{i}"))
        else:
            row.append(InlineKeyboardButton(text=(title[:35] + '...') if len(title) > 38 else title,
                                            callback_data=f"play:{i}"))
            row.append(InlineKeyboardButton(text="üóë", callback_data=f"del:{i}"))
        kb.append(row)
    nav = []
    if page > 0:
        if owner_for_buttons:
            nav.append(InlineKeyboardButton(text="‚óÄ –ü—Ä–µ–¥", callback_data=f"shared_page:{owner_for_buttons}:{page-1}"))
        else:
            nav.append(InlineKeyboardButton(text="‚óÄ –ü—Ä–µ–¥", callback_data=f"music_page:{page-1}"))
    if len(tracks) > end:
        if owner_for_buttons:
            nav.append(InlineKeyboardButton(text="–°–ª–µ–¥ ‚ñ∂", callback_data=f"shared_page:{owner_for_buttons}:{page+1}"))
        else:
            nav.append(InlineKeyboardButton(text="–°–ª–µ–¥ ‚ñ∂", callback_data=f"music_page:{page+1}"))
    if nav:
        kb.append(nav)
    if owner_for_buttons:
        kb.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ", callback_data=f"download_all_shared:{owner_for_buttons}")])
    else:
        kb.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ", callback_data="download_all")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

# === –ú–æ—è –º—É–∑—ã–∫–∞ (–ø–æ–∫–∞–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã) ===
@dp.message(F.text == "üéº –ú–æ—è –º—É–∑—ã–∫–∞")
async def my_music(message: types.Message):
    user_id = str(message.from_user.id)
    tracks = user_tracks.get(user_id, [])
    if not tracks:
        return await message.answer("üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.")
    kb = build_tracks_keyboard(tracks, page=0, owner_for_buttons=None)
    await message.answer("üéß –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1):", reply_markup=kb)

# === Callback: –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–≤–æ–µ–π –º—É–∑—ã–∫–∏ ===
@dp.callback_query(F.data.startswith("music_page:"))
async def music_page_cb(callback: types.CallbackQuery):
    page = int(callback.data.split(":")[1])
    user_id = str(callback.from_user.id)
    tracks = user_tracks.get(user_id, [])
    if not tracks:
        return await callback.message.edit_text("üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.")
    kb = build_tracks_keyboard(tracks, page=page, owner_for_buttons=None)
    await callback.message.edit_text(f"üéß –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}):", reply_markup=kb)

# === Callback: play / play_shared ===
@dp.callback_query(F.data.startswith("play:"))
async def play_track(callback: types.CallbackQuery):
    idx = int(callback.data.split(":")[1])
    tracks = user_tracks.get(str(callback.from_user.id), [])
    if 0 <= idx < len(tracks) and os.path.exists(tracks[idx]):
        await callback.message.answer_audio(types.FSInputFile(tracks[idx]), title=os.path.basename(tracks[idx]))
    else:
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@dp.callback_query(F.data.startswith("play_shared:"))
async def play_shared(callback: types.CallbackQuery):
    parts = callback.data.split(":")
    owner = parts[1]
    idx = int(parts[2])
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tracks = []
    for code, playlist_data in shared_playlists.items():
        if playlist_data.get("owner") == owner and time.time() - playlist_data.get("created_at", 0) <= SHARE_TTL:
            tracks = playlist_data.get("tracks", [])
            break
    
    if 0 <= idx < len(tracks) and os.path.exists(tracks[idx]):
        await callback.message.answer_audio(types.FSInputFile(tracks[idx]), title=os.path.basename(tracks[idx]))
    else:
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

# === Callback: –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —á—É–∂–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ ===
@dp.callback_query(F.data.startswith("shared_page:"))
async def shared_page_cb(callback: types.CallbackQuery):
    _, owner, page = callback.data.split(":")
    page = int(page)
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tracks = []
    for code, playlist_data in shared_playlists.items():
        if playlist_data.get("owner") == owner and time.time() - playlist_data.get("created_at", 0) <= SHARE_TTL:
            tracks = playlist_data.get("tracks", [])
            break
    
    if not tracks:
        return await callback.message.edit_text("üìÇ –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    kb = build_tracks_keyboard(tracks, page=page, owner_for_buttons=owner)
    await callback.message.edit_text(f"üéß –ü–ª–µ–π–ª–∏—Å—Ç (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}):", reply_markup=kb)

# === Callback: download all (self) ===
@dp.callback_query(F.data == "download_all")
async def download_all_tracks(callback: types.CallbackQuery):
    tracks = user_tracks.get(str(callback.from_user.id), [])
    if not tracks:
        return await callback.message.answer("üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.")
    await callback.message.answer("üì• –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ —Ç—Ä–µ–∫–∏...")
    for path in tracks:
        if os.path.exists(path):
            try:
                await callback.message.answer_audio(types.FSInputFile(path), title=os.path.basename(path))
                await asyncio.sleep(0.4)
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ %s: %s", path, e)
    await callback.message.answer("‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

# === Callback: download all shared ===
@dp.callback_query(F.data.startswith("download_all_shared:"))
async def download_all_shared(callback: types.CallbackQuery):
    owner = callback.data.split(":")[1]
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tracks = []
    for code, playlist_data in shared_playlists.items():
        if playlist_data.get("owner") == owner and time.time() - playlist_data.get("created_at", 0) <= SHARE_TTL:
            tracks = playlist_data.get("tracks", [])
            break
    
    if not tracks:
        return await callback.message.answer("üìÇ –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    await callback.message.answer("üì• –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ —á—É–∂–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
    for path in tracks:
        if os.path.exists(path):
            try:
                await callback.message.answer_audio(types.FSInputFile(path), title=os.path.basename(path))
                await asyncio.sleep(0.4)
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ %s: %s", path, e)
    await callback.message.answer("‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

# === –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ ===
@dp.callback_query(F.data.startswith("del:"))
async def delete_track(callback: types.CallbackQuery):
    idx = int(callback.data.split(":")[1])
    user_id = str(callback.from_user.id)
    tracks = user_tracks.get(user_id, [])
    if not (0 <= idx < len(tracks)):
        return await callback.answer("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    
    path = tracks[idx]
    if os.path.exists(path):
        try:
            os.remove(path)
            logging.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {path}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")
            return await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞.", show_alert=True)
    
    tracks.pop(idx)
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ–Ω–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    asyncio.create_task(save_tracks_async())
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if not tracks:
        await callback.message.edit_text("üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.", reply_markup=main_menu)
    else:
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        current_page = 0
        for i in range(len(tracks) // PAGE_SIZE + 1):
            if i * PAGE_SIZE <= idx < (i + 1) * PAGE_SIZE:
                current_page = i
                break
        
        kb = build_tracks_keyboard(tracks, page=current_page, owner_for_buttons=None)
        await callback.message.edit_text(f"üéß –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1}):", reply_markup=kb)
    
    await callback.answer("‚úÖ –¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω.")

# === –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º ===
@dp.message(F.text == "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º")
async def share_playlist(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_premium_user(user_id, username):
        await message.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\nüíé –§—É–Ω–∫—Ü–∏—è ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º¬ª –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_menu)
        return
    
    user_tracks_list = user_tracks.get(user_id, [])
    
    if not user_tracks_list:
        await message.answer("üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞.", reply_markup=premium_menu)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    existing_tracks = [track for track in user_tracks_list if os.path.exists(track)]
    if len(existing_tracks) != len(user_tracks_list):
        logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {len(user_tracks_list) - len(existing_tracks)} –∏–∑ {len(user_tracks_list)}")
        user_tracks_list = existing_tracks
    
    if not user_tracks_list:
        await message.answer("üìÇ –í—Å–µ —Ç–≤–æ–∏ —Ç—Ä–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞.", reply_markup=premium_menu)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
    share_code = secrets.token_urlsafe(8)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
    shared_playlists[share_code] = {
        "owner": user_id,
        "tracks": user_tracks_list,
        "created_at": time.time()
    }
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ–Ω–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    asyncio.create_task(save_shared_async())
    
    logging.info(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª –ø–ª–µ–π–ª–∏—Å—Ç —Å –∫–æ–¥–æ–º {share_code}, —Ç—Ä–µ–∫–æ–≤: {len(user_tracks_list)}")
    
    await message.answer(
        f"üì§ –¢–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –≥–æ—Ç–æ–≤!\n\n"
        f"üîë –ö–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: `{share_code}`\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: {len(user_tracks_list)}\n"
        f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞\n\n"
        f"üí° –û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Ç–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç!",
        parse_mode="Markdown",
        reply_markup=premium_menu
    )

# === –û—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç ===
@dp.message(F.text == "üì• –û—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")
async def open_playlist_start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_premium_user(user_id, username):
        await message.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\nüíé –§—É–Ω–∫—Ü–∏—è ¬´–û—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç¬ª –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_menu)
        return
    
    await state.set_state(ShareStates.waiting_for_code)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
    ])
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", reply_markup=keyboard)

@dp.message(ShareStates.waiting_for_code, F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_from_playlist_open(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é"""
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é", reply_markup=premium_menu)

@dp.message(ShareStates.waiting_for_code, F.text)
async def open_playlist_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    await state.clear()

    logging.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç —Å –∫–æ–¥–æ–º: {code}")
    
    playlist_data = shared_playlists.get(code)
    if not playlist_data:
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.", reply_markup=premium_menu)
        return
        
    if time.time() - playlist_data.get("created_at", 0) > SHARE_TTL:
        await message.answer("‚ùå –ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞).", reply_markup=premium_menu)
        return

    owner_id = playlist_data.get("owner")
    tracks_list = playlist_data.get("tracks", [])
    
    logging.info(f"üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {owner_id}, —Ç—Ä–µ–∫–æ–≤: {len(tracks_list)}")
    
    if not tracks_list:
        await message.answer("üìÇ –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç.", reply_markup=premium_menu)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    existing_tracks = [track for track in tracks_list if os.path.exists(track)]
    if len(existing_tracks) != len(tracks_list):
        logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {len(tracks_list) - len(existing_tracks)} –∏–∑ {len(tracks_list)}")
        tracks_list = existing_tracks
    
    if not tracks_list:
        await message.answer("üìÇ –í—Å–µ —Ç—Ä–µ–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=premium_menu)
        return

    kb = build_tracks_keyboard(tracks_list, page=0, owner_for_buttons=owner_id)
    await message.answer(f"üéß –ü–ª–µ–π–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({len(tracks_list)} —Ç—Ä–µ–∫–æ–≤):", reply_markup=kb)

# === –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø ===
@dp.message(F.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def cancel_access(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_premium_user(user_id, username):
        await message.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\nüíé –§—É–Ω–∫—Ü–∏—è ¬´–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_menu)
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    codes_to_remove = []
    for code, playlist_data in shared_playlists.items():
        if playlist_data.get("owner") == user_id:
            codes_to_remove.append(code)
    
    if codes_to_remove:
        for code in codes_to_remove:
            del shared_playlists[code]
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ–Ω–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        asyncio.create_task(save_shared_async())
        
        await message.answer(
            f"‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–º–µ–Ω–µ–Ω!\n\n"
            f"üö´ –£–¥–∞–ª–µ–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {len(codes_to_remove)}\n"
            f"üîí –¢–≤–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=premium_menu
        )
    else:
        await message.answer(
            "üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞.",
            reply_markup=premium_menu
        )

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∂–∞–Ω—Ä–∞–º–∏ ===
def get_randomized_genres():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞"""
    base_genres = get_genres()
    randomized_genres = {}
    
    for genre_name, queries in base_genres.items():
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        shuffled_queries = list(queries)
        random.shuffle(shuffled_queries)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Ç 80% –¥–æ 100% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
        min_queries = max(10, int(len(shuffled_queries) * 0.8))
        max_queries = len(shuffled_queries)
        num_queries = random.randint(min_queries, max_queries)
        
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ
        selected_queries = random.sample(shuffled_queries, num_queries)
        randomized_genres[genre_name] = selected_queries
        
        logging.info(f"üé≤ –ñ–∞–Ω—Ä {genre_name}: –≤—ã–±—Ä–∞–Ω–æ {num_queries} –∏–∑ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    return randomized_genres

def get_genres():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    return {
        "üéµ –ü–æ–ø": [
            "Ed Sheeran - Shape of You",
            "Taylor Swift - Shake It Off",
            "Bruno Mars - Uptown Funk",
            "Adele - Hello",
            "Justin Bieber - Sorry",
            "Katy Perry - Roar",
            "Maroon 5 - Sugar",
            "OneRepublic - Counting Stars",
            "Imagine Dragons - Radioactive",
            "Sam Smith - Stay With Me",
            "Ariana Grande - Thank U Next",
            "Post Malone - Circles",
            "Dua Lipa - Don't Start Now",
            "The Weeknd - Blinding Lights",
            "Lady Gaga - Shallow",
            "Billie Eilish - Bad Guy",
            "Shawn Mendes - Se√±orita",
            "Camila Cabello - Havana",
            "Halsey - Without Me",
            "Lorde - Royals",
            "Sia - Chandelier",
            "P!nk - Just Give Me A Reason",
            "Kesha - Tik Tok",
            "Rihanna - Diamonds",
            "Beyonc√© - Halo",
            "Christina Aguilera - Beautiful",
            "Britney Spears - Toxic",
            "Madonna - Like A Prayer",
            "Cyndi Lauper - Girls Just Want To Have Fun",
            "Whitney Houston - I Will Always Love You",
            "Celine Dion - My Heart Will Go On"
        ],
        "üé∏ –†–æ–∫": [
            "Queen - Bohemian Rhapsody",
            "Led Zeppelin - Stairway to Heaven",
            "Pink Floyd - Another Brick in the Wall",
            "The Beatles - Hey Jude",
            "Guns N Roses - Sweet Child O Mine",
            "AC/DC - Back In Black",
            "Metallica - Nothing Else Matters",
            "Nirvana - Smells Like Teen Spirit",
            "The Rolling Stones - Paint It Black",
            "Eagles - Hotel California",
            "U2 - With Or Without You",
            "Coldplay - Yellow",
            "Radiohead - Creep",
            "Oasis - Wonderwall",
            "The Killers - Mr. Brightside",
            "Arctic Monkeys - Do I Wanna Know",
            "Foo Fighters - Everlong",
            "Red Hot Chili Peppers - Californication",
            "Green Day - American Idiot",
            "Linkin Park - In The End",
            "System of a Down - Chop Suey",
            "Slipknot - Duality",
            "Tool - Schism",
            "Rage Against The Machine - Killing In The Name",
            "Pearl Jam - Alive",
            "Soundgarden - Black Hole Sun",
            "Alice In Chains - Man In The Box",
            "Stone Temple Pilots - Plush",
            "Smashing Pumpkins - Today",
            "The Cranberries - Zombie"
        ],
        "üé§ –•–∏–ø-—Ö–æ–ø": [
            "Eminem - Lose Yourself",
            "50 Cent - In Da Club",
            "Drake - God's Plan",
            "Kendrick Lamar - HUMBLE",
            "J. Cole - No Role Modelz",
            "Travis Scott - SICKO MODE",
            "Post Malone - Rockstar",
            "Cardi B - Bodak Yellow",
            "Nicki Minaj - Super Bass",
            "Lil Wayne - Lollipop",
            "Kanye West - Stronger",
            "Jay-Z - Empire State of Mind",
            "Nas - N.Y. State of Mind",
            "Tupac - Changes",
            "Notorious B.I.G. - Juicy",
            "Snoop Dogg - Gin and Juice",
            "Dr. Dre - Still D.R.E.",
            "Ice Cube - It Was A Good Day",
            "Public Enemy - Fight The Power",
            "Run DMC - Walk This Way",
            "Beastie Boys - Sabotage",
            "OutKast - Hey Ya",
            "A Tribe Called Quest - Can I Kick It",
            "De La Soul - Me Myself and I",
            "Wu-Tang Clan - C.R.E.A.M.",
            "Mobb Deep - Shook Ones",
            "Gang Starr - Moment of Truth",
            "Black Star - Definition",
            "Mos Def - Mathematics",
            "Talib Kweli - Get By"
        ],
        "üéπ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": [
            "The Weeknd - Blinding Lights",
            "Calvin Harris - This Is What You Came For",
            "David Guetta - Titanium",
            "Skrillex - Bangarang",
            "Avicii - Wake Me Up",
            "Marshmello - Alone",
            "Zedd - Clarity",
            "Martin Garrix - Animals",
            "Kygo - Firestone",
            "Disclosure - Latch",
            "Daft Punk - Get Lucky",
            "The Chainsmokers - Closer",
            "Major Lazer - Lean On",
            "DJ Snake - Turn Down For What",
            "Flume - Never Be Like You",
            "Odesza - Say My Name",
            "Porter Robinson - Language",
            "Madeon - Pop Culture",
            "Kaskade - Eyes",
            "Tiesto - Red Lights",
            "Armin van Buuren - This Is What It Feels Like",
            "Above & Beyond - Sun & Moon",
            "Eric Prydz - Call On Me",
            "Swedish House Mafia - Don't You Worry Child",
            "Alesso - Heroes",
            "Sebastian Ingrosso - Reload",
            "Axwell - Center of the Universe",
            "Steve Angello - Payback",
            "Laidback Luke - Turbulence",
            "Hardwell - Spaceman"
        ],
        "üé∑ –î–∂–∞–∑": [
            "Louis Armstrong - What A Wonderful World",
            "Ella Fitzgerald - Summertime",
            "Miles Davis - So What",
            "John Coltrane - Giant Steps",
            "Duke Ellington - Take The A Train",
            "Billie Holiday - Strange Fruit",
            "Thelonious Monk - Round Midnight",
            "Chet Baker - My Funny Valentine",
            "Wes Montgomery - Four On Six",
            "Cannonball Adderley - Mercy Mercy Mercy",
            "Dave Brubeck - Take Five",
            "Herbie Hancock - Watermelon Man",
            "Wayne Shorter - Footprints",
            "Art Blakey - Moanin",
            "Horace Silver - Song for My Father",
            "Hank Mobley - Soul Station",
            "Lee Morgan - The Sidewinder",
            "Freddie Hubbard - Red Clay",
            "Woody Shaw - Rosewood",
            "Joe Henderson - Recorda Me",
            "Stan Getz - The Girl from Ipanema",
            "Gerry Mulligan - My Funny Valentine",
            "Paul Desmond - Take Five",
            "Cannonball Adderley - Work Song",
            "Nat King Cole - Nature Boy",
            "Frank Sinatra - Fly Me To The Moon",
            "Tony Bennett - I Left My Heart In San Francisco",
            "Sarah Vaughan - Misty",
            "Nina Simone - Feeling Good",
            "Diana Krall - The Look of Love"
        ],
        "üéª –ö–ª–∞—Å—Å–∏–∫–∞": [
            "Beethoven - Symphony No. 5",
            "Mozart - Symphony No. 40",
            "Bach - Brandenburg Concerto No. 3",
            "Tchaikovsky - Swan Lake",
            "Vivaldi - Four Seasons",
            "Chopin - Nocturne Op. 9 No. 2",
            "Debussy - Clair de Lune",
            "Rachmaninoff - Piano Concerto No. 2",
            "Liszt - Hungarian Rhapsody No. 2",
            "Schubert - Ave Maria",
            "Handel - Messiah Hallelujah",
            "Haydn - Symphony No. 94 Surprise",
            "Brahms - Symphony No. 1",
            "Mahler - Symphony No. 5",
            "Shostakovich - Symphony No. 5",
            "Prokofiev - Romeo and Juliet",
            "Stravinsky - The Rite of Spring",
            "Ravel - Bolero",
            "Grieg - Peer Gynt Suite",
            "Dvorak - Symphony No. 9 From the New World",
            "Sibelius - Finlandia",
            "Elgar - Pomp and Circumstance",
            "Holst - The Planets",
            "Vaughan Williams - The Lark Ascending",
            "Delius - On Hearing the First Cuckoo in Spring",
            "Butterworth - The Banks of Green Willow",
            "Britten - The Young Person's Guide to the Orchestra",
            "Walton - Crown Imperial",
            "Tippett - Fantasia Concertante",
            "Maxwell Davies - An Orkney Wedding"
        ],
        "üé∫ –ë–ª—é–∑": [
            "B.B. King - The Thrill Is Gone",
            "Eric Clapton - Layla",
            "Jimi Hendrix - Red House",
            "Stevie Ray Vaughan - Pride and Joy",
            "Muddy Waters - Hoochie Coochie Man",
            "Howlin Wolf - Smokestack Lightning",
            "John Lee Hooker - Boom Boom",
            "Albert King - Born Under A Bad Sign",
            "Freddie King - Hide Away",
            "Buddy Guy - Damn Right I Got The Blues",
            "Robert Johnson - Cross Road Blues",
            "Son House - Death Letter",
            "Skip James - Devil Got My Woman",
            "Charley Patton - Pony Blues",
            "Blind Lemon Jefferson - Black Snake Moan",
            "Lead Belly - Goodnight Irene",
            "Big Bill Broonzy - Key to the Highway",
            "Tampa Red - It's Tight Like That",
            "Leroy Carr - How Long Blues",
            "Lonnie Johnson - Tomorrow Night",
            "Blind Blake - Diddie Wa Diddie",
            "Blind Boy Fuller - Step It Up and Go",
            "Josh White - One Meat Ball",
            "Brownie McGhee - Key to the Highway",
            "Sonny Terry - Harmonica Blues",
            "Lightnin Hopkins - Mojo Hand",
            "Johnny Shines - Dynaflow Blues",
            "Homesick James - Set Down Gal",
            "Eddie Taylor - Bad Boy",
            "Jimmy Reed - Big Boss Man"
        ],
        "üéº –ö–∞–Ω—Ç—Ä–∏": [
            "Johnny Cash - Ring of Fire",
            "Dolly Parton - Jolene",
            "Willie Nelson - On The Road Again",
            "George Strait - Amarillo By Morning",
            "Garth Brooks - Friends In Low Places",
            "Shania Twain - Man! I Feel Like A Woman",
            "Kenny Rogers - The Gambler",
            "Loretta Lynn - Coal Miner's Daughter",
            "Merle Haggard - Mama Tried",
            "Hank Williams - I'm So Lonesome I Could Cry",
            "Patsy Cline - Crazy",
            "Tammy Wynette - Stand By Your Man",
            "Waylon Jennings - Luckenbach Texas",
            "Kris Kristofferson - Me and Bobby McGee",
            "Roger Miller - King of the Road",
            "Buck Owens - Act Naturally",
            "Don Williams - I Believe in You",
            "Alan Jackson - Chattahoochee",
            "Toby Keith - Should've Been a Cowboy",
            "Tim McGraw - Indian Outlaw",
            "Brooks & Dunn - Boot Scootin' Boogie",
            "Alabama - Mountain Music",
            "The Oak Ridge Boys - Elvira",
            "Statler Brothers - Flowers on the Wall",
            "Charlie Daniels Band - The Devil Went Down to Georgia",
            "Marshall Tucker Band - Can't You See",
            "Lynyrd Skynyrd - Sweet Home Alabama",
            "Allman Brothers Band - Ramblin' Man",
            "Eagles - Take It Easy",
            "Linda Ronstadt - Blue Bayou"
        ],
        "üé≠ –†—ç–≥–≥–∏": [
            "Bob Marley - No Woman No Cry",
            "Bob Marley - Three Little Birds",
            "Bob Marley - Redemption Song",
            "Peter Tosh - Legalize It",
            "Jimmy Cliff - The Harder They Come",
            "Toots and the Maytals - Pressure Drop",
            "Burning Spear - Marcus Garvey",
            "Culture - Two Sevens Clash",
            "Steel Pulse - Handsworth Revolution",
            "Black Uhuru - Shine Eye Gal",
            "Gregory Isaacs - Night Nurse",
            "Dennis Brown - Money in My Pocket",
            "John Holt - The Tide Is High",
            "Alton Ellis - I'm Still in Love With You",
            "Ken Boothe - Everything I Own",
            "Delroy Wilson - I'm Still in Love With You",
            "The Paragons - The Tide Is High",
            "The Melodians - Rivers of Babylon",
            "The Abyssinians - Satta Massagana",
            "The Congos - Fisherman",
            "The Heptones - Book of Rules",
            "The Mighty Diamonds - Pass the Kouchie",
            "The Wailers - Simmer Down",
            "The Skatalites - Guns of Navarone",
            "Desmond Dekker - Israelites",
            "Prince Buster - Al Capone",
            "Derrick Morgan - Forward March",
            "Laurel Aitken - Boogie in My Bones",
            "Owen Gray - Please Let Me Go",
            "The Pioneers - Long Shot Kick De Bucket"
        ],
        "üé™ –§–æ–ª–∫": [
            "Bob Dylan - Like A Rolling Stone",
            "Joan Baez - Diamonds and Rust",
            "Simon and Garfunkel - The Sound of Silence",
            "Joni Mitchell - Big Yellow Taxi",
            "Woody Guthrie - This Land Is Your Land",
            "Pete Seeger - Turn Turn Turn",
            "The Byrds - Mr. Tambourine Man",
            "Crosby Stills Nash and Young - Suite: Judy Blue Eyes",
            "Donovan - Catch The Wind",
            "Fairport Convention - Matty Groves",
            "Pentangle - Light Flight",
            "Steeleye Span - All Around My Hat",
            "The Incredible String Band - Air",
            "Bert Jansch - Needle of Death",
            "John Renbourn - The Hermit",
            "Davey Graham - Anji",
            "Martin Carthy - Scarborough Fair",
            "Shirley Collins - A Bunch of Thyme",
            "Anne Briggs - Blackwater Side",
            "June Tabor - The Grey Funnel Line",
            "Richard Thompson - 1952 Vincent Black Lightning",
            "Sandy Denny - Who Knows Where the Time Goes",
            "Nick Drake - Pink Moon",
            "John Martyn - May You Never",
            "Roy Harper - When an Old Cricketer Leaves the Crease",
            "Ralph McTell - Streets of London",
            "Al Stewart - Year of the Cat",
            "Cat Stevens - Wild World",
            "James Taylor - Fire and Rain"
        ],
        "üé® –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞": [
            "Radiohead - Creep",
            "Arctic Monkeys - Do I Wanna Know",
            "The Strokes - Last Nite",
            "Vampire Weekend - A-Punk",
            "Tame Impala - The Less I Know The Better",
            "The Killers - Mr. Brightside",
            "Arcade Fire - Wake Up",
            "Modest Mouse - Float On",
            "Death Cab for Cutie - I Will Follow You Into The Dark",
            "The National - Bloodbuzz Ohio",
            "Interpol - Obstacle 1",
            "The White Stripes - Seven Nation Army",
            "The Black Keys - Lonely Boy",
            "Cage The Elephant - Ain't No Rest for the Wicked",
            "Portugal. The Man - Feel It Still",
            "Twenty One Pilots - Stressed Out",
            "Panic! At The Disco - I Write Sins Not Tragedies",
            "Fall Out Boy - Sugar We're Goin Down",
            "My Chemical Romance - Welcome to the Black Parade",
            "Paramore - Misery Business",
            "The 1975 - Chocolate",
            "Bastille - Pompeii",
            "Imagine Dragons - Radioactive",
            "Of Monsters and Men - Little Talks",
            "Mumford & Sons - I Will Wait",
            "The Lumineers - Ho Hey",
            "Edward Sharpe & The Magnetic Zeros - Home",
            "Fleet Foxes - White Winter Hymnal",
            "Bon Iver - Skinny Love",
            "The xx - Intro"
        ],
        "üé¨ –°–∞—É–Ω–¥—Ç—Ä–µ–∫–∏": [
            "Hans Zimmer - Time (Inception)",
            "John Williams - Star Wars Theme",
            "Ennio Morricone - The Good The Bad and The Ugly",
            "Danny Elfman - Batman Theme",
            "Howard Shore - The Lord of the Rings Theme",
            "James Horner - Titanic Theme",
            "Vangelis - Chariots of Fire",
            "Nino Rota - The Godfather Theme",
            "Bernard Herrmann - Psycho Theme",
            "Jerry Goldsmith - Star Trek Theme",
            "John Barry - James Bond Theme",
            "Maurice Jarre - Lawrence of Arabia Theme",
            "Alex North - 2001 A Space Odyssey Theme",
            "Elmer Bernstein - The Magnificent Seven",
            "Dimitri Tiomkin - High Noon Theme",
            "Max Steiner - Gone With The Wind Theme",
            "Erich Wolfgang Korngold - The Adventures of Robin Hood",
            "Franz Waxman - Sunset Boulevard",
            "Alfred Newman - How The West Was Won",
            "Mikl√≥s R√≥zsa - Ben-Hur Theme",
            "Bronis≈Çaw Kaper - Mutiny on the Bounty",
            "Dimitri Shostakovich - The Gadfly Suite",
            "Sergei Prokofiev - Alexander Nevsky",
            "Igor Stravinsky - The Firebird Suite",
            "Claude Debussy - Clair de Lune",
            "Fr√©d√©ric Chopin - Nocturne in C minor",
            "Ludwig van Beethoven - Moonlight Sonata",
            "Wolfgang Amadeus Mozart - Eine kleine Nachtmusik",
            "Johann Sebastian Bach - Air on the G String"
        ]
    }

def search_genre_tracks(genre_queries, limit=10):
    """–ò—â–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
    all_results = []
    
    try:
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        shuffled_queries = list(genre_queries)
        random.shuffle(shuffled_queries)
        
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ 15, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 15-20
        if len(shuffled_queries) > 15:
            num_queries = random.randint(15, min(20, len(shuffled_queries)))
            selected_queries = random.sample(shuffled_queries, num_queries)
        else:
            selected_queries = shuffled_queries
        
        logging.info(f"üé≤ –í—ã–±—Ä–∞–Ω–æ {len(selected_queries)} —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ {len(genre_queries)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        for query in selected_queries:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
                ydl_opts = {
                    'format': 'bestaudio/best',
                    'noplaylist': True,
                    'quiet': True,
                    'cookiefile': COOKIES_FILE if os.path.exists(COOKIES_FILE) else None,
                    'extract_flat': True,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    'no_warnings': True,
                    'ignoreerrors': True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                }
                
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    try:
                        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–∫ (1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å)
                        search_query = f"ytsearch1:{query}"
                        info = ydl.extract_info(search_query, download=False)
                        
                        if not info:
                            logging.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}'")
                            continue
                            
                        results = info.get("entries", [])
                        
                        if results:
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–±–æ—Ä–Ω–∏–∫–æ–≤ –∏ –Ω–∞—Ä–µ–∑–æ–∫
                            valid_results = []
                            for result in results:
                                if not result:
                                    continue
                                    
                                title = result.get('title', '').lower()
                                duration = result.get('duration', 0)
                                video_id = result.get('id')
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–±–æ—Ä–Ω–∏–∫, –Ω–µ –Ω–∞—Ä–µ–∑–∫–∞ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç—Ä–µ–∫
                                if (duration and duration > 60 and  # –¢—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã
                                    duration < 600 and  # –ò –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–Ω–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)
                                    'mix' not in title and 
                                    'compilation' not in title and
                                    'collection' not in title and
                                    'best of' not in title and
                                    'greatest hits' not in title and
                                    'remix' not in title and
                                    'cover' not in title and
                                    'karaoke' not in title and
                                    'instrumental' not in title and
                                    'live' not in title and  # –ò–∑–±–µ–≥–∞–µ–º –∂–∏–≤—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
                                    'concert' not in title and
                                    'performance' not in title and
                                    video_id):  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å ID –≤–∏–¥–µ–æ
                                    
                                    valid_results.append(result)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (1-3) –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                            if valid_results:
                                num_to_add = random.randint(1, min(3, len(valid_results)))
                                selected_results = random.sample(valid_results, num_to_add)
                                all_results.extend(selected_results)
                                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {num_to_add} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
                        else:
                            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
                            
                    except Exception as search_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}': {search_error}")
                        continue
                        
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è yt-dlp –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        unique_results = []
        seen_ids = set()
        
        for result in all_results:
            if result and result.get('id') and result['id'] not in seen_ids:
                unique_results.append(result)
                seen_ids.add(result['id'])
        
        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É")
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        random.shuffle(unique_results)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
        return unique_results[:limit]
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä—É: {e}")
        return []

def search_artist_tracks(artist_name, limit=15):
    """–ò—â–µ—Ç —Ç—Ä–µ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ YouTube"""
    try:
        logging.info(f"üë§ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {artist_name}")
        
        ydl_opts = {
            'format': 'bestaudio/best',
            'noplaylist': True,
            'quiet': True,
            'cookiefile': COOKIES_FILE if os.path.exists(COOKIES_FILE) else None,
            'extract_flat': True,
            'no_warnings': True,
            'ignoreerrors': True
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
            search_query = f"ytsearch{limit + 5}:{artist_name} music"
            info = ydl.extract_info(search_query, download=False)
            
            if not info:
                logging.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist_name}'")
                return []
                
            results = info.get("entries", [])
            
            if not results:
                logging.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist_name}'")
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            valid_results = []
            for result in results:
                if not result:
                    continue
                    
                title = result.get('title', '').lower()
                duration = result.get('duration', 0)
                video_id = result.get('id')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–∫
                if (duration and duration > 60 and  # –¢—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã
                    duration < 900 and  # –ò –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–Ω–µ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç)
                    'mix' not in title and 
                    'compilation' not in title and
                    'collection' not in title and
                    'best of' not in title and
                    'greatest hits' not in title and
                    'karaoke' not in title and
                    'instrumental' not in title and
                    'live' not in title and  # –ò–∑–±–µ–≥–∞–µ–º –∂–∏–≤—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
                    'concert' not in title and
                    'performance' not in title and
                    video_id):  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å ID –≤–∏–¥–µ–æ
                    
                    valid_results.append(result)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
            unique_results = []
            seen_ids = set()
            
            for result in valid_results:
                if result and result.get('id') and result['id'] not in seen_ids:
                    unique_results.append(result)
                    seen_ids.add(result['id'])
            
            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}")
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            random.shuffle(unique_results)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
            return unique_results[:limit]
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}: {e}")
        return []

@dp.callback_query(F.data.startswith("genre:"))
async def handle_genre_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
    genre_name = callback.data.split(":", 1)[1]
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
    if not is_premium_user(user_id, username):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return
    
    logging.info(f"üé≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∂–∞–Ω—Ä: {genre_name}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –ø–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∏—Å—å
        await callback.message.edit_text(
            f"üîç **–ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
            "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞—é –∏—Ö –¥–ª—è –≤–∞—Å...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
    except Exception as edit_error:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.answer(
                f"üîç **–ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
                "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞—é –∏—Ö –¥–ª—è –≤–∞—Å...\n"
                "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode="Markdown"
            )
        except Exception as send_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
            return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
        genres = get_randomized_genres()
        genre_queries = genres.get(genre_name, [])
        
        if not genre_queries:
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞**\n\n"
                f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∂–∞–Ω—Ä–∞ {genre_name}.\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–æ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤ (8-12 –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö 10)
        random_limit = random.randint(8, 12)
        logging.info(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {random_limit}")
        
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä—É
        try:
            results = await asyncio.to_thread(search_genre_tracks, genre_queries, random_limit)
            
        except Exception as search_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä—É {genre_name}: {search_error}")
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞**\n\n"
                f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É {genre_name}.\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"genre:{genre_name}")],
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
            return
        
        if not results:
            await callback.message.edit_text(
                f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                f"üö´ –ü–æ –∂–∞–Ω—Ä—É {genre_name} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await callback.message.edit_text(
                f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
                "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
                "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode="Markdown"
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ: {edit_error}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
        downloaded_tracks = []
        failed_tracks = []
        
        for i, track in enumerate(results, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await callback.message.edit_text(
                        f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ {i}/{len(results)} –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
                        f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
                        "üíæ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...",
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                url = f"https://www.youtube.com/watch?v={track['id']}"
                
                try:
                    download_task = asyncio.create_task(
                        download_track_from_url_for_genre(user_id, url)
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue
                
                if filename:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            # –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        downloaded_tracks.append({
                            'filename': filename,
                            'title': track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'duration': track.get('duration', 0),
                            'size_mb': file_size_mb
                        })
                    except Exception as size_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {size_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞)")
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
                    try:
                        await callback.message.answer_audio(
                            types.FSInputFile(filename),
                            title=track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            performer=f"–ñ–∞–Ω—Ä: {genre_name}",
                            duration=track.get('duration', 0)
                        )
                        logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {audio_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        try:
                            await callback.message.answer_document(
                                types.FSInputFile(filename),
                                caption=f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\nüé≠ –ñ–∞–Ω—Ä: {genre_name}"
                            )
                            logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        except Exception as doc_error:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {doc_error}")
                            failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            continue
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                else:
                    failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {e}")
                failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_count = len(downloaded_tracks)
        failed_count = len(failed_tracks)
        
        message_text = f"‚úÖ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        message_text += f"üéµ **–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {success_count} —Ç—Ä–µ–∫–æ–≤\n"
        
        if success_count > 0:
            total_size = sum(track.get('size_mb', 0) for track in downloaded_tracks)
            message_text += f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.1f} MB\n\n"
        
        if failed_count > 0:
            message_text += f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:** {failed_count} —Ç—Ä–µ–∫–æ–≤\n\n"
            message_text += "üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å:\n"
            message_text += "‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ YouTube\n"
            message_text += "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            message_text += "‚Ä¢ –ó–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏\n"
            message_text += "‚Ä¢ –ü—Ä–µ–≤—ã—Å–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
        
        message_text += "üéµ –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        message_text += "üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n\n"
        message_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message_text += "‚Ä¢ –°–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å\n"
        message_text += "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä\n"
        message_text += "‚Ä¢ üé≤ **–ù–∞–∂–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∂–µ –∂–∞–Ω—Ä –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤!**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        keyboard_buttons = []
        
        if failed_count > 0:
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"genre:{genre_name}")])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üé≤ –ï—â–µ —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞", callback_data=f"genre:{genre_name}")],
            [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await callback.message.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except Exception as send_error:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
        
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä—É {genre_name}: {e}")
        
        try:
            await callback.message.edit_text(
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}.\n"
                f"üîç –û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"genre:{genre_name}")],
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
        except Exception as final_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {final_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∂–∞–Ω—Ä—É {genre_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                    ])
                )
            except Exception as last_error:
                logging.error(f"‚ùå –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {last_error}")

@dp.callback_query(F.data == "show_genres")
async def show_genres_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ —á–µ—Ä–µ–∑ callback"""
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
    if not is_premium_user(user_id, username):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return
    
    genres = get_genres()
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏
    keyboard = []
    for genre_name in genres.keys():
        keyboard.append([InlineKeyboardButton(text=genre_name, callback_data=f"genre:{genre_name}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üé≠ **–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏:**\n\n"
        "üéµ –Ø –Ω–∞–π–¥—É –∏ —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂—É –¥–ª—è –≤–∞—Å 8-12 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞!\n\n"
        "üí° –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∂–∞–Ω—Ä–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
        "‚Ä¢ üé≤ **–ö–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–µ–∫–∏!**\n\n"
        "üîÑ **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∂–∞–Ω—Ä –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤!**",
        parse_mode="Markdown",
        reply_markup=kb
    )







@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ inline-–º–µ–Ω—é"""
    user_id = str(callback.from_user.id)
    
    logging.info(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await callback.message.answer(
            "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "üéµ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_main_menu: {e}")
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer("üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.callback_query(F.data == "search_artist_again")
async def search_artist_again_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
    if not is_premium_user(user_id, username):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë§ **–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é**\n\n"
        "üéµ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã, —á—å—é –º—É–∑—ã–∫—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ Eminem\n"
        "‚Ä¢ Queen\n"
        "‚Ä¢ The Beatles\n"
        "‚Ä¢ Drake\n"
        "‚Ä¢ Coldplay\n\n"
        "üîç –Ø –Ω–∞–π–¥—É –∏ –∑–∞–≥—Ä—É–∂—É –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
        ])
    )
    await state.set_state(SearchStates.waiting_for_artist)

@dp.callback_query(F.data.startswith("search_artist_retry:"))
async def search_artist_retry_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    artist_name = callback.data.split(":", 1)[1]
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
    if not is_premium_user(user_id, username):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return
    
    logging.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{artist_name}'")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    search_msg = await callback.message.edit_text(
        f"üîÑ **–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
        "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ YouTube...\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        parse_mode="Markdown"
    )
    
    try:
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        results = await asyncio.to_thread(search_artist_tracks, artist_name, 12)
        
        if not results:
            await search_msg.edit_text(
                f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                f"üö´ –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é '{artist_name}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ YouTube\n"
                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É\n\n"
                "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è\n"
                "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await search_msg.edit_text(
            f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
            "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
            "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        downloaded_tracks = []
        failed_tracks = []
        
        for i, track in enumerate(results, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await search_msg.edit_text(
                        f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ {i}/{len(results)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                        f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
                        "üíæ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...",
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
                url = f"https://www.youtube.com/watch?v={track['id']}"
                
                try:
                    download_task = asyncio.create_task(
                        download_track_from_url_for_genre(user_id, url)
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue
                
                if filename:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        downloaded_tracks.append({
                            'filename': filename,
                            'title': track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'duration': track.get('duration', 0),
                            'size_mb': file_size_mb
                        })
                    except Exception as size_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {size_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞)")
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                    try:
                        await callback.message.answer_audio(
                            types.FSInputFile(filename),
                            title=track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            performer=artist_name,
                            duration=track.get('duration', 0)
                        )
                        logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {audio_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        try:
                            await callback.message.answer_document(
                                types.FSInputFile(filename),
                                caption=f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist_name}"
                            )
                            logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        except Exception as doc_error:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {doc_error}")
                            failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            continue
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                else:
                    failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {e}")
                failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_count = len(downloaded_tracks)
        failed_count = len(failed_tracks)
        
        message_text = f"‚úÖ **–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        message_text += f"üéµ **–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {success_count} —Ç—Ä–µ–∫–æ–≤\n"
        
        if success_count > 0:
            total_size = sum(track.get('size_mb', 0) for track in downloaded_tracks)
            message_text += f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.1f} MB\n\n"
        
        if failed_count > 0:
            message_text += f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:** {failed_count} —Ç—Ä–µ–∫–æ–≤\n\n"
            message_text += "üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å:\n"
            message_text += "‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ YouTube\n"
            message_text += "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            message_text += "‚Ä¢ –ó–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏\n"
            message_text += "‚Ä¢ –ü—Ä–µ–≤—ã—Å–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
        
        message_text += "üéµ –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        message_text += "üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n\n"
        message_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message_text += "‚Ä¢ –°–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å\n"
        message_text += "‚Ä¢ –ò—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        message_text += "‚Ä¢ üé≤ **–ù–∞–∂–∞—Ç—å '–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º' –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞!**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        keyboard_buttons = []
        
        if failed_count > 0:
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await search_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except Exception as send_error:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
        
        logging.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {artist_name}: {e}")
        
        try:
            await search_msg.edit_text(
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}.\n"
                f"üîç –û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")],
                    [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
        except Exception as final_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {final_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                    ])
                )
            except Exception as last_error:
                logging.error(f"‚ùå –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {last_error}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ç—Ä–µ–∫–æ–≤ —Å –ø–æ–º–µ—Ç–∫–æ–π ===
@dp.message(F.audio)
async def handle_forwarded_audio(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–º–µ—Ç–∫—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if message.forward_from:
        sender_name = message.forward_from.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–º–µ—Ç–∫—É
        caption = f"ÔøΩÔøΩ –û—Ç {sender_name}\n\n"
        if message.caption:
            caption += message.caption
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ —Å –ø–æ–º–µ—Ç–∫–æ–π
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            await message.answer_audio(
                audio=message.audio.file_id,
                caption=caption
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É MP3 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–≥–æ–≤
    asyncio.create_task(periodic_mp3_cleanup())
    logging.info("üßπ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ MP3 —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç")
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())