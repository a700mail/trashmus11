from flask import Flask, request, jsonify
import os
import logging
import asyncio
import threading
from simple_music_bot import bot, dp, main_worker

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞
bot_thread = None

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return """
    <html>
        <head>
            <title>üéµ –ü—Ä–æ—Å—Ç–æ–π –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ë–æ—Ç</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
                .container { max-width: 800px; margin: 0 auto; background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; backdrop-filter: blur(10px); }
                h1 { text-align: center; color: #fff; margin-bottom: 30px; }
                .status { background: rgba(0,0,0,0.2); padding: 20px; border-radius: 10px; margin: 20px 0; }
                .feature { background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 10px 0; }
                .emoji { font-size: 24px; margin-right: 10px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üéµ –ü—Ä–æ—Å—Ç–æ–π –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ë–æ—Ç</h1>
                
                <div class="status">
                    <h2>üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞</h2>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç</p>
                    <p><strong>–í–µ—Ä—Å–∏—è:</strong> 1.0 (–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è)</p>
                    <p><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> Render</p>
                </div>
                
                <div class="feature">
                    <h3><span class="emoji">üîç</span>–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏</h3>
                    <p>–ò—â–∏—Ç–µ —Ç—Ä–µ–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ YouTube</p>
                </div>
                
                <div class="feature">
                    <h3><span class="emoji">üå®Ô∏è</span>–ú–æ—è –º—É–∑—ã–∫–∞</h3>
                    <p>–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Ç—Ä–µ–∫–æ–≤</p>
                </div>
                
                <div class="feature">
                    <h3><span class="emoji">üé§</span>–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º</h3>
                    <p>–ù–∞—Ö–æ–¥–∏—Ç–µ —Ç—Ä–µ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</p>
                </div>
                
                <div class="status">
                    <h2>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
                    <p><strong>–§—Ä–µ–π–º–≤–æ—Ä–∫:</strong> aiogram 3.x</p>
                    <p><strong>–ó–∞–≥—Ä—É–∑–∫–∞:</strong> yt-dlp + FFmpeg</p>
                    <p><strong>–§–æ—Ä–º–∞—Ç:</strong> MP3 (192 kbps)</p>
                    <p><strong>–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞:</strong> ‚úÖ –í–∫–ª—é—á–µ–Ω–∞</p>
                </div>
            </div>
        </body>
    </html>
    """

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        return jsonify({
            "status": "healthy",
            "service": "Simple Music Bot",
            "version": "1.0",
            "platform": "Render"
        }), 200
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({
            "status": "unhealthy",
            "error": str(e)
        }), 500

@app.route('/bot_status')
def bot_status():
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    try:
        bot_info = {
            "bot_id": bot.id if bot else None,
            "bot_username": bot.username if bot else None,
            "dispatcher_ready": dp is not None,
            "thread_running": bot_thread and bot_thread.is_alive() if bot_thread else False
        }
        return jsonify(bot_info), 200
    except Exception as e:
        logger.error(f"Bot status check failed: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        update_data = request.get_json()
        
        if not update_data:
            logger.warning("Empty webhook data received")
            return "OK", 200
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        logger.info(f"Webhook received: {update_data.get('update_id', 'unknown')}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.run(process_webhook_update(update_data))
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "Error", 500

async def process_webhook_update(update_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
        await dp.feed_webhook_update(bot, update_data)
        logger.info(f"Webhook update processed: {update_data.get('update_id', 'unknown')}")
    except Exception as e:
        logger.error(f"Error processing webhook update: {e}")

def start_bot_in_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_thread
    
    def run_bot():
        try:
            logger.info("Starting bot in worker thread...")
            asyncio.run(main_worker())
        except Exception as e:
            logger.error(f"Bot thread error: {e}")
    
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    logger.info("Bot thread started")

@app.before_first_request
def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    try:
        logger.info("Initializing bot...")
        start_bot_in_thread()
        logger.info("Bot initialization completed")
    except Exception as e:
        logger.error(f"Bot initialization failed: {e}")

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("BOT_TOKEN not set!")
        exit(1)
    
    logger.info("Starting Simple Music Bot web server...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    start_bot_in_thread()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.getenv('PORT', 8000))
    app.run(host='0.0.0.0', port=port, debug=False)
