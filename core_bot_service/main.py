import logging
import os
import asyncio
import json
import time
from typing import Optional, Dict, Any, List
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import httpx
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv("BOT_TOKEN")
MUSIC_SERVICE_URL = os.getenv("MUSIC_SERVICE_URL", "http://localhost:8001")
MUSIC_SERVICE_API_KEY = os.getenv("MUSIC_SERVICE_API_KEY", "default_key")
STORAGE_SERVICE_URL = os.getenv("STORAGE_SERVICE_URL", "http://localhost:8002")
STORAGE_SERVICE_API_KEY = os.getenv("STORAGE_SERVICE_API_KEY", "default_key")
MAX_FILE_SIZE_MB = int(os.getenv("MAX_FILE_SIZE_MB", "50"))

if not API_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è API
http_client = httpx.AsyncClient(timeout=30.0)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
search_results_cache = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class SearchStates(StatesGroup):
    waiting_for_search = State()
    waiting_for_artist = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Music Processing Service
class MusicServiceClient:
    def __init__(self, base_url: str, api_key: str):
        self.base_url = base_url
        self.api_key = api_key
        self.headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    
    async def search_music(self, query: str) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ API"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/search",
                    json={"query": query, "limit": 10},
                    headers=self.headers,
                    timeout=15.0
                )
                if response.status_code == 200:
                    return response.json().get("results", [])
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
                    return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Music Service: {e}")
            return None
    
    async def download_track(self, url: str, user_id: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ API"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/download",
                    json={"url": url, "user_id": user_id},
                    headers=self.headers,
                    timeout=120.0
                )
                if response.status_code == 200:
                    return response.json()
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                    return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None
    
    async def search_by_artist(self, artist: str, limit: int = 10) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —á–µ—Ä–µ–∑ API"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/search/artist",
                    json={"artist": artist, "limit": limit},
                    headers=self.headers,
                    timeout=30.0
                )
                if response.status_code == 200:
                    return response.json().get("results", [])
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {response.status_code}")
                    return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
            return None

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Data Storage Service
class StorageServiceClient:
    def __init__(self, base_url: str, api_key: str):
        self.base_url = base_url
        self.api_key = api_key
        self.headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    
    async def get_user_tracks(self, user_id: str) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/tracks/{user_id}",
                    headers=self.headers,
                    timeout=10.0
                )
                if response.status_code == 200:
                    return response.json().get("tracks", [])
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤: {response.status_code}")
                    return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–µ–∫–æ–≤: {e}")
            return None
    
    async def save_track(self, user_id: str, track_data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/tracks/{user_id}",
                    json=track_data,
                    headers=self.headers,
                    timeout=10.0
                )
                return response.status_code == 200
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
            return False
    
    async def get_search_cache(self, query: str) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–µ—à–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/cache/search",
                    params={"query": query},
                    headers=self.headers,
                    timeout=5.0
                )
                if response.status_code == 200:
                    return response.json().get("results", [])
                return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–∞: {e}")
            return None
    
    async def set_search_cache(self, query: str, results: List[Dict[str, Any]]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/cache/search",
                    json={"query": query, "results": results},
                    headers=self.headers,
                    timeout=5.0
                )
                return response.status_code == 200
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
music_client = MusicServiceClient(MUSIC_SERVICE_URL, MUSIC_SERVICE_API_KEY)
storage_client = StorageServiceClient(STORAGE_SERVICE_URL, STORAGE_SERVICE_API_KEY)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üêª‚Äç‚ùÑÔ∏è –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", callback_data="find_track"),
            InlineKeyboardButton(text="üå®Ô∏è –ú–æ—è –º—É–∑—ã–∫–∞", callback_data="my_music")
        ],
        [
            InlineKeyboardButton(text="üå®Ô∏è –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º", callback_data="by_artist")
        ]
    ]
)

back_button = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
)

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await message.answer_video(
            video=types.FSInputFile("../beer.mp4"),
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
        await message.answer("üêª –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏.", reply_markup=main_menu)

@dp.message(Command("play"))
async def play_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /play <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ø—Ä–∏–º–µ—Ä –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /play <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏>")
            return
        
        query = parts[1].strip()
        user_id = str(message.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        search_msg = await message.answer("üîç –ü–æ–∏—Å–∫...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_results = await storage_client.get_search_cache(query)
        if cached_results:
            await search_msg.delete()
            await send_search_results(message.chat.id, cached_results)
            return
        
        # –ò—â–µ–º –º—É–∑—ã–∫—É —á–µ—Ä–µ–∑ Music Service
        results = await music_client.search_music(query)
        if not results:
            await search_msg.delete()
            await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=main_menu)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        await storage_client.set_search_cache(query, results)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await search_msg.delete()
        await send_search_results(message.chat.id, results)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /play: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    try:
        await callback.message.edit_media(
            media=types.InputMediaVideo(media=types.FSInputFile("../beer.mp4")),
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.message.answer("üêª‚Äç‚ùÑÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.callback_query(F.data == "find_track")
async def ask_track_name(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    try:
        await callback.message.delete()
        await callback.message.answer_video(
            video=types.FSInputFile("../beer.mp4"),
            caption="üéµ–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            reply_markup=back_button
        )
        await state.set_state(SearchStates.waiting_for_search)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@dp.callback_query(F.data == "my_music")
async def show_my_music(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º—É–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é...")
    try:
        user_id = str(callback.from_user.id)
        tracks = await storage_client.get_user_tracks(user_id)
        
        if not tracks:
            await callback.message.answer("üéµ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.", reply_markup=back_button)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
        tracks_text = "üéµ **–í–∞—à–∞ –º—É–∑—ã–∫–∞:**\n\n"
        for i, track in enumerate(tracks[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            title = track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            duration = track.get('duration', 0)
            if duration:
                duration_str = f"{duration//60}:{duration%60:02d}"
            else:
                duration_str = "??:??"
            tracks_text += f"{i}. {title} ({duration_str})\n"
        
        if len(tracks) > 20:
            tracks_text += f"\n... –∏ –µ—â–µ {len(tracks) - 20} —Ç—Ä–µ–∫–æ–≤"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        keyboard = []
        for i, track in enumerate(tracks[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            title = track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:25]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            keyboard.append([InlineKeyboardButton(
                text=f"{i}. {title}",
                callback_data=f"redownload_{track.get('id', i)}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.answer(tracks_text, reply_markup=markup, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º—É–∑—ã–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@dp.callback_query(F.data == "by_artist")
async def by_artist_section(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    try:
        await callback.message.delete()
        msg = await callback.message.answer("üå®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        await state.set_state(SearchStates.waiting_for_artist)
        await state.update_data(prompt_message_id=msg.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(SearchStates.waiting_for_search, F.text)
async def search_music(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É"""
    query = message.text.strip()
    user_id = str(message.from_user.id)
    await state.clear()
    
    if not query:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏.", reply_markup=main_menu)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ URL
    if query.startswith(('http://', 'https://')):
        await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ Music Service
        result = await music_client.download_track(query, user_id)
        if result:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            track_data = {
                "title": result.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫"),
                "url": result.get("file_url", ""),
                "original_url": query,
                "duration": result.get("duration", 0),
                "uploader": result.get("uploader", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"),
                "size_mb": result.get("size_mb", 0)
            }
            
            if await storage_client.save_track(user_id, track_data):
                await message.answer("‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!", reply_markup=main_menu)
            else:
                await message.answer("‚ö†Ô∏è –¢—Ä–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é.", reply_markup=main_menu)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ.", reply_markup=main_menu)
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    search_msg = await message.answer("üîç –ü–æ–∏—Å–∫...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    cached_results = await storage_client.get_search_cache(query)
    if cached_results:
        await search_msg.delete()
        await send_search_results(message.chat.id, cached_results)
        return
    
    # –ò—â–µ–º —á–µ—Ä–µ–∑ Music Service
    results = await music_client.search_music(query)
    if not results:
        await search_msg.delete()
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=main_menu)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    await storage_client.set_search_cache(query, results)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await search_msg.delete()
    await send_search_results(message.chat.id, results)

@dp.message(SearchStates.waiting_for_artist, F.text)
async def search_by_artist(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    artist = message.text.strip()
    user_id = str(message.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    try:
        state_data = await state.get_data()
        prompt_message_id = state_data.get('prompt_message_id')
        if prompt_message_id:
            await message.bot.delete_message(message.chat.id, prompt_message_id)
    except:
        pass
    
    await state.clear()
    
    if not artist:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", reply_markup=main_menu)
        return
    
    search_msg = await message.answer(f"üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'...")
    
    # –ò—â–µ–º —á–µ—Ä–µ–∑ Music Service
    results = await music_client.search_by_artist(artist, 10)
    if not results:
        await search_msg.delete()
        await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'.", reply_markup=main_menu)
        return
    
    await search_msg.delete()
    await message.answer(f"‚ùÑÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'. –°–∫–∞—á–∏–≤–∞—é...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏
    downloaded_count = 0
    for track in results:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫
            result = await music_client.download_track(track.get('url', ''), user_id)
            if result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                track_data = {
                    "title": track.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    "url": result.get("file_url", ""),
                    "original_url": track.get("url", ""),
                    "duration": track.get("duration", 0),
                    "uploader": artist,
                    "size_mb": result.get("size_mb", 0)
                }
                
                if await storage_client.save_track(user_id, track_data):
                    downloaded_count += 1
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await message.answer_audio(
                            types.FSInputFile(result.get("file_path", "")),
                            title=track.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                            performer=artist,
                            duration=track.get("duration", 0)
                        )
                    except Exception as audio_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {audio_error}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        await message.answer_document(
                            types.FSInputFile(result.get("file_path", "")),
                            caption=f"üéµ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {artist}"
                        )
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '')}: {e}")
            continue
    
    await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {downloaded_count} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'!", reply_markup=main_menu)

async def send_search_results(chat_id: int, results: List[Dict[str, Any]]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    try:
        if not results:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–µ—à –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        search_results_cache[chat_id] = results
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = []
        for i, result in enumerate(results[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            keyboard.append([InlineKeyboardButton(
                text=f"{i+1}. {title}",
                callback_data=f"download_{i}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ id
            )])
        
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await bot.send_message(
            chat_id,
            f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
            reply_markup=markup
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
@dp.callback_query(F.data.startswith("download_"))
async def download_selected_track(callback: types.CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞"""
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞ –∏–∑ callback_data
        track_index = int(callback.data.split("_")[1])
        user_id = str(callback.from_user.id)
        chat_id = callback.message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –∫–µ—à–∞
        if chat_id not in search_results_cache:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return
        
        results = search_results_cache[chat_id]
        if track_index >= len(results):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ
        selected_track = results[track_index]
        track_url = selected_track.get('url', '')
        
        if not track_url:
            await callback.answer("‚ùå URL —Ç—Ä–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await callback.message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ Music Service
        download_result = await music_client.download_track(track_url, user_id)
        
        if not download_result:
            await loading_msg.delete()
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –≤ Data Storage Service
        track_data = {
            "title": selected_track.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "url": download_result.get("file_url", ""),
            "original_url": track_url,
            "duration": selected_track.get("duration", 0),
            "uploader": selected_track.get("uploader", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "size_mb": download_result.get("size_mb", 0)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if await storage_client.save_track(user_id, track_data):
            await loading_msg.delete()
            await callback.message.answer(
                f"‚úÖ –¢—Ä–µ–∫ '{selected_track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}' –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!",
                reply_markup=main_menu
            )
        else:
            await loading_msg.delete()
            await callback.message.answer(
                f"‚úÖ –¢—Ä–µ–∫ '{selected_track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}' –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
                reply_markup=main_menu
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            file_path = download_result.get("file_path", "")
            if file_path and os.path.exists(file_path):
                await callback.message.answer_audio(
                    types.FSInputFile(file_path),
                    title=selected_track.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    performer=selected_track.get("uploader", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                    duration=selected_track.get("duration", 0)
                )
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                await callback.message.answer(
                    f"üìÅ –§–∞–π–ª: {download_result.get('file_url', '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}"
                )
        except Exception as audio_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {audio_error}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É
            await callback.message.answer(
                f"üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {download_result.get('file_url', '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}"
            )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –∏–∑ "–ú–æ–µ–π –º—É–∑—ã–∫–∏"
@dp.callback_query(F.data.startswith("redownload_"))
async def redownload_track_from_my_music(callback: types.CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–µ–∫–∞ –∏–∑ callback_data
        track_id = callback.data.split("_")[1]
        user_id = str(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –∏–∑ Data Storage Service
        tracks = await storage_client.get_user_tracks(user_id)
        if not tracks:
            await callback.answer("‚ùå –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return
        
        # –ò—â–µ–º —Ç—Ä–µ–∫ –ø–æ ID (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω ID)
        try:
            track_index = int(track_id) - 1
            if track_index < 0 or track_index >= len(tracks):
                await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
            selected_track = tracks[track_index]
        except ValueError:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–µ–∫–∞.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        original_url = selected_track.get('original_url', '')
        if not original_url:
            await callback.answer("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await callback.message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ Music Service
        download_result = await music_client.download_track(original_url, user_id)
        
        if not download_result:
            await loading_msg.delete()
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            file_path = download_result.get("file_path", "")
            if file_path and os.path.exists(file_path):
                await callback.message.answer_audio(
                    types.FSInputFile(file_path),
                    title=selected_track.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    performer=selected_track.get("uploader", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                    duration=selected_track.get("duration", 0)
                )
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                await callback.message.answer(
                    f"üìÅ –§–∞–π–ª: {download_result.get('file_url', '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}"
                )
        except Exception as audio_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {audio_error}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É
            await callback.message.answer(
                f"üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {download_result.get('file_url', '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}"
            )
        
        await loading_msg.delete()
        await callback.message.answer(
            f"‚úÖ –¢—Ä–µ–∫ '{selected_track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}' –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=main_menu
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ Core Bot Service...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Music Service
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{MUSIC_SERVICE_URL}/health", timeout=5.0)
                if response.status_code == 200:
                    logging.info("‚úÖ Music Processing Service –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    logging.warning("‚ö†Ô∏è Music Processing Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Music Processing Service: {e}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Storage Service
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{STORAGE_SERVICE_URL}/health", timeout=5.0)
                if response.status_code == 200:
                    logging.info("‚úÖ Data Storage Service –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    logging.warning("‚ö†Ô∏è Data Storage Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Data Storage Service: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await http_client.aclose()

if __name__ == "__main__":
    asyncio.run(main())
