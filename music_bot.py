import logging
import os
import asyncio
import json
import time
import random
import secrets
import yt_dlp
import browser_cookie3
from http.cookiejar import MozillaCookieJar
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è YooMoney –æ—Ç–∫–ª—é—á–µ–Ω
# try:
#     from yoomoney_payment import create_simple_payment_url, verify_payment_by_label
#     YOOMONEY_AVAILABLE = True
# except ImportError:
#     YOOMONEY_AVAILABLE = False
#     logging.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å YooMoney –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ YooMoney –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

YOOMONEY_AVAILABLE = False
logging.info("‚úÖ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")

import re
from functools import partial
import aiohttp
from datetime import datetime, timedelta
from collections import deque
from asyncio import PriorityQueue
from concurrent.futures import ThreadPoolExecutor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
    logging.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
except ImportError:
    logging.warning("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: {e}")

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

MAX_FILE_SIZE_MB = 50
CACHE_DIR = "cache"
COOKIES_FILE = os.path.join(os.path.dirname(__file__), "cookies.txt")
TRACKS_FILE = os.path.join(os.path.dirname(__file__), "tracks.json")
SEARCH_CACHE_FILE = os.path.join(os.path.dirname(__file__), "search_cache.json")

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ===
# –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
PAYMENT_PROVIDER_TOKEN = None
PAYMENT_AMOUNT = 0
PAYMENT_CURRENCY = "USD"
PAYMENT_TITLE = "–ü–ª–∞—Ç–µ–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
PAYMENT_DESCRIPTION = "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è"

# === –ù–ê–°–¢–†–û–ô–ö–ò YOOMONEY ===
# YooMoney –æ—Ç–∫–ª—é—á–µ–Ω
YOOMONEY_CLIENT_ID = None
YOOMONEY_CLIENT_SECRET = None
YOOMONEY_REDIRECT_URI = None
YOOMONEY_ACCOUNT = None
YOOMONEY_PAYMENT_AMOUNT = 0.0
YOOMONEY_ENABLED = False

# === –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ü–õ–ê–¢–´ ===
# –ü–ª–∞—Ç–µ–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
CARD_NUMBER = None
TON_WALLET = None
PAYMENT_AMOUNT_USD = "0.00"
PAYMENT_AMOUNT_USDT = "0.00"
TON_API_KEY = None

# === –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–ò ===
AUTO_CLEANUP_ENABLED = True  # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
AUTO_CLEANUP_DELAY = 1.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
CLEANUP_LOGGING = True  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—Å—Ç–∫–∏

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ï–ú–ò–£–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===
PREMIUM_NOTIFICATION_INTERVAL = 604800  # 7 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–º–∏—É–º–µ)
PREMIUM_GRACE_PERIOD = 259200  # 3 –¥–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–≥—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–º–∏—É–º–∞)
PREMIUM_EXPIRY_WARNING = 86400  # 1 –¥–µ–Ω—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏)

ARTIST_FACTS_FILE = os.path.join(os.path.dirname(__file__), "artist_facts.json")
PREMIUM_USERS_FILE = os.path.join(os.path.dirname(__file__), "premium_users.json")
SEARCH_CACHE_TTL = 600
PAGE_SIZE = 10  # –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ô –û–ß–ï–†–ï–î–ò ===
PREMIUM_QUEUE = PriorityQueue()  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
REGULAR_QUEUE = deque()  # –û–±—ã—á–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# === –ù–ê–°–¢–†–û–ô–ö–ò WEBHOOK ===
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
last_webhook_update = None
webhook_update_queue = asyncio.Queue()

# === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–• –ó–ê–ì–†–£–ó–û–ö ===
MAX_CONCURRENT_DOWNLOADS = 5  # –£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
MAX_CONCURRENT_DOWNLOADS_PER_USER = 2  # –ú–∞–∫—Å–∏–º—É–º 2 –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ACTIVE_DOWNLOADS = 0  # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
user_download_semaphores = {}  # –°–µ–º–∞—Ñ–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–™–ï–ö–¢–´ –î–õ–Ø –ó–ê–ì–†–£–ó–û–ö ===
yt_executor = ThreadPoolExecutor(max_workers=8, thread_name_prefix="yt_downloader")  # –£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
download_semaphore = asyncio.Semaphore(MAX_CONCURRENT_DOWNLOADS)

# === –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –§–û–ù–û–í–´–• –ó–ê–î–ê–ß ===
task_last_run = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏

# === –ù–ê–°–¢–†–û–ô–ö–ò SOUNDCLOUD ===
SOUNDCLOUD_SEARCH_LIMIT = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–∞ SoundCloud
SOUNDCLOUD_CACHE_PREFIX = "sc"  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫—ç—à–∞ SoundCloud

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
user_tracks = {}
user_recommendation_history = {}

# === –ù–ê–°–¢–†–û–ô–ö–ò –ê–ù–¢–ò–°–ü–ê–ú–ê ===
ANTISPAM_DELAY = 1.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —Å–µ–∫)
user_last_request = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
os.makedirs(CACHE_DIR, exist_ok=True)

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ó–ê–ì–†–£–ó–û–ö ===

def get_user_download_semaphore(user_id: str) -> asyncio.Semaphore:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_download_semaphores:
        user_download_semaphores[user_id] = asyncio.Semaphore(MAX_CONCURRENT_DOWNLOADS_PER_USER)
    return user_download_semaphores[user_id]

async def cleanup_user_semaphores():
    """–û—á–∏—â–∞–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ–º–∞—Ñ–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        try:
            await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            current_time = time.time()
            
            # –û—á–∏—â–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ–ª–µ–µ —á–∞—Å–∞
            users_to_remove = []
            for user_id, semaphore in user_download_semaphores.items():
                if hasattr(semaphore, '_last_used') and current_time - semaphore._last_used > 3600:
                    users_to_remove.append(user_id)
            
            for user_id in users_to_remove:
                del user_download_semaphores[user_id]
                
        except Exception as e:
            await asyncio.sleep(60)

# === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–ù–û–í–´–ú–ò –ó–ê–î–ê–ß–ê–ú–ò ===

async def run_periodic_task(task_name: str, coro_func, interval_sec: int, max_exec_time_sec: int = 300):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
    
    Args:
        task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        coro_func: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        interval_sec: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        max_exec_time_sec: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
    """
    global task_last_run
    
    while True:
        try:
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(interval_sec)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            start_time = time.time()
            logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {task_name}")
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                await asyncio.wait_for(coro_func(), timeout=max_exec_time_sec)
                
                # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                execution_time = time.time() - start_time
                task_last_run[task_name] = time.time()
                logging.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {execution_time:.2f} —Å–µ–∫")
                
            except asyncio.TimeoutError:
                # –ó–∞–¥–∞—á–∞ –∑–∞–≤–∏—Å–ª–∞
                logging.error(f"‚è∞ –ó–∞–¥–∞—á–∞ {task_name} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({max_exec_time_sec} —Å–µ–∫) –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")
                task_last_run[task_name] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∑–∞–≤–∏—Å–∞–Ω–∏—è
                
            except Exception as task_error:
                # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
                import traceback
                logging.error(f"‚ùå –ó–∞–¥–∞—á–∞ {task_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {task_error}")
                logging.error(f"üìã Traceback –¥–ª—è {task_name}:\n{traceback.format_exc()}")
                task_last_run[task_name] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
                
        except Exception as e:
            # –û—à–∏–±–∫–∞ –≤ —Å–∞–º–æ–π —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
            import traceback
            logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π {task_name}: {e}")
            logging.error(f"üìã Traceback –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è {task_name}:\n{traceback.format_exc()}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

async def log_task_status():
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —Ä–∞–∑ –≤ —á–∞—Å"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            
            current_time = time.time()
            logging.info("üìä === –°–¢–ê–¢–£–° –§–û–ù–û–í–´–• –ó–ê–î–ê–ß ===")
            
            if not task_last_run:
                logging.info("üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
            else:
                for task_name, last_run_time in task_last_run.items():
                    time_since_last_run = current_time - last_run_time
                    hours = int(time_since_last_run // 3600)
                    minutes = int((time_since_last_run % 3600) // 60)
                    
                    if time_since_last_run < 3600:
                        status = f"üü¢ {hours}—á {minutes}–º –Ω–∞–∑–∞–¥"
                    elif time_since_last_run < 7200:
                        status = f"üü° {hours}—á {minutes}–º –Ω–∞–∑–∞–¥"
                    else:
                        status = f"üî¥ {hours}—á {minutes}–º –Ω–∞–∑–∞–¥"
                    
                    logging.info(f"üìä {task_name}: {status}")
            
            logging.info("üìä === –ö–û–ù–ï–¶ –°–¢–ê–¢–£–°–ê ===")
            
        except Exception as e:
            import traceback
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ log_task_status: {e}")
            logging.error(f"üìã Traceback:\n{traceback.format_exc()}")
            await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

# === –û–ë–ï–†–¢–ö–ò –î–õ–Ø –§–û–ù–û–í–´–• –ó–ê–î–ê–ß ===

async def task_antispam_cleanup():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
    cleanup_old_antispam_records()

async def task_file_cleanup():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    await cleanup_orphaned_files(batch_size=200)

async def task_premium_monitoring():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–µ–º–∏—É–º–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–∞
    await check_premium_expiry()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await send_weekly_premium_reminders()

async def task_cleanup_tasks():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–¥–∞—á –æ—á–∏—Å—Ç–∫–∏"""
    await cleanup_orphaned_files(batch_size=200)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await check_premium_files_integrity()

# === –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê –§–û–ù–û–í–´–• –ó–ê–î–ê–ß (–ó–ê–ú–ï–ù–Ø–Æ–¢–°–Ø) ===

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∞–Ω—Ç–∏—Å–ø–∞–º–∞
async def start_antispam_cleanup():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            cleanup_old_antispam_records()
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –∞–Ω—Ç–∏—Å–ø–∞–º–∞: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤
async def start_file_cleanup():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            await cleanup_orphaned_files(batch_size=200)
        except Exception as e:
            if CLEANUP_LOGGING:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞)
def start_background_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        asyncio.create_task(run_periodic_task("–û—á–∏—Å—Ç–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞", task_antispam_cleanup, 3600))
        asyncio.create_task(run_periodic_task("–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤", task_file_cleanup, 3600))
        asyncio.create_task(run_periodic_task("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–º–∏—É–º–∞", task_premium_monitoring, 3600))
        asyncio.create_task(run_periodic_task("–ó–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏", task_cleanup_tasks, 3600))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
        asyncio.create_task(log_task_status())
        
        # –í –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        asyncio.create_task(process_download_queue())
        
        logging.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        logging.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        logging.info("üíæ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Ç—Ä–µ–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, MP3 —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
        import traceback
        logging.error(f"üìã Traceback:\n{traceback.format_exc()}")

# === JSON —Ñ—É–Ω–∫—Ü–∏–∏ ===
def load_json(path, default):
    if not path:
        logging.warning("‚ö†Ô∏è load_json: –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        return default
        
    if not os.path.exists(path):
        logging.info(f"üìÅ –§–∞–π–ª {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return default
        
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            if data is None:
                logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {path} —Å–æ–¥–µ—Ä–∂–∏—Ç None, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return default
            return data
    except json.JSONDecodeError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {path}: {e}")
        return default
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {e}")
        return default

def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (MM:SS –∏–ª–∏ HH:MM:SS)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ seconds —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –±–æ–ª—å—à–µ 0
        if not seconds or not isinstance(seconds, (int, float)) or seconds <= 0:
            return ""
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        seconds = int(float(seconds))
        
        # –í—ã—á–∏—Å–ª—è–µ–º —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        secs = seconds % 60
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if hours > 0:
            return f"{hours}:{minutes:02d}:{secs:02d}"
        else:
            return f"{minutes}:{secs:02d}"
            
    except (ValueError, TypeError, OverflowError):
        return ""

def check_antispam(user_id: str) -> tuple[bool, float]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ, –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è).
    """
    try:
        current_time = time.time()
        last_request_time = user_last_request.get(str(user_id), 0)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if current_time - last_request_time >= ANTISPAM_DELAY:
            user_last_request[str(user_id)] = current_time
            return True, 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        time_until_next = ANTISPAM_DELAY - (current_time - last_request_time)
        return False, time_until_next
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
        return True, 0.0

def cleanup_old_antispam_records():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
    try:
        current_time = time.time()
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        cutoff_time = current_time - 3600
        
        users_to_remove = []
        for user_id, last_time in user_last_request.items():
            if last_time < cutoff_time:
                users_to_remove.append(user_id)
        
        for user_id in users_to_remove:
            del user_last_request[user_id]
            
        if users_to_remove:
            logging.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(users_to_remove)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–Ω—Ç–∏—Å–ø–∞–º–∞")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞: {e}")

def is_admin(user_id: str, username: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ID –∏ username)
        admin_ids = ["123456789", "987654321"]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_usernames = ["wtfguys4"]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: user_id={user_id}, username={username}")
        logging.info(f"üîç –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ID: {admin_ids}")
        logging.info(f"üîç –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ username: {admin_usernames}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
        if user_id and str(user_id) in admin_ids:
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ –ø–æ ID")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
        if username and username in admin_usernames:
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ –ø–æ username")
            return True
            
        logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤")
        return False
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: {e}")
        return False

def save_json(path, data):
    if not path:
        logging.error("‚ùå save_json: –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        return False
        
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—É—Ç—å –Ω–µ –ø—É—Å—Ç–æ–π
        dir_path = os.path.dirname(path)
        if dir_path:
            os.makedirs(dir_path, exist_ok=True)
        
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {path}")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {e}")
        return False

def is_premium_user(user_id: str, username: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º"""
    try:
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞: user_id={user_id}, username={username}")
        logging.info(f"üîç –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º ID: {premium_data.get('premium_users', [])}")
        logging.info(f"üîç –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º username: {premium_data.get('premium_usernames', [])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
        if user_id and str(user_id) in premium_data.get("premium_users", []):
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–º–∏—É–º –ø–æ ID")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
        if username and username in premium_data.get("premium_usernames", []):
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–º–∏—É–º –ø–æ username")
            return True
            
        logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–º–∏—É–º")
        return False
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def get_subscription_info(user_id: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        premium_data = load_json(PREMIUM_USERS_FILE, {"subscriptions": {}})
        return premium_data.get("subscriptions", {}).get(str(user_id), {})
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        return {}

async def create_payment_invoice(user_id: int, chat_id: int) -> types.LabeledPrice:
    """–°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
    pass

async def create_yoomoney_payment(user_id: str, username: str = None) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ YooMoney –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    try:
        logging.info(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ YooMoney –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")
        
        if not YOOMONEY_AVAILABLE or not YOOMONEY_ENABLED:
            logging.error("‚ùå YooMoney –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return ""
        
        logging.info(f"‚úÖ YooMoney –¥–æ—Å—Ç—É–ø–µ–Ω: AVAILABLE={YOOMONEY_AVAILABLE}, ENABLED={YOOMONEY_ENABLED}")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_label = f"premium_{user_id}_{int(time.time())}"
        logging.info(f"üîë –°–æ–∑–¥–∞–Ω–∞ –º–µ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment_label}")
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        logging.info(f"üîó –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ URL: account={YOOMONEY_ACCOUNT}, amount={YOOMONEY_PAYMENT_AMOUNT}")
        payment_url = create_simple_payment_url(
            account=YOOMONEY_ACCOUNT,
            amount=YOOMONEY_PAYMENT_AMOUNT,
            comment=f"–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {username or user_id}",
            label=payment_label
        )
        
        if payment_url:
            logging.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂–Ω—ã–π URL —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {payment_url[:100]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            payment_data = {
                "user_id": user_id,
                "username": username,
                "label": payment_label,
                "amount": YOOMONEY_PAYMENT_AMOUNT,
                "created_at": datetime.now().isoformat(),
                "status": "pending"
            }
            
            logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
            payments = load_json("payment_requests.json", {"payments": []})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            if "payments" not in payments:
                # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ä–∞—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –ø–ª–∞—Ç–µ–∂–µ–π")
                payments = {"payments": []}
            
            payments["payments"].append(payment_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—É—Ç–∏
            file_path = "payment_requests.json"
            if save_json(file_path, payments):
                logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
            else:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ {file_path}")
            
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ YooMoney –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payment_label}")
            return payment_url
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ YooMoney –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return ""
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ YooMoney: {e}")
        logging.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        return ""

async def process_successful_payment(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É (–∑–∞–≥–ª—É—à–∫–∞)"""
    pass

def add_premium_user(user_id: str = None, username: str = None) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º"""
    try:
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ ID
        if user_id and str(user_id) not in premium_data.get("premium_users", []):
            premium_data.setdefault("premium_users", []).append(str(user_id))
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ username
        if username and username not in premium_data.get("premium_usernames", []):
            premium_data.setdefault("premium_usernames", []).append(username)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        if user_id:
            premium_data.setdefault("subscriptions", {})
            premium_data["subscriptions"][str(user_id)] = {
                "start_date": datetime.now().isoformat(),
                "expiry_date": (datetime.now() + timedelta(days=30)).isoformat(),
                "active": True,
                "payment_method": "ton_payment"
            }
        
        save_json(PREMIUM_USERS_FILE, premium_data)
        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def remove_premium_user(user_id: str = None, username: str = None) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–º–∏—É–º"""
    try:
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        
        # –£–¥–∞–ª—è–µ–º –ø–æ ID
        if user_id and str(user_id) in premium_data.get("premium_users", []):
            premium_data["premium_users"].remove(str(user_id))
            
        # –£–¥–∞–ª—è–µ–º –ø–æ username
        if username and username in premium_data.get("premium_usernames", []):
            premium_data["premium_usernames"].remove(username)
            
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        if user_id and "subscriptions" in premium_data:
            premium_data["subscriptions"].pop(str(user_id), None)
        
        save_json(PREMIUM_USERS_FILE, premium_data)
        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–µ–º–∏—É–º")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

async def check_ton_payment(user_id: str, amount: float = 0.60423) -> bool:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TON –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not user_id or not isinstance(user_id, str):
            logging.error("‚ùå check_ton_payment: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
            return False
            
        if not TON_WALLET or not TON_API_KEY:
            logging.error("‚ùå check_ton_payment: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TON")
            return False

        async with aiohttp.ClientSession() as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TON API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            url = f"https://toncenter.com/api/v2/getTransactions"
            params = {
                "address": TON_WALLET,
                "limit": 10,
                "api_key": TON_API_KEY
            }
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("ok"):
                        transactions = data.get("result", [])
                        
                        if not transactions:
                            logging.info("üìä TON API: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            return False
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                        current_time = int(time.time())
                        day_ago = current_time - 86400
                        
                        for tx in transactions:
                            if not tx or not isinstance(tx, dict):
                                continue
                                
                            tx_time = tx.get("utime", 0)
                            if tx_time < day_ago:
                                continue
                                
                            try:
                                tx_amount = float(tx.get("value", 0)) / 1e9  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–∞–Ω–æ–¢–û–ù
                            except (ValueError, TypeError):
                                logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx.get('value')}")
                                continue
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–∞ 1 USDT (0.302115 TON)
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω ¬±10% –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π –∫—É—Ä—Å–∞
                            if 0.27 <= tx_amount <= 0.33:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
                                comment = tx.get("comment", "")
                                if str(user_id) in comment or not comment:
                                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π TON –ø–ª–∞—Ç–µ–∂: {tx_amount} TON –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                                    return True
                        
                        logging.info(f"üìä TON API: –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        return False
                    else:
                        logging.error(f"‚ùå TON API error: {data.get('error')}")
                        return False
                else:
                    logging.error(f"‚ùå TON API HTTP error: {response.status}")
                    return False
                    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

async def check_yoomoney_payment(user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ YooMoney"""
    try:
        if not YOOMONEY_AVAILABLE or not YOOMONEY_ENABLED:
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        payments = load_json("payment_requests.json", {"payments": []})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
        if "payments" not in payments:
            # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ä–∞—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            payments = {"payments": []}
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_payments = [p for p in payments["payments"] 
                        if p["user_id"] == user_id and p["status"] == "pending"]
        
        if not user_payments:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂
        for payment in user_payments:
            label = payment["label"]
            expected_amount = payment["amount"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if verify_payment_by_label(label, expected_amount):
                # –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
                payment["status"] = "completed"
                payment["completed_at"] = datetime.now().isoformat()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                file_path = "payment_requests.json"
                if save_json(file_path, payments):
                    logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
                else:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ {file_path}")
                
                logging.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ YooMoney –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {label}")
                return True
        
        return False
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ YooMoney: {e}")
        return False
        


def generate_payment_code(user_id: str, username: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not user_id or not isinstance(user_id, str):
            logging.error("‚ùå generate_payment_code: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
            user_id = "unknown"
            
        if not username or not isinstance(username, str):
            logging.warning("‚ö†Ô∏è generate_payment_code: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username")
            username = "unknown"
        
        timestamp = str(int(time.time()))
        random_part = secrets.token_hex(4)
        payment_code = f"{user_id}_{timestamp}_{random_part}"
        
        logging.info(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_code}")
        return payment_code
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∫–æ–¥
        return f"fallback_{int(time.time())}_{secrets.token_hex(2)}"



user_tracks = load_json(TRACKS_FILE, {})
search_cache = load_json(SEARCH_CACHE_FILE, {})

# –ö—ç—à –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ (URL -> –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
track_metadata_cache = {}
TRACK_CACHE_MAX_SIZE = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤

# –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
REGULAR_QUEUE = deque()
PREMIUM_QUEUE = asyncio.PriorityQueue()

artist_facts = load_json(ARTIST_FACTS_FILE, {"facts": {}})



def save_tracks():
    global user_tracks
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            logging.warning("‚ö†Ô∏è save_tracks: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
            user_tracks = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
        if not isinstance(user_tracks, dict):
            logging.error(f"‚ùå save_tracks: user_tracks –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(user_tracks)}")
            return False
        
        save_json(TRACKS_FILE, user_tracks)
        logging.info("‚úÖ –¢—Ä–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤: {e}")
        return False

def cleanup_track_cache():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä"""
    global track_metadata_cache
    try:
        if len(track_metadata_cache) > TRACK_CACHE_MAX_SIZE:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–ø–µ—Ä–≤—ã–µ 20% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
            items_to_remove = int(TRACK_CACHE_MAX_SIZE * 0.2)
            keys_to_remove = list(track_metadata_cache.keys())[:items_to_remove]
            for key in keys_to_remove:
                del track_metadata_cache[key]
            logging.info(f"üßπ –ö—ç—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω: —É–¥–∞–ª–µ–Ω–æ {len(keys_to_remove)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è preload_track_metadata —É–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

async def add_to_download_queue_fast(user_id: str, url: str, is_premium: bool = False):
    """–ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not user_id or not url:
            logging.error("‚ùå add_to_download_queue_fast: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return False
            
        if not isinstance(user_id, str) or not isinstance(url, str):
            logging.error("‚ùå add_to_download_queue_fast: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task_info = {
            'user_id': user_id,
            'url': url,
            'is_premium': is_premium,
            'timestamp': time.time()
        }
        
        if is_premium:
            # –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–¥—É—Ç –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            await PREMIUM_QUEUE.put((0, task_info))  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 0 (–≤—ã—à–µ)
            logging.info(f"üíé –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–µ–º–∏—É–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–¥—É—Ç –≤ –æ–±—ã—á–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            REGULAR_QUEUE.append(task_info)
            logging.info(f"üì± –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–±—ã—á–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(process_download_queue_fast())
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        return False

async def process_download_queue_fast():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫ –≤ —Ñ–æ–Ω–µ"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –æ—á–µ—Ä–µ–¥—å
        if not PREMIUM_QUEUE.empty():
            try:
                priority, task_info = await PREMIUM_QUEUE.get()
                
                if not task_info or not isinstance(task_info, dict):
                    logging.error("‚ùå process_download_queue_fast: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–µ–º–∏—É–º –æ—á–µ—Ä–µ–¥–∏")
                    return
                    
                user_id = task_info.get('user_id')
                url = task_info.get('url')
                
                if not user_id or not url:
                    logging.error("‚ùå process_download_queue_fast: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    return
                    
                logging.info(f"üíé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–µ–º–∏—É–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
                asyncio.create_task(download_track_from_url(user_id, url))
                
            except Exception as premium_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–¥–∞—á–∏: {premium_error}")
                return
        
        # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        if REGULAR_QUEUE:
            try:
                task_info = REGULAR_QUEUE.popleft()
                
                if not task_info or not isinstance(task_info, dict):
                    logging.error("‚ùå process_download_queue_fast: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ –æ–±—ã—á–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏")
                    return
                    
                user_id = task_info.get('user_id')
                url = task_info.get('url')
                
                if not user_id or not url:
                    logging.error("‚ùå process_download_queue_fast: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    return
                    
                logging.info(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
                asyncio.create_task(download_track_from_url(user_id, url))
                
            except Exception as regular_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω–æ–π –∑–∞–¥–∞—á–∏: {regular_error}")
                return
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_download_queue_fast: {e}")





# === –≠–∫—Å–ø–æ—Ä—Ç cookies (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
def export_cookies():
    try:
        if not COOKIES_FILE:
            logging.error("‚ùå export_cookies: COOKIES_FILE –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Chrome
        try:
            cj = browser_cookie3.chrome(domain_name=".youtube.com")
            if not cj:
                logging.warning("‚ö†Ô∏è export_cookies: cookies Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        except Exception as chrome_error:
            logging.warning(f"‚ö†Ô∏è export_cookies: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Chrome: {chrome_error}")
            return False
        
        cj_mozilla = MozillaCookieJar()
        cookie_count = 0
        
        for cookie in cj:
            try:
                cj_mozilla.set_cookie(cookie)
                cookie_count += 1
            except Exception as cookie_error:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ cookie: {cookie_error}")
                continue
        
        if cookie_count == 0:
            logging.warning("‚ö†Ô∏è export_cookies: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ cookie")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(COOKIES_FILE), exist_ok=True)
        
        cj_mozilla.save(COOKIES_FILE, ignore_discard=True, ignore_expires=True)
        logging.info(f"‚úÖ Cookies —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {cookie_count} cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {COOKIES_FILE}")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ cookies: {e}")
        return False

# –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
try:
    export_cookies()
except Exception:
    pass

# –Ω–µ–±–æ–ª—å—à–æ–π diagnostic: –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ cookies.txt —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –∏–º–µ–Ω–∞
def check_cookies_file():
    try:
        if not COOKIES_FILE:
            logging.warning("‚ö†Ô∏è check_cookies_file: COOKIES_FILE –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return
            
        if not os.path.exists(COOKIES_FILE):
            logging.warning("üìÅ Cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", COOKIES_FILE)
            return
            
        if os.path.getsize(COOKIES_FILE) == 0:
            logging.warning("üìÅ Cookies —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: %s", COOKIES_FILE)
            return
            
        try:
            cj = MozillaCookieJar()
            cj.load(COOKIES_FILE, ignore_discard=True, ignore_expires=True)
            
            if not cj:
                logging.warning("‚ö†Ô∏è check_cookies_file: cookies –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return
                
            names = [c.name for c in cj if c.name]
            if not names:
                logging.warning("‚ö†Ô∏è check_cookies_file: –∏–º–µ–Ω–∞ cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            logging.info("üç™ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã (%d): %s", len(names), ", ".join(names[:10]) + ("..." if len(names) > 10 else ""))
            
        except Exception as e:
            logging.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies.txt: %s", e)
            
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_cookies_file: {e}")

check_cookies_file()

# === –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–ò MP3 ===
async def auto_cleanup_file(file_path: str, delay: float = None, is_collection_track: bool = False, user_id: str = None):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ MP3 —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        is_collection_track: True –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–∫ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï —É–¥–∞–ª—è–µ–º)
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
    """
    if not AUTO_CLEANUP_ENABLED:
        if CLEANUP_LOGGING:
            logging.info(f"üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_premium = False
    if user_id:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º–∞
            is_premium = is_premium_user(user_id)
        except:
            pass
    
    # –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ò–õ–ò —Ñ–∞–π–ª—ã –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_collection_track or is_premium:
        if CLEANUP_LOGGING:
            status = "–∫–æ–ª–ª–µ–∫—Ü–∏–∏" if is_collection_track else "–ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            logging.info(f"üßπ –§–∞–π–ª –∏–∑ {status} –ù–ï –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω: {file_path}")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not file_path or not isinstance(file_path, str):
            if CLEANUP_LOGGING:
                logging.warning(f"‚ö†Ô∏è auto_cleanup_file: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            if CLEANUP_LOGGING:
                logging.warning(f"‚ö†Ô∏è auto_cleanup_file: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cleanup_delay = delay if delay is not None else AUTO_CLEANUP_DELAY
        
        if CLEANUP_LOGGING:
            logging.info(f"üßπ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ {file_path} —á–µ—Ä–µ–∑ {cleanup_delay} —Å–µ–∫.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
        asyncio.create_task(delayed_file_cleanup(file_path, cleanup_delay))
        return True
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False

async def delayed_file_cleanup(file_path: str, delay: float):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.
    """
    try:
        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(delay)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(file_path):
            if CLEANUP_LOGGING:
                logging.info(f"üßπ –§–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω: {file_path}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        try:
            file_size = os.path.getsize(file_path)
            file_size_mb = file_size / (1024 * 1024)
        except Exception:
            file_size_mb = 0
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        os.remove(file_path)
        
        if CLEANUP_LOGGING:
            logging.info(f"üßπ –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω: {file_path} ({file_size_mb:.2f} MB)")
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

async def cleanup_orphaned_files(batch_size: int = 200):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—á–∏—â–∞–µ—Ç "–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ" —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ cache, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ.
    
    Args:
        batch_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
    """
    try:
        if not AUTO_CLEANUP_ENABLED:
            return
        
        cache_dir = CACHE_DIR
        if not os.path.exists(cache_dir):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ cache
        cache_files = set()
        for filename in os.listdir(cache_dir):
            if filename.endswith('.mp3'):
                cache_files.add(os.path.join(cache_dir, filename))
        
        if not cache_files:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        used_files = set()
        global user_tracks
        
        if user_tracks:
            for user_id, tracks in user_tracks.items():
                if tracks:
                    for track in tracks:
                        if isinstance(track, dict):
                            file_path = track.get('url', '').replace('file://', '')
                        else:
                            file_path = track
                        
                        if file_path and os.path.exists(file_path):
                            used_files.add(file_path)
        
        # –ù–∞—Ö–æ–¥–∏–º –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã
        orphaned_files = list(cache_files - used_files)
        
        if not orphaned_files:
            return
        
        if CLEANUP_LOGGING:
            logging.info(f"üßπ –ù–∞–π–¥–µ–Ω–æ {len(orphaned_files)} –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
        files_to_process = orphaned_files[:batch_size]
        remaining_files = len(orphaned_files) - batch_size
        
        if remaining_files > 0:
            if CLEANUP_LOGGING:
                logging.info(f"üßπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(files_to_process)} —Ñ–∞–π–ª–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø—Ä–æ—Ö–æ–¥, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_files}")
        
        cleaned_count = 0
        total_size_freed = 0
        
        for i, orphaned_file in enumerate(files_to_process):
            try:
                if os.path.exists(orphaned_file):
                    file_size = os.path.getsize(orphaned_file)
                    os.remove(orphaned_file)
                    cleaned_count += 1
                    total_size_freed += file_size
                    
                    if CLEANUP_LOGGING:
                        logging.info(f"üßπ –£–¥–∞–ª–µ–Ω –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π —Ñ–∞–π–ª: {orphaned_file}")
                        
            except Exception as e:
                if CLEANUP_LOGGING:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å–∏—Ä–æ—Ç–µ–≤—à–µ–≥–æ —Ñ–∞–π–ª–∞ {orphaned_file}: {e}")
            
            # –ö–∞–∂–¥—ã–µ 20 —Ñ–∞–π–ª–æ–≤ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è event loop
            if (i + 1) % 20 == 0:
                await asyncio.sleep(0)
                if CLEANUP_LOGGING:
                    logging.info(f"üßπ –û—á–∏—Å—Ç–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1} –∏–∑ {len(files_to_process)} —Ñ–∞–π–ª–æ–≤")
        
        if CLEANUP_LOGGING and cleaned_count > 0:
            total_size_mb = total_size_freed / (1024 * 1024)
            logging.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {cleaned_count} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {total_size_mb:.2f} MB")
            
            if remaining_files > 0:
                logging.info(f"üßπ –í —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –µ—â–µ {remaining_files} —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")

def is_file_in_collection(file_path: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —á–∞—Å—Ç—å—é –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        global user_tracks
        
        if not user_tracks:
            return False
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        normalized_path = os.path.normpath(file_path)
        
        for user_id, tracks in user_tracks.items():
            if tracks:
                for track in tracks:
                    if isinstance(track, dict):
                        track_path = track.get('url', '').replace('file://', '')
                    else:
                        track_path = track
                    
                    if track_path and os.path.normpath(track_path) == normalized_path:
                        return True
        
        return False
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {file_path}: {e}")
        return False

async def check_file_integrity(file_path: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å MP3 —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª —Ü–µ–ª—ã–π, False –µ—Å–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
    """
    try:
        if not os.path.exists(file_path):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å
        try:
            with open(file_path, 'rb') as f:
                # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –±–∞–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ MP3
                header = f.read(10)
                if len(header) < 10:
                    return False
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ MP3 —Ñ–∞–π–ª (ID3 –∏–ª–∏ MPEG header)
                if not (header.startswith(b'ID3') or header.startswith(b'\xff\xfb') or header.startswith(b'\xff\xf3')):
                    return False
                    
        except Exception:
            return False
        
        return True
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False

async def auto_repair_damaged_file(file_path: str, user_id: str, original_url: str = None):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
    
    Args:
        file_path: –ü—É—Ç—å –∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        original_url: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    """
    try:
        if not original_url:
            if CLEANUP_LOGGING:
                logging.warning(f"‚ö†Ô∏è –ù–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path}")
            return False
        
        if CLEANUP_LOGGING:
            logging.info(f"üîß –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
        except Exception as e:
            if CLEANUP_LOGGING:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
            is_premium = is_premium_user(user_id)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
            # from music_bot import download_track_from_url_with_priority
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            if CLEANUP_LOGGING:
                logging.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞: {file_path}")
            return False
            
            # –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
            return False
                
        except Exception as e:
            if CLEANUP_LOGGING:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
            
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False

async def start_premium_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–∞
            await check_premium_expiry()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await send_weekly_premium_reminders()
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø—Ä–µ–º–∏—É–º–∞: {e}")

async def check_premium_expiry():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    try:
        premium_data = load_json(PREMIUM_USERS_FILE, {"subscriptions": {}})
        subscriptions = premium_data.get("subscriptions", {})
        
        current_time = datetime.now()
        
        for user_id, sub_info in subscriptions.items():
            try:
                if not sub_info.get("active", False):
                    continue
                
                expiry_date_str = sub_info.get("expiry_date")
                if not expiry_date_str:
                    continue
                
                expiry_date = datetime.fromisoformat(expiry_date_str)
                time_until_expiry = (expiry_date - current_time).total_seconds()
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å
                if 0 < time_until_expiry <= PREMIUM_EXPIRY_WARNING:
                    await send_premium_expiry_warning(user_id, time_until_expiry)
                
                # –ü—Ä–µ–º–∏—É–º –∏—Å—Ç–µ–∫
                elif time_until_expiry <= 0:
                    await handle_premium_expiry(user_id)
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞: {e}")

async def send_premium_expiry_warning(user_id: str, time_until_expiry: float):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º–∞.
    """
    try:
        days_left = int(time_until_expiry / 86400)
        hours_left = int((time_until_expiry % 86400) / 3600)
        
        warning_message = (
            f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –í–∞—à –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫–∞–µ—Ç!**\n\n"
            f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** {days_left} –¥–Ω–µ–π, {hours_left} —á–∞—Å–æ–≤\n\n"
            f"üí° **–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è:**\n"
            f"‚Ä¢ –¢—Ä–µ–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –µ—â–µ 3 –¥–Ω—è\n"
            f"‚Ä¢ –ó–∞—Ç–µ–º –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã\n"
            f"‚Ä¢ –ü—Ä–∏–¥–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ —Å–∫–∞—á–∏–≤–∞—Ç—å –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É\n\n"
            f"üíé **–ü—Ä–æ–¥–ª–∏—Ç–µ –ø—Ä–µ–º–∏—É–º —Å–µ–π—á–∞—Å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é!**\n\n"
            f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 1 USDT\n"
            f"üîó **–ù–∞–∂–º–∏—Ç–µ:** /buy_premium"
        )
        
        try:
            await bot.send_message(user_id, warning_message, parse_mode="Markdown")
            logging.info(f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")

async def handle_premium_expiry(user_id: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–º–∏—É–º–µ
        premium_data = load_json(PREMIUM_USERS_FILE, {"subscriptions": {}})
        subscriptions = premium_data.get("subscriptions", {})
        
        if user_id in subscriptions:
            # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–µ–º–∏—É–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
            subscriptions[user_id]["active"] = False
            subscriptions[user_id]["expired_at"] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            save_json(PREMIUM_USERS_FILE, premium_data)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
            asyncio.create_task(schedule_premium_cleanup(user_id, PREMIUM_GRACE_PERIOD))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            expiry_message = (
                f"‚ùå **–í–∞—à –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫!**\n\n"
                f"üíæ **–í–∞—à–∏ —Ç—Ä–µ–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –µ—â–µ 3 –¥–Ω—è**\n"
                f"‚è∞ **–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã**\n\n"
                f"üí° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:**\n"
                f"‚Ä¢ –°–∫–∞—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Ç—Ä–µ–∫–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
                f"‚Ä¢ –ü—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n\n"
                f"üíé **–ü—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º:** /buy_premium"
            )
            
            try:
                await bot.send_message(user_id, expiry_message, parse_mode="Markdown")
                logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è {user_id}: {e}")

async def schedule_premium_cleanup(user_id: str, delay_seconds: int):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    """
    try:
        await asyncio.sleep(delay_seconds)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–º–∏—É–º–µ
        premium_data = load_json(PREMIUM_USERS_FILE, {"subscriptions": {}})
        subscriptions = premium_data.get("subscriptions", {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–¥–ª–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º
        if user_id in subscriptions and subscriptions[user_id].get("active", False):
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–¥–ª–∏–ª –ø—Ä–µ–º–∏—É–º, –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await cleanup_expired_premium_user(user_id)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def cleanup_expired_premium_user(user_id: str):
    """
    –û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞.
    """
    try:
        global user_tracks
        
        if not user_tracks or user_id not in user_tracks:
            return
        
        tracks = user_tracks[user_id]
        if not tracks:
            return
        
        deleted_count = 0
        total_size_freed = 0
        
        for track in tracks:
            try:
                if isinstance(track, dict):
                    file_path = track.get('url', '').replace('file://', '')
                else:
                    file_path = track
                
                if file_path and os.path.exists(file_path):
                    try:
                        file_size = os.path.getsize(file_path)
                        os.remove(file_path)
                        deleted_count += 1
                        total_size_freed += file_size
                        logging.info(f"üßπ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∏—Å—Ç–µ–∫—à–µ–≥–æ –ø—Ä–µ–º–∏—É–º–∞: {file_path}")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                        
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tracks[user_id] = []
        save_tracks()
        
        if deleted_count > 0:
            total_size_mb = total_size_freed / (1024 * 1024)
            logging.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –ø—Ä–µ–º–∏—É–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {total_size_mb:.2f} MB")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            final_message = (
                f"üóëÔ∏è **–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
                f"‚ùå **–í–∞—à–∏ —Ç—Ä–µ–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã**\n"
                f"üíæ **–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞:** {total_size_mb:.2f} MB\n\n"
                f"üí° **–ß—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é:**\n"
                f"‚Ä¢ –ö—É–ø–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –∑–∞–Ω–æ–≤–æ\n"
                f"‚Ä¢ –ó–∞–Ω–æ–≤–æ —Å–∫–∞—á–∞–π—Ç–µ –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏\n\n"
                f"üíé **–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º:** /buy_premium"
            )
            
            try:
                await bot.send_message(user_id, final_message, parse_mode="Markdown")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è {user_id}: {e}")

async def send_weekly_premium_reminders():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –ø—Ä–µ–º–∏—É–º–∞.
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        premium_users = set(premium_data.get("premium_users", []))
        premium_usernames = set(premium_data.get("premium_usernames", []))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        global user_tracks
        if not user_tracks:
            return
        
        current_time = time.time()
        
        for user_id in user_tracks.keys():
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if user_id in premium_users:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
                last_reminder_key = f"last_premium_reminder_{user_id}"
                last_reminder_time = user_last_request.get(last_reminder_key, 0)
                
                if current_time - last_reminder_time >= PREMIUM_NOTIFICATION_INTERVAL:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    reminder_message = (
                        f"üíé **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è—Ö**\n\n"
                        f"üéµ **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:** {len(user_tracks.get(user_id, []))} —Ç—Ä–µ–∫–æ–≤\n\n"
                        f"‚ö° **–° –ø—Ä–µ–º–∏—É–º–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**\n"
                        f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n"
                        f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n"
                        f"‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ 320 kbps\n"
                        f"‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º\n\n"
                        f"üí∞ **–í—Å–µ–≥–æ 1 USDT –≤ –º–µ—Å—è—Ü!**\n"
                        f"üîó **–ö—É–ø–∏—Ç—å:** /buy_premium"
                    )
                    
                    try:
                        await bot.send_message(user_id, reminder_message, parse_mode="Markdown")
                        user_last_request[last_reminder_key] = current_time
                        logging.info(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–º–∏—É–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(1)
                        
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def start_cleanup_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            await cleanup_orphaned_files(batch_size=200)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await check_premium_files_integrity()
            
        except Exception as e:
            if CLEANUP_LOGGING:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")

async def check_premium_files_integrity(batch_size: int = 200):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ.
    
    Args:
        batch_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
    """
    try:
        global user_tracks
        
        if not user_tracks:
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        premium_users = set(premium_data.get("premium_users", []))
        premium_usernames = set(premium_data.get("premium_usernames", []))
        
        damaged_files = []
        processed_tracks = 0
        
        for user_id, tracks in user_tracks.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º
            is_premium = (user_id in premium_users)
            
            if not is_premium:
                continue
            
            if tracks:
                for track in tracks:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤
                    if processed_tracks >= batch_size:
                        if CLEANUP_LOGGING:
                            logging.info(f"üîß –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({batch_size} —Ç—Ä–µ–∫–æ–≤), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ")
                        break
                    
                    if isinstance(track, dict):
                        file_path = track.get('url', '').replace('file://', '')
                        original_url = track.get('original_url', '')  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ
                    else:
                        file_path = track
                        original_url = ''  # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤ URL –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                    
                    if file_path and os.path.exists(file_path):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
                        if not await check_file_integrity(file_path):
                            damaged_files.append({
                                'file_path': file_path,
                                'user_id': user_id,
                                'original_url': original_url
                            })
                    
                    processed_tracks += 1
                    
                    # –ö–∞–∂–¥—ã–µ 20 —Ç—Ä–µ–∫–æ–≤ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è event loop
                    if processed_tracks % 20 == 0:
                        await asyncio.sleep(0)
                        if CLEANUP_LOGGING:
                            logging.info(f"üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_tracks} —Ç—Ä–µ–∫–æ–≤")
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞
                if processed_tracks >= batch_size:
                    break
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if damaged_files:
            if CLEANUP_LOGGING:
                logging.info(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(damaged_files)} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            for i, damaged_file in enumerate(damaged_files):
                if damaged_file['original_url']:
                    await auto_repair_damaged_file(
                        damaged_file['file_path'],
                        damaged_file['user_id'],
                        damaged_file['original_url']
                    )
                else:
                    if CLEANUP_LOGGING:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –±–µ–∑ URL: {damaged_file['file_path']}")
                
                # –ö–∞–∂–¥—ã–µ 10 —Ñ–∞–π–ª–æ–≤ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
                if (i + 1) % 10 == 0:
                    await asyncio.sleep(0)
                    if CLEANUP_LOGGING:
                        logging.info(f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1} –∏–∑ {len(damaged_files)} —Ñ–∞–π–ª–æ–≤")
        
        if CLEANUP_LOGGING:
            logging.info(f"üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_tracks} —Ç—Ä–µ–∫–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(damaged_files)} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# === –ö—ç—à –ø–æ–∏—Å–∫–∞ ===
def get_cached_search(query):
    try:
        if not query or not isinstance(query, str):
            logging.warning("‚ö†Ô∏è get_cached_search: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ search_cache –Ω–µ None
        if search_cache is None:
            logging.warning("‚ö†Ô∏è get_cached_search: search_cache –±—ã–ª None")
            return None
            
        query_l = query.lower()
        if query_l in search_cache:
            data = search_cache[query_l]
            if isinstance(data, dict) and "time" in data and "results" in data:
                if time.time() - data["time"] < SEARCH_CACHE_TTL:
                    return data["results"]
                else:
                    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
                    del search_cache[query_l]
                    logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            else:
                # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—ç—à–∞
                logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—ç—à–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
                del search_cache[query_l]
        return None
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_cached_search: {e}")
        return None

def set_cached_search(query, results):
    global search_cache
    try:
        if not query or not isinstance(query, str):
            logging.warning("‚ö†Ô∏è set_cached_search: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return False
            
        if not results or not isinstance(results, list):
            logging.warning("‚ö†Ô∏è set_cached_search: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ search_cache –Ω–µ None
        if search_cache is None:
            logging.warning("‚ö†Ô∏è set_cached_search: search_cache –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º")
            search_cache = {}
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 100)
        if len(search_cache) > 100:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            sorted_cache = sorted(search_cache.items(), key=lambda x: x[1].get("time", 0))
            items_to_remove = len(sorted_cache) - 80  # –û—Å—Ç–∞–≤–ª—è–µ–º 80 –∑–∞–ø–∏—Å–µ–π
            for i in range(items_to_remove):
                del search_cache[sorted_cache[i][0]]
            logging.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à –ø–æ–∏—Å–∫–∞, —É–¥–∞–ª–µ–Ω–æ {items_to_remove} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        search_cache[query.lower()] = {"time": time.time(), "results": results}
        save_json(SEARCH_CACHE_FILE, search_cache)
        logging.info(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_cached_search: {e}")
        return False

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è yt_dlp ===
def _ydl_download_blocking(url, outtmpl, cookiefile, is_premium=False):
    """–ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ yt-dlp"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not url or not isinstance(url, str):
            logging.error("‚ùå _ydl_download_blocking: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")
            return None
            
        if not outtmpl or not isinstance(outtmpl, str):
            logging.error("‚ùå _ydl_download_blocking: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞")
            return None
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': outtmpl,
            'postprocessors': [{'key': 'FFmpegExtractAudio', 'preferredcodec': 'mp3', 'preferredquality': '192'}],
            'quiet': True,
            'no_warnings': True,
            'ignoreerrors': True,
            'extract_flat': False,  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω—É–∂–Ω–æ False
            'timeout': 300,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 5 –º–∏–Ω—É—Ç
            'retries': 3,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        }
        
        # –ü—Ä–µ–º–∏—É–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ 320 kbps
        if is_premium:
            ydl_opts['postprocessors'] = [{'key': 'FFmpegExtractAudio', 'preferredcodec': 'mp3', 'preferredquality': '320'}]
            logging.info(f"üíé –ü—Ä–µ–º–∏—É–º –∑–∞–≥—Ä—É–∑–∫–∞: –∫–∞—á–µ—Å—Ç–≤–æ 320 kbps –¥–ª—è {url}")
        else:
            logging.info(f"üì± –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: –∫–∞—á–µ—Å—Ç–≤–æ 192 kbps –¥–ª—è {url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies —Ñ–∞–π–ª
        if cookiefile and os.path.exists(cookiefile):
            try:
                ydl_opts['cookiefile'] = cookiefile
                logging.info(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies —Ñ–∞–π–ª: {cookiefile}")
            except Exception as cookie_error:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å cookies —Ñ–∞–π–ª–æ–º: {cookie_error}")
        else:
            logging.info("üç™ Cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                info = ydl.extract_info(url, download=True)
                
                if not info:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {url}")
                    return None
                
                logging.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ: {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = ydl.prepare_filename(info)
                if not filename:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è: {url}")
                    return None
                
                logging.info(f"üîç –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ .mp3
                mp3_filename = os.path.splitext(filename)[0] + ".mp3"
                logging.info(f"üîç –û–∂–∏–¥–∞–µ–º—ã–π MP3 —Ñ–∞–π–ª: {mp3_filename}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
                if not os.path.exists(mp3_filename):
                    logging.error(f"‚ùå MP3 —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {mp3_filename}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–ª—Å—è —Ñ–∞–π–ª —Å –¥—Ä—É–≥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                    base_name = os.path.splitext(filename)[0]
                    possible_files = [f for f in os.listdir(os.path.dirname(mp3_filename)) if f.startswith(os.path.basename(base_name))]
                    if possible_files:
                        logging.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–∞–π–ª—ã: {possible_files}")
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        for possible_file in possible_files:
                            full_path = os.path.join(os.path.dirname(mp3_filename), possible_file)
                            if os.path.exists(full_path) and os.path.getsize(full_path) > 0:
                                logging.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª: {full_path}")
                                return full_path, info
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                try:
                    file_size = os.path.getsize(mp3_filename)
                    if file_size == 0:
                        logging.error(f"‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: {mp3_filename}")
                        return None
                    quality_text = "320 kbps" if is_premium else "192 kbps"
                    logging.info(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {mp3_filename} ({file_size} –±–∞–π—Ç, {quality_text})")
                except Exception as size_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {size_error}")
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏–æ
                try:
                    with open(mp3_filename, 'rb') as f:
                        header = f.read(10)
                        if not (header.startswith(b'ID3') or header.startswith(b'\xff\xfb') or header.startswith(b'\xff\xf3')):
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å MP3: {mp3_filename}")
                except Exception as header_error:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞: {header_error}")
                
                logging.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ({mp3_filename}, {type(info)})")
                return mp3_filename, info
                
            except Exception as extract_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {extract_error}")
                return None
                
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _ydl_download_blocking: {e}")
        return None

async def download_track_from_url(user_id, url):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –≤ tracks.json, –ù–ï –∑–∞–≥—Ä—É–∂–∞—è MP3 —Ñ–∞–π–ª.
    """
    global user_tracks, track_metadata_cache
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not user_id or not url:
            logging.error("‚ùå download_track_from_url: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            logging.warning("‚ö†Ô∏è download_track_from_url: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º")
            user_tracks = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if url in track_metadata_cache:
            logging.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {url}")
            cached_info = track_metadata_cache[url]
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if str(user_id) not in user_tracks:
                user_tracks[str(user_id)] = []
            elif user_tracks[str(user_id)] is None:
                user_tracks[str(user_id)] = []
                
            user_tracks[str(user_id)].append(cached_info)
            save_tracks()
            
            logging.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –∏–∑ –∫—ç—à–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {cached_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')}")
            return True
        else:
            logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {url}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        try:
            ydl_opts = {
                'format': 'bestaudio/best',
                'quiet': True,
                'no_warnings': True,
                'ignoreerrors': True,
                'extract_flat': True,  # –¢–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                'timeout': 10,  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                'retries': 1,   # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                'nocheckcertificate': True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies —Ñ–∞–π–ª
            if os.path.exists(COOKIES_FILE):
                ydl_opts['cookiefile'] = COOKIES_FILE
                logging.info(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies —Ñ–∞–π–ª: {COOKIES_FILE}")
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                
                if not info:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ: {url}")
                    return None
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                duration = info.get('duration', 0)
                uploader = info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ —Ñ–∞–π–ª–∞)
                track_info = {
                    "title": title,
                    "url": "",  # –ü—É—Å—Ç–æ–π URL - —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                    "original_url": url,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    "duration": duration,
                    "uploader": uploader,
                    "size_mb": 0,  # –†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –¥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    "needs_migration": False,
                    "downloaded": False  # –§–ª–∞–≥, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                track_metadata_cache[url] = track_info
                logging.info(f"üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è {url}")
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                cleanup_track_cache()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if str(user_id) not in user_tracks:
                    user_tracks[str(user_id)] = []
                elif user_tracks[str(user_id)] is None:
                    user_tracks[str(user_id)] = []
                    
                user_tracks[str(user_id)].append(track_info)
                save_tracks()
                
                logging.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {title}")
                return True
                
        except Exception as info_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ: {info_error}")
            return None
        
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞ {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def download_track_from_url_for_genre(user_id, url):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –¥–ª—è –∂–∞–Ω—Ä–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ user_tracks.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not user_id or not url:
            logging.error("‚ùå download_track_from_url_for_genre: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
        if not url or 'youtube.com' not in url:
            logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {url}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        try:
            ydl_opts = {
                'format': 'bestaudio/best',
                'quiet': True,
                'no_warnings': True,
                'ignoreerrors': True,
                'extract_flat': True,  # –¢–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                'timeout': 30,
                'retries': 3,
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                if not info:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ: {url}")
                    return None
                title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
        except Exception as info_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ: {info_error}")
            title = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        temp_file_path = await download_track_to_temp(user_id, url, title)
        
        if temp_file_path:
            logging.info(f"‚úÖ –¢—Ä–µ–∫ –ø–æ –∂–∞–Ω—Ä—É —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_file_path}")
            return temp_file_path
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ –ø–æ –∂–∞–Ω—Ä—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {title}")
            return None
        
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –ø–æ –∂–∞–Ω—Ä—É {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class SearchStates(StatesGroup):
    waiting_for_search = State()
    waiting_for_artist = State()
    waiting_for_artist_search = State()



# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üêª‚Äç‚ùÑÔ∏è –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", callback_data="find_track"),
                    InlineKeyboardButton(text="üå®Ô∏è –ú–æ—è –º—É–∑—ã–∫–∞", callback_data="my_music")
                ],
                [
                    InlineKeyboardButton(text="üå®Ô∏è –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º", callback_data="by_artist")
                ]
            ]
        )

# === –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º ===
artist_search_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üêª‚Äç‚ùÑÔ∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", callback_data="search_by_artist")
        ],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
)







back_button = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
)

# === Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—é
        await callback.message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            reply_markup=main_menu
        )
    except Exception as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            await callback.message.answer_photo(
                photo=types.FSInputFile("bear.png"),
                reply_markup=main_menu
            )
        except Exception as photo_error:
            await callback.message.answer("üêª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—é
    try:
        await message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            reply_markup=main_menu
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("üêª –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å YouTube.", reply_markup=main_menu)

@dp.callback_query(F.data == "by_artist")
async def by_artist_section(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await state.set_state(SearchStates.waiting_for_artist_search)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        msg = await callback.message.answer("üå®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        await state.update_data(prompt_message_id=msg.message_id)
        
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@dp.callback_query(F.data == "premium_features")
async def show_artist_search_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    await state.set_state(SearchStates.waiting_for_artist)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –æ –ø–æ–∏—Å–∫–µ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    try:
        await callback.message.answer_photo(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="üêª‚Äç‚ùÑÔ∏è **–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º**\n\n"
                        "üéµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã, —á—å–∏ —Ç—Ä–µ–∫–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n\n"
                        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
                        "‚Ä¢ Drake\n"
                        "‚Ä¢ The Weeknd\n"
                        "‚Ä¢ Eminem\n"
                        "‚Ä¢ Coldplay\n"
                        "‚Ä¢ Metallica\n\n"
                        "üîç –Ø –Ω–∞–π–¥—É –∏ –∑–∞–≥—Ä—É–∂—É –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!\n\n"
                        "‚¨Ö –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª"
            ),
            reply_markup=back_button
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text(
            "üêª‚Äç‚ùÑÔ∏è **–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º**\n\n"
            "üéµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã, —á—å–∏ —Ç—Ä–µ–∫–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ Drake\n"
            "‚Ä¢ The Weeknd\n"
            "‚Ä¢ Eminem\n"
            "‚Ä¢ Coldplay\n"
            "‚Ä¢ Metallica\n\n"
            "üîç –Ø –Ω–∞–π–¥—É –∏ –∑–∞–≥—Ä—É–∂—É –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!\n\n"
            "‚¨Ö –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª",
            parse_mode="Markdown",
            reply_markup=back_button
        )



@dp.callback_query(F.data == "buy_premium")
async def show_buy_premium_info(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png")
            ),
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.message.answer("üêª‚Äç‚ùÑÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.callback_query(F.data == "pay_yoomoney")
async def pay_premium_yoomoney(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png")
            ),
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.message.answer("üêª‚Äç‚ùÑÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.callback_query(F.data == "pay_premium")
async def pay_premium_direct(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png")
            ),
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.message.answer("üêª‚Äç‚ùÑÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)



# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
# @dp.message(F.text == "üíé –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ TON –∫–æ—à–µ–ª–µ–∫")
# async def pay_with_ton_wallet(message: types.Message):
#     pass

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
# @dp.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π")
# async def pay_with_card(message: types.Message):
#     pass

# –£–¥–∞–ª—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è callback

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
# @dp.message(F.text == "‚úÖ –Ø —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª")
# async def confirm_payment(message: types.Message):
#     pass

@dp.callback_query(F.data == "back_to_premium")
async def back_to_premium_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png")
            ),
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.message.answer("üêª‚Äç‚ùÑÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è callback —Ñ—É–Ω–∫—Ü–∏—è - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
# @dp.callback_query(F.data == "confirm_payment")
# async def confirm_payment_callback(callback: types.CallbackQuery):
#     """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
#     # ... –∫–æ–¥ —É–¥–∞–ª–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è callback —Ñ—É–Ω–∫—Ü–∏—è - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
# @dp.callback_query(F.data == "pay_ton")
# async def pay_with_ton_callback(callback: types.CallbackQuery):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ TON"""
#     # ... –∫–æ–¥ —É–¥–∞–ª–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è callback —Ñ—É–Ω–∫—Ü–∏—è - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
# @dp.callback_query(F.data == "back_to_payment")
# async def back_to_payment_page(callback: types.CallbackQuery):
#     """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã"""
#     # ... –∫–æ–¥ —É–¥–∞–ª–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è

@dp.callback_query(F.data == "back_to_buy_premium")
async def back_to_buy_premium_callback(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png")
            ),
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.message.answer("üêª‚Äç‚ùÑÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.callback_query(F.data == "back_to_main_from_buy_premium")
async def back_to_main_from_buy_premium_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–ø–ª–∞—Ç—ã"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png")
            ),
            reply_markup=main_menu
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)



# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã ===
@dp.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    pass

@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    pass

@dp.message(Command("add_premium"))
async def add_premium_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_premium <user_id –∏–ª–∏ username>")
        return
    
    target = args[1].strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ username
    if target.isdigit():
        # –≠—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = add_premium_user(user_id=target)
        if success:
            await message.answer(f"‚úÖ –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {target}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {target}")
    else:
        # –≠—Ç–æ username
        success = add_premium_user(username=target)
        if success:
            await message.answer(f"‚úÖ –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @{target}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @{target}")

@dp.message(Command("remove_premium"))
async def remove_premium_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_premium <user_id –∏–ª–∏ username>")
        return
    
    target = args[1].strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ username
    if target.isdigit():
        # –≠—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = remove_premium_user(user_id=target)
        if success:
            await message.answer(f"‚úÖ –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {target}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target}")
    else:
        # –≠—Ç–æ username
        success = remove_premium_user(username=target)
        if success:
            await message.answer(f"‚úÖ –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{target}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{target}")











# === –ü–æ–∏—Å–∫ ===
@dp.callback_query(F.data == "find_track")
async def ask_track_name(callback: types.CallbackQuery, state: FSMContext):
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
    try:
        await callback.message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            caption="üéµ–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            reply_markup=back_button
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text("üéµ–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", reply_markup=back_button)
    
    await state.set_state(SearchStates.waiting_for_search)

@dp.callback_query(F.data == "back_to_main")
async def back_from_track_search_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—é
    try:
        await callback.message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            reply_markup=main_menu
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)







@dp.message(SearchStates.waiting_for_artist_search, F.text)
async def search_by_artist(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é - –°–¢–†–û–ì–û YouTube —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    artist = message.text.strip()
    user_id = str(message.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å "üå®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è" –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–¥–ø–∏—Å—å—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        prompt_message_id = state_data.get('prompt_message_id')
        
        if prompt_message_id:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
            await message.bot.delete_message(message.chat.id, prompt_message_id)
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
    if not artist:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", reply_markup=main_menu)
        return

    try:
        # –ò—â–µ–º –°–¢–†–û–ì–û –Ω–∞ YouTube - –Ω–∏–∫–∞–∫–æ–≥–æ SoundCloud
        try:
            youtube_results = await asyncio.wait_for(
                search_youtube_artist_improved(artist),
                timeout=30.0
            )
        except Exception as e:
            youtube_results = None
        
        if not youtube_results or not youtube_results.get('entries'):
            await message.answer(f"‚ùÑÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.", reply_markup=main_menu)
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞) –∏ –∫–∞—á–µ—Å—Ç–≤—É
        filtered_tracks = []
        for entry in youtube_results['entries']:
            if entry and entry.get('id') and entry.get('title'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –º–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
                duration = entry.get('duration', 0)
                if duration < 60:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –º–∞–∫—Å–∏–º—É–º 15 –º–∏–Ω—É—Ç
                if duration > 900:
                    continue
                
                entry['source'] = 'yt'
                filtered_tracks.append(entry)
        
        if not filtered_tracks:
            await message.answer(f"‚ùÑÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}' (–≤—Å–µ —Ç—Ä–µ–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ).", reply_markup=main_menu)
            return
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 (—É–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è)
        import random
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º seed –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ user_id –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
        random.seed(int(time.time()) + hash(user_id))
        random.shuffle(filtered_tracks)
        selected_tracks = filtered_tracks[:10]
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–µ–∫–æ–≤
        await message.answer(f"‚ùÑÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(selected_tracks)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'. –°–∫–∞—á–∏–≤–∞—é...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
        await send_tracks_as_audio(user_id, selected_tracks, None)
        
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)

@dp.message(SearchStates.waiting_for_search, F.text)
async def search_music(message: types.Message, state: FSMContext):
    query = message.text.strip()
    user_id = str(message.from_user.id)
    start_time = time.time()  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
    if not query:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É.", reply_markup=main_menu)
        return

    yt_url_pattern = r"(https?://)?(www\.)?(youtube\.com|youtu\.be)/.+"
    if re.match(yt_url_pattern, query):
        # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ background (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª)
        asyncio.create_task(download_track_from_url(message.from_user.id, query))
        return await message.answer("‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!", show_alert=True)

    search_msg = await message.answer("üîç –ü–æ–∏—Å–∫...")

    cached = get_cached_search(query)
    if cached:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫.." –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
        await search_msg.delete()
        return await send_search_results(message.chat.id, cached)
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–∞ YouTube –∏ SoundCloud –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        async def search_youtube(q):
            try:
                def search_block(q):
                    try:
                        ydl_opts = {
                            'format': 'bestaudio/best',
                            'noplaylist': True,
                            'quiet': True,
                            'no_warnings': True,
                            'ignoreerrors': True,
                            'extract_flat': True
                        }
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ cookies —Ñ–∞–π–ª–∞
                        if os.path.exists(COOKIES_FILE):
                            ydl_opts['cookiefile'] = COOKIES_FILE
                        
                        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                            search_query = f"ytsearch5:{q}"  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ: 5 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            result = ydl.extract_info(search_query, download=False)
                            if not result:
                                return None
                            return result
                    except Exception as search_error:
                        return None
                
                result = await asyncio.wait_for(
                    asyncio.to_thread(search_block, q),
                    timeout=12.0  # –ï—â–µ —É–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                )
                return result
            except Exception as e:
                return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –Ω–∞ –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        youtube_task = asyncio.create_task(search_youtube(query))
        soundcloud_task = asyncio.create_task(search_soundcloud(query))
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º 18 —Å–µ–∫—É–Ω–¥ (–µ—â–µ —É–º–µ–Ω—å—à–∏–ª–∏)
        try:
            youtube_info, soundcloud_results = await asyncio.wait_for(
                asyncio.gather(youtube_task, soundcloud_task, return_exceptions=True),
                timeout=18.0
            )
        except asyncio.TimeoutError:
            youtube_task.cancel()
            soundcloud_task.cancel()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å
            try:
                youtube_info = youtube_task.result() if not youtube_task.cancelled() else None
                soundcloud_results = soundcloud_task.result() if not soundcloud_task.cancelled() else None
            except:
                youtube_info = None
                soundcloud_results = None
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã YouTube
        logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã YouTube: {type(youtube_info)}")
        youtube_results = []
        if isinstance(youtube_info, Exception):
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ YouTube: {youtube_info}")
        elif youtube_info:
            results = youtube_info.get("entries", [])
            logging.info(f"üîç YouTube entries: {type(results)}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(results) if results else 0}")
            if results:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø–æ–∑–∂–µ)
                for i, result in enumerate(results):
                    logging.info(f"üîç YouTube —Ä–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: {result}")
                    if result and result.get('id') and result.get('title'):
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                        result['source'] = 'yt'
                        youtube_results.append(result)
                    else:
                        pass
            else:
                pass
        else:
            pass
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SoundCloud
        soundcloud_processed = []
        if isinstance(soundcloud_results, Exception):
            pass
        elif soundcloud_results:
            for result in soundcloud_results:
                if result and result.get('url') and result.get('title'):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                    result['source'] = 'sc'
                    soundcloud_processed.append(result)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results = youtube_results + soundcloud_processed
        
        if not all_results:
            # –ï—Å–ª–∏ –æ–±–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ YouTube
            try:
                youtube_only = await asyncio.wait_for(
                    search_youtube(query),
                    timeout=20.0
                )
                if youtube_only and youtube_only.get('entries'):
                    youtube_results = []
                    for result in youtube_only.get('entries', []):
                        if result and result.get('id') and result.get('title'):
                            result['source'] = 'yt'
                            youtube_results.append(result)
                    
                    if youtube_results:
                        all_results = youtube_results[:20]
                    else:
                        await search_msg.delete()
                        await message.answer("‚ùÑÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=main_menu)
                        return
                else:
                    await search_msg.delete()
                    await message.answer("‚ùÑÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=main_menu)
                    return
            except asyncio.TimeoutError:
                await search_msg.delete()
                await message.answer("‚ùÑÔ∏è –ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)
                return
            except Exception as e:
                await search_msg.delete()
                await message.answer("‚ùÑÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=main_menu)
                return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ - —Å–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
        all_results.sort(key=lambda x: len(x.get('title', '')))
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º 5 YouTube + 5 SoundCloud —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        youtube_results_filtered = [r for r in all_results if r.get('source') != 'sc'][:5]
        soundcloud_results_filtered = [r for r in all_results if r.get('source') == 'sc'][:5]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        final_results = youtube_results_filtered + soundcloud_results_filtered
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫.." –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await search_msg.delete()
        
        set_cached_search(query, final_results)
        await send_search_results(message.chat.id, final_results)
        
    except asyncio.TimeoutError:
        try:
            await search_msg.delete()
        except:
            pass
        await message.answer("‚ùÑÔ∏è –ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)
    except Exception as e:
        try:
            await search_msg.delete()
        except:
            pass
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.", reply_markup=main_menu)



@dp.message(SearchStates.waiting_for_artist, F.text)
async def search_by_artist_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    artist_name = message.text.strip()
    user_id = str(message.from_user.id)
    await state.clear()

    logging.info(f"üë§ –ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{artist_name}'")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    try:
        search_msg = await message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            caption=f"üîç **–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                    "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ YouTube –∏ SoundCloud...\n"
                    "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        search_msg = await message.answer(
            f"üîç **–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
            "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ YouTube –∏ SoundCloud...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )

    try:
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        results = await asyncio.to_thread(search_artist_tracks, artist_name, 20)
        
        if not results:
            try:
                await search_msg.edit_media(
                    media=types.InputMediaPhoto(
                        media=types.FSInputFile("bear.png"),
                        caption=f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                                f"üö´ –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é '{artist_name}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                                "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏\n"
                                "‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ YouTube –∏–ª–∏ SoundCloud\n"
                                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É\n\n"
                                "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è\n"
                                "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"
                    ),
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await search_msg.edit_text(
                    f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                    f"üö´ –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é '{artist_name}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                    "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ YouTube –∏–ª–∏ SoundCloud\n"
                    "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É\n\n"
                    "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è\n"
                    "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await search_msg.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png"),
                    caption=f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                            "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
                            "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                ),
                parse_mode="Markdown"
            )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await search_msg.edit_text(
                f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
                "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode="Markdown"
            )

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        downloaded_tracks = []
        failed_tracks = []

        for i, track in enumerate(results, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await search_msg.edit_media(
                        media=types.InputMediaPhoto(
                            media=types.FSInputFile("bear.png"),
                            caption=f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ {i}/{len(results)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                                    f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
                                    "üíæ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª..."
                        ),
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
                url = f"https://www.youtube.com/watch?v={track['id']}"
                
                try:
                    download_task = asyncio.create_task(
                        download_track_from_url_for_genre(user_id, url)
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue

                if filename:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        downloaded_tracks.append({
                            'filename': filename,
                            'title': track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'duration': track.get('duration', 0),
                            'size_mb': file_size_mb
                        })
                    except Exception as size_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {size_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞)")
                        continue

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                    try:
                        await message.answer_audio(
                            types.FSInputFile(filename),
                            title=track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            performer=artist_name,
                            duration=track.get('duration', 0)
                        )
                        logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        await delete_temp_file(filename)
                        
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {audio_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        try:
                            await message.answer_document(
                                types.FSInputFile(filename),
                                caption=f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist_name}"
                            )
                            logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                            
                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            await delete_temp_file(filename)
                            
                        except Exception as doc_error:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {doc_error}")
                            failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            continue

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)

                else:
                    failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {e}")
                failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_count = len(downloaded_tracks)
        failed_count = len(failed_tracks)

        message_text = f"‚úÖ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        message_text += f"üéµ **–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {success_count} —Ç—Ä–µ–∫–æ–≤\n"

        if success_count > 0:
            total_size = sum(track.get('size_mb', 0) for track in downloaded_tracks)
            message_text += f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.1f} MB\n\n"

        if failed_count > 0:
            message_text += f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:** {failed_count} —Ç—Ä–µ–∫–æ–≤\n\n"
            message_text += "üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å:\n"
            message_text += "‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ YouTube\n"
            message_text += "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            message_text += "‚Ä¢ –ó–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏\n"
            message_text += "‚Ä¢ –ü—Ä–µ–≤—ã—Å–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏\n\n"

        message_text += "üéµ –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        message_text += "üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n\n"
        message_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message_text += "‚Ä¢ –°–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å\n"
        message_text += "‚Ä¢ –ò—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        message_text += "‚Ä¢ üé≤ **–ù–∞–∂–∞—Ç—å '–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º' –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞!**"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        keyboard_buttons = []

        if failed_count > 0:
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")])

        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await search_msg.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png"),
                    caption=message_text
                ),
                reply_markup=keyboard
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.answer_photo(
                    photo=types.FSInputFile("bear.png"),
                    caption=message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except Exception as send_error:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")

        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {artist_name}: {e}")
        
        try:
            await search_msg.edit_text(
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}.\n"
                f"üîç –û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")],
                    [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
        except Exception as final_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {final_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            except Exception as last_error:
                logging.error(f"‚ùå –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {last_error}")

async def send_search_results(chat_id, results):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not results or not isinstance(results, list):
            logging.error(f"‚ùå send_search_results: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {type(results)}")
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu)
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        # –ù–∞—á–∏–Ω–∞–µ–º —Å 15 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –º–∞–ª–æ - –±–µ—Ä–µ–º –±–æ–ª—å—à–µ
        initial_batch = 15
        max_batch = 30  # –£–º–µ–Ω—å—à–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        valid_results = []
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–∫–æ–≤, —É–≤–µ–ª–∏—á–∏–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for batch_size in [initial_batch, 20, max_batch]:
            if batch_size > len(results):
                batch_size = len(results)
            
            for video in results[:batch_size]:
                if video and isinstance(video, dict):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥ –∏ –º–µ–Ω—å—à–µ 15 –º–∏–Ω—É—Ç)
                    duration = video.get('duration', 0)
                    if not duration or duration <= 30 or duration > 900:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º SoundCloud
                    if video.get('source') == 'sc':
                        # SoundCloud —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        if video.get('url') and video.get('title'):
                            valid_results.append(video)
                    elif video.get('id') and video.get('title'):
                        # YouTube —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        valid_results.append(video)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–∫–æ–≤, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
            if len(valid_results) >= 5:
                break
        
        if not valid_results:
            await bot.send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.", reply_markup=main_menu)
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        final_results = valid_results[:5]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for video in final_results:
            title = video.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            duration = video.get("duration", 0)
            duration_text = format_duration(duration) if duration and duration > 0 else ""
            source = video.get("source", "yt")  # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–µ–∫–∞
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            if duration and duration > 0:
                button_text = f"{title[:45]}... ‚è± {duration_text}" if len(title) > 45 else f"{title} ‚è± {duration_text}"
            else:
                button_text = title[:55] + "..." if len(title) > 55 else title
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if source == "sc":
                button_text = "üéµ " + button_text  # –ò–∫–æ–Ω–∫–∞ –¥–ª—è SoundCloud
            else:
                button_text = "‚ñ∂Ô∏è " + button_text  # –ò–∫–æ–Ω–∫–∞ –¥–ª—è YouTube
            
            # –°–æ–∑–¥–∞–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if source == "sc" and video.get("url"):
                # –î–ª—è SoundCloud –∏—Å–ø–æ–ª—å–∑—É–µ–º URL
                import urllib.parse
                encoded_url = urllib.parse.quote(video["url"])
                callback_data = f"dl_sc:{encoded_url}"
            else:
                # –î–ª—è YouTube –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                callback_data = f"dl:{video['id']}"
            
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        await bot.send_message(
            chat_id, 
            "üêª‚Äç‚ùÑÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        try:
            await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu)
        except Exception as send_error:
            pass

# === Callback: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –ø–æ–∏—Å–∫–∞ ===
@dp.callback_query(F.data.startswith("dl:"))
async def download_track(callback: types.CallbackQuery):
    try:
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        video_id = callback.data.split(":")[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å video_id
        if not video_id or len(video_id) < 10:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ.", show_alert=True)
            return
            
        url = f"https://www.youtube.com/watch?v={video_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_premium = is_premium_user(user_id, callback.from_user.username)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π —Å user-specific —Å–µ–º–∞—Ñ–æ—Ä–æ–º
        success = await add_to_download_queue_fast(user_id, url, is_premium)
        
        if success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer("‚úÖ –¢—Ä–µ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç!", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞", show_alert=True)
        
    except ValueError as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ ID –≤–∏–¥–µ–æ.", show_alert=True)
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏.", show_alert=True)

# === Callback: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ SoundCloud —Ç—Ä–µ–∫–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ ===
@dp.callback_query(F.data.startswith("dl_sc:"))
async def download_soundcloud_from_search(callback: types.CallbackQuery):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç SoundCloud —Ç—Ä–µ–∫ –∏–∑ –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ (–∫–∞–∫ YouTube)"""
    try:
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –ø–æ—Å–ª–µ "dl_sc:" –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –µ–≥–æ
        encoded_url = callback.data[6:]  # –£–±–∏—Ä–∞–µ–º "dl_sc:" –≤ –Ω–∞—á–∞–ª–µ
        
        if not encoded_url:
            await callback.answer("‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
        import urllib.parse
        url = urllib.parse.unquote(encoded_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_premium = is_premium_user(user_id, callback.from_user.username)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π —Å user-specific —Å–µ–º–∞—Ñ–æ—Ä–æ–º
        success = await add_to_download_queue_fast(user_id, url, is_premium)
        
        if success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer("‚úÖ –¢—Ä–µ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç!", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞", show_alert=True)
        
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏.", show_alert=True)

# –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è build_tracks_keyboard

async def search_soundcloud(query):
    """–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud —á–µ—Ä–µ–∑ yt-dlp"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º scsearch
        search_query = f"scsearch{SOUNDCLOUD_SEARCH_LIMIT}:{query}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –¥–ª—è –ø–æ–∏—Å–∫–∞
        ydl_opts = {
            'format': 'bestaudio/best',
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            'ignoreerrors': True,
            'no_warnings': True,
            'timeout': 25,  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            'retries': 2,   # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        }
        
        logging.info(f"üîç –ó–∞–ø—É—Å–∫–∞–µ–º yt-dlp —Å –æ–ø—Ü–∏—è–º–∏: {ydl_opts}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø–æ–∏—Å–∫–∞
        def search_block():
            try:
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    logging.info(f"üîç –í—ã–∑—ã–≤–∞–µ–º extract_info –¥–ª—è: {search_query}")
                    info = ydl.extract_info(search_query, download=False)
                    logging.info(f"üîç extract_info –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(info)}")
                    return info
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ search_block SoundCloud: {e}")
                return None
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        info = await asyncio.wait_for(
            asyncio.to_thread(search_block),
            timeout=15.0  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
        )
            
        if info and 'entries' in info:
            results = []
            for entry in info['entries']:
                if entry and isinstance(entry, dict):
                    title = entry.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    url = entry.get('url', '')
                    duration = entry.get('duration', 0)
                    
                    if url and title:
                        results.append({
                            'title': title,
                            'url': url,
                            'duration': duration,
                            'source': 'sc',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'sc' –¥–ª—è SoundCloud
                        })
            
            logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–∫–æ–≤ –Ω–∞ SoundCloud –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º SoundCloud
            cache_key = f"{SOUNDCLOUD_CACHE_PREFIX}:{query}"
            set_cached_search(cache_key, results)
            
            return results
        
        logging.warning(f"üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ SoundCloud: {query}")
        return []
    except asyncio.TimeoutError:
        logging.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ SoundCloud –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        return []
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ SoundCloud: {e}")
        return []

async def search_youtube_artist_improved(artist):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ YouTube —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤—É"""
    try:
        logging.info(f"üå®Ô∏è YouTube: –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'")
        
        def search_block():
            try:
                ydl_opts = {
                    'format': 'bestaudio/best',
                    'noplaylist': True,
                    'quiet': True,
                    'no_warnings': True,
                    'ignoreerrors': True,
                    'extract_flat': True
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ cookies —Ñ–∞–π–ª–∞
                if os.path.exists(COOKIES_FILE):
                    ydl_opts['cookiefile'] = COOKIES_FILE
                
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
                    search_queries = [
                        f"ytsearch15:{artist} music",
                        f"ytsearch15:{artist} song",
                        f"ytsearch15:{artist} track"
                    ]
                    
                    all_results = []
                    for query in search_queries:
                        try:
                            result = ydl.extract_info(query, download=False)
                            if result and 'entries' in result:
                                all_results.extend(result['entries'])
                        except Exception as e:
                            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {e}")
                            continue
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    unique_results = {}
                    for entry in all_results:
                        if entry and entry.get('id'):
                            unique_results[entry['id']] = entry
                    
                    return {'entries': list(unique_results.values())} if unique_results else None
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ search_block YouTube –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}': {e}")
                return None
        
        result = await asyncio.wait_for(
            asyncio.to_thread(search_block),
            timeout=25.0
        )
        
        if result and 'entries' in result:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ - —Ç–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            filtered_tracks = []
            for entry in result['entries']:
                if entry and entry.get('id') and entry.get('title'):
                    title = entry.get('title', '').lower()
                    artist_lower = artist.lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –º–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥, –º–∞–∫—Å–∏–º—É–º 15 –º–∏–Ω—É—Ç
                    duration = entry.get('duration', 0)
                    if duration < 60 or duration > 900:
                        continue
                    
                    # –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –∏—â–µ–º —Ç–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
                    # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ, —á—Ç–æ –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–µ–∫–æ–º
                    exclude_keywords = [
                        'official video', 'music video', 'lyrics', 'live performance', 
                        'interview', 'behind the scenes', 'making of', 'tutorial', 
                        'reaction', 'review', 'cover song', 'remix', 'live', 'song', 'track',
                        'acoustic', 'unplugged', 'studio session', 'recording', 'demo',
                        'preview', 'snippet', 'teaser', 'announcement', 'news', 'update',
                        'podcast', 'stream', 'gaming', 'vlog', 'tutorial', 'review'
                    ]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ù–ï–¢ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤
                    if any(keyword in title for keyword in exclude_keywords):
                        continue
                    
                    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è - –±–æ–ª–µ–µ –≥–∏–±–∫–∞—è
                    # –ò—â–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
                    title_words = title.split()
                    artist_words = artist_lower.split()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                    artist_found = False
                    for i in range(len(title_words) - len(artist_words) + 1):
                        if title_words[i:i+len(artist_words)] == artist_words:
                            artist_found = True
                            break
                    
                    if not artist_found:
                        continue
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç—Ä–µ–∫
                    if len(title_words) <= 10:  # –¢—Ä–µ–∫–∏ –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                        filtered_tracks.append(entry)
                        logging.info(f"üå®Ô∏è YouTube: –Ω–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ '{entry.get('title')}' –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}' (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}—Å)")
            
            logging.info(f"üå®Ô∏è YouTube: –Ω–∞–π–¥–µ–Ω–æ {len(filtered_tracks)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'")
            return result if filtered_tracks else None
        
        return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ YouTube –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}': {e}")
        return None

async def search_soundcloud_artist(artist):
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ SoundCloud"""
    try:
        logging.info(f"üå®Ô∏è SoundCloud: –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'")
        
        def search_block():
            try:
                ydl_opts = {
                    'format': 'bestaudio/best',
                    'quiet': True,
                    'no_warnings': True,
                    'extract_flat': True,
                    'ignoreerrors': True,
                    'timeout': 25,
                    'retries': 2,
                }
                
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ - —Ç–æ–ª—å–∫–æ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    search_query = f"scsearch20:{artist}"
                    info = ydl.extract_info(search_query, download=False)
                    return info
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ search_block SoundCloud –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}': {e}")
                return None
        
        info = await asyncio.wait_for(
            asyncio.to_thread(search_block),
            timeout=25.0
        )
        
        if info and 'entries' in info:
            results = []
            for entry in info['entries']:
                if entry and isinstance(entry, dict):
                    title = entry.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    url = entry.get('url', '')
                    duration = entry.get('duration', 0)
                    
                    if url and title:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ - —Ç–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                        title_lower = title.lower()
                        artist_lower = artist.lower()
                        
                        # –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –∏—â–µ–º —Ç–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
                        # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ, —á—Ç–æ –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–µ–∫–æ–º
                        exclude_keywords = [
                            'official video', 'music video', 'lyrics', 'live performance', 
                            'interview', 'behind the scenes', 'making of', 'tutorial', 
                            'reaction', 'review', 'cover song', 'remix', 'live', 'song', 'track',
                            'acoustic', 'unplugged', 'studio session', 'recording', 'demo',
                            'preview', 'snippet', 'teaser', 'announcement', 'news', 'update'
                        ]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ù–ï–¢ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤
                        if any(keyword in title_lower for keyword in exclude_keywords):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ—Å–ª–µ –¥–µ—Ñ–∏—Å–∞
                        if (title_lower.startswith(artist_lower) or 
                            f" - {artist_lower}" in title_lower or 
                            f" ‚Äì {artist_lower}" in title_lower or
                            f" {artist_lower} -" in title_lower or
                            f" {artist_lower} ‚Äì" in title_lower):
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç—Ä–µ–∫
                            if len(title.split()) <= 8:  # –¢—Ä–µ–∫–∏ –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                                results.append({
                                    'title': title,
                                    'url': url,
                                    'duration': duration,
                                    'source': 'sc',
                                })
                                logging.info(f"üå®Ô∏è SoundCloud: –Ω–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ '{title}' –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'")
            
            logging.info(f"üå®Ô∏è SoundCloud: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'")
            return results
        
        return []
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ SoundCloud –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}': {e}")
        return []

# === Callback: —Ä–∞–∑–¥–µ–ª "–î–ª—è –≤–∞—Å" ===
@dp.callback_query(F.data == "for_you")
async def for_you_section(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        try:
            await callback.message.delete()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        try:
            await callback.message.answer_photo(
                photo=types.FSInputFile("bear.png"),
                caption="‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as edit_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ
        global user_tracks
        user_tracks = load_json(TRACKS_FILE, {})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç—Ä–µ–∫–∏
        recommended_tracks = await get_recommended_tracks(user_id)
        
        if not recommended_tracks:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            try:
                await callback.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=types.FSInputFile("bear.png"),
                        caption="‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–∫–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    ),
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="for_you")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
            except Exception as edit_error:
                await callback.message.answer("‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–∫–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png"),
                    caption=f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(recommended_tracks)} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤...**\n\n"
                            "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
                            "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                ),
                parse_mode="Markdown"
            )
        except Exception as edit_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(recommended_tracks)} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤...**\n\nüéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\nüí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", parse_mode="Markdown")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
        downloaded_tracks = []
        failed_tracks = []

        for i, track in enumerate(recommended_tracks, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await callback.message.edit_media(
                        media=types.InputMediaPhoto(
                            media=types.FSInputFile("bear.png"),
                            caption=f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç—Ä–µ–∫ {i}/{len(recommended_tracks)}..."
                        ),
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {edit_error}")
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
                url = track.get('url', '')
                if not url:
                    logging.error(f"‚ùå –ù–µ—Ç URL –¥–ª—è —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–Ω–µ—Ç URL)")
                    continue
                
                try:
                    download_task = asyncio.create_task(
                        download_track_to_temp(user_id, url, track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'))
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue

                if filename and filename != "":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > 50:  # –ú–∞–∫—Å–∏–º—É–º 50MB
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > 50MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                        await bot.send_audio(
                            chat_id=user_id,
                            audio=types.FSInputFile(filename),
                            title=track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'),
                            performer=track.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
                        )
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            os.remove(filename)
                        except:
                            pass
                        
                        downloaded_tracks.append(track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'))
                        logging.info(f"‚úÖ –¢—Ä–µ–∫ {i}/{len(recommended_tracks)} –∑–∞–≥—Ä—É–∂–µ–Ω: {track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')}")
                        
                    except Exception as file_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º: {file_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞)")
                        try:
                            os.remove(filename)
                        except:
                            pass
                else:
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å)")
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞ {i}: {e}")
                failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏)")
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if downloaded_tracks:
            success_message = f"‚úÖ **–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            success_message += f"üéµ **–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {len(downloaded_tracks)} —Ç—Ä–µ–∫–æ–≤\n"
            
            if failed_tracks:
                success_message += f"‚ùå **–û—à–∏–±–∫–∏:** {len(failed_tracks)} —Ç—Ä–µ–∫–æ–≤\n\n"
                success_message += "**–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:**\n"
                for failed in failed_tracks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                    success_message += f"‚Ä¢ {failed}\n"
                if len(failed_tracks) > 5:
                    success_message += f"... –∏ –µ—â–µ {len(failed_tracks) - 5} —Ç—Ä–µ–∫–æ–≤"
            
            try:
                await callback.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=types.FSInputFile("bear.png"),
                        caption=success_message
                    ),
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ï—â–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="for_you")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ]),
                    parse_mode="Markdown"
                )
            except Exception as edit_error:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                await callback.message.answer(success_message, parse_mode="Markdown")
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
            try:
                await callback.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=types.FSInputFile("bear.png"),
                        caption="‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞**\n\n"
                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    ),
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="for_you")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
            except Exception as edit_error:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
                await callback.message.answer("‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ for_you_section –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        try:
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png"),
                    caption="‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="for_you")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as edit_error:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

async def get_recommended_tracks(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
    try:
        global user_tracks, user_recommendation_history
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user_recommendation_history' not in globals():
            user_recommendation_history = {}
        
        if user_id not in user_recommendation_history:
            user_recommendation_history[user_id] = {
                'shown_tracks': set(),  # –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
                'used_queries': set(),  # –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                'last_artist': None,    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç
                'query_counter': 0      # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            }
        
        history = user_recommendation_history[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning(f"‚ö†Ô∏è get_recommended_tracks: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        user_tracks_list = user_tracks.get(str(user_id), [])
        logging.info(f"üéØ get_recommended_tracks: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(user_tracks_list) if user_tracks_list else 0}")
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ç—Ä–µ–∫–∏, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ –∞—Ä—Ç–∏—Å—Ç–∞–º
        if user_tracks_list and len(user_tracks_list) > 0:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            artists = set()
            for track in user_tracks_list:
                if track and isinstance(track, dict):
                    title = track.get('title', '')
                    if title:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (–æ–±—ã—á–Ω–æ —Ñ–æ—Ä–º–∞—Ç "–ê—Ä—Ç–∏—Å—Ç - –ù–∞–∑–≤–∞–Ω–∏–µ")
                        if ' - ' in title:
                            artist = title.split(' - ')[0].strip()
                            if artist and len(artist) > 2:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                                artists.add(artist)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏
            if artists:
                logging.info(f"üéØ –ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ {len(artists)} –∞—Ä—Ç–∏—Å—Ç–∞–º: {', '.join(list(artists)[:3])}")
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–µ–∫–∏ –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                all_results = []
                used_artists = set()
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –æ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏
                available_artists = [a for a in artists if a != history['last_artist']]
                if not available_artists:
                    available_artists = list(artists)
                
                # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
                random.shuffle(available_artists)
                
                # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 3-4)
                max_artists_to_search = min(4, len(available_artists))
                tracks_per_artist = max(3, 10 // max_artists_to_search)  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–∫–∏ –º–µ–∂–¥—É –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
                
                for i, artist in enumerate(available_artists[:max_artists_to_search]):
                    if len(all_results) >= 10:
                        break
                        
                    logging.info(f"üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –æ—Ç –∞—Ä—Ç–∏—Å—Ç–∞ {i+1}/{max_artists_to_search}: {artist}")
                    
                    # –ò—â–µ–º —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ –Ω–∞ SoundCloud
                    artist_results = await search_soundcloud(artist)
                    if artist_results:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
                        new_tracks = []
                        for track in artist_results:
                            track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                            if track_id not in history['shown_tracks']:
                                new_tracks.append(track)
                                if len(new_tracks) >= tracks_per_artist:
                                    break
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –∫ –æ–±—â–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                        all_results.extend(new_tracks)
                        used_artists.add(artist)
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await asyncio.sleep(0.1)
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
                if all_results:
                    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    random.shuffle(all_results)
                    
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç—Ä–µ–∫–æ–≤
                    final_tracks = all_results[:10]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
                    for track in final_tracks:
                        track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                        history['shown_tracks'].add(track_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
                    if used_artists:
                        history['last_artist'] = random.choice(list(used_artists))
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 100 —Ç—Ä–µ–∫–æ–≤)
                    if len(history['shown_tracks']) > 100:
                        history['shown_tracks'] = set(list(history['shown_tracks'])[-50:])
                    
                    logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(final_tracks)} —Ç—Ä–µ–∫–æ–≤ –æ—Ç {len(used_artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
                    return final_tracks
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏
        logging.info(f"üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        popular_queries = [
            # –¢—Ä–µ–Ω–¥—ã 2024
            "trending music 2024", "top hits 2024", "viral music 2024", "chart toppers 2024",
            "popular songs 2024", "music trending now", "trending audio 2024", "hit songs 2024",
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã
            "pop music trending", "hip hop trending", "electronic music trending", "rock music trending",
            "indie music trending", "alternative trending", "r&b trending", "country music trending",
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "music this week", "songs this month", "trending this week", "popular this month",
            "viral this week", "hits this month", "new music today", "fresh tracks today",
            
            # –û–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "trending tracks", "popular music", "viral songs", "chart music",
            "music charts", "trending audio", "popular tracks", "hit music"
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏
        available_queries = [q for q in popular_queries if q not in history['used_queries']]
        if not available_queries:
            # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            history['used_queries'].clear()
            available_queries = popular_queries
        
        query = random.choice(available_queries)
        history['used_queries'].add(query)
        history['query_counter'] += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        if len(history['used_queries']) > 20:
            history['used_queries'] = set(list(history['used_queries'])[-10:])
        
        results = await search_soundcloud(query)
        
        if results:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
            new_tracks = []
            for track in results:
                track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                if track_id not in history['shown_tracks']:
                    new_tracks.append(track)
                    if len(new_tracks) >= 10:
                        break
            
            # –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if len(new_tracks) < 5:
                random_tracks = random.sample(results, min(10 - len(new_tracks), len(results)))
                for track in random_tracks:
                    track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                    if track_id not in history['shown_tracks']:
                        new_tracks.append(track)
                        if len(new_tracks) >= 10:
                            break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
            for track in new_tracks:
                track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                history['shown_tracks'].add(track_id)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(history['shown_tracks']) > 100:
                history['shown_tracks'] = set(list(history['shown_tracks'])[-50:])
            
            logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(new_tracks)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
            return new_tracks[:10]
        
        return []
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []







async def send_tracks_as_audio(user_id: str, tracks: list, status_msg: types.Message = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–∏ –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ —á–∞—Ç"""
    try:
        logging.info(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(tracks)} —Ç—Ä–µ–∫–æ–≤ –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ï—Å–ª–∏ status_msg –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫..." –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if not status_msg:
            try:
                status_msg = await bot.send_message(user_id, "üå®Ô∏è –ü–æ–∏—Å–∫...")
                logging.info(f"üéØ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–∏—Å–∫...' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–∏—Å–∫...': {e}")
                status_msg = None
        
        success_count = 0
        for i, track in enumerate(tracks):
            try:
                if track and isinstance(track, dict) and track.get('url'):
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                    temp_file_path = await download_track_to_temp(user_id, track['url'], track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'))
                    
                    if temp_file_path and os.path.exists(temp_file_path):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                        await bot.send_audio(
                            chat_id=user_id,
                            audio=types.FSInputFile(temp_file_path),
                            title=track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'),
                            performer=track.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
                        )
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        await delete_temp_file(temp_file_path)
                        
                        success_count += 1
                        logging.info(f"‚úÖ –¢—Ä–µ–∫ {i+1}/{len(tracks)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')}")
                        
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
                        if i == 0 and status_msg:
                            try:
                                await status_msg.delete()
                                logging.info(f"üéØ –°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞")
                            except Exception as delete_error:
                                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.5)
                    else:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ {i+1}: {track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')}")
                else:
                    logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫ {i+1}: {track}")
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ {i+1}: {e}")
                continue
        
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{len(tracks)} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–æ–≤ –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if status_msg:
            try:
                await status_msg.delete()
            except:
                pass

# === –ú–æ—è –º—É–∑—ã–∫–∞ (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è, —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –ø–æ–∏—Å–∫–∞) ===
@dp.callback_query(F.data == "my_music")
async def my_music(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ–∏—Å–∫–∞ - —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    global user_tracks
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑
    global user_tracks
    user_tracks = load_json(TRACKS_FILE, {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
    if not isinstance(user_tracks, dict):
        user_tracks = {}
    
    tracks = user_tracks.get(user_id, [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tracks –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
    if tracks is None:
        tracks = []
        user_tracks[user_id] = tracks
    
    if not tracks:
        # –ü—Ä–∏ –ø—É—Å—Ç–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        
        try:
            await callback.message.answer("üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.")
        except Exception as answer_error:
            pass
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å—Ç–∏–ª–µ –ø–æ–∏—Å–∫–∞
        keyboard = []
        
        for i, track in enumerate(tracks):
            if isinstance(track, dict):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
                title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                original_url = track.get('original_url', '')
                duration = track.get('duration', 0)
                
                if original_url and original_url.startswith('http'):
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                    duration_text = format_duration(duration)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if duration_text:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –Ω–µ—ë
                        max_title_length = 40
                        button_text = f"üéµ {title[:max_title_length]}{'...' if len(title) > max_title_length else ''} ‚è±{duration_text}"
                    else:
                        # –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ—Ç, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                        max_title_length = 50
                        button_text = f"üéµ {title[:max_title_length]}{'...' if len(title) > max_title_length else ''}"
                    
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
                    row = [
                        InlineKeyboardButton(text=button_text, callback_data=f"play:{i}"),
                        InlineKeyboardButton(text="üóë", callback_data=f"del:{i}")
                    ]
                    keyboard.append(row)
                else:
                    # –¢—Ä–µ–∫ –±–µ–∑ —Å—Å—ã–ª–∫–∏
                    max_title_length = 50
                    button_text = f"‚ö†Ô∏è {title[:max_title_length]}{'...' if len(title) > max_title_length else ''}"
                    row = [
                        InlineKeyboardButton(text=button_text, callback_data="no_url"),
                        InlineKeyboardButton(text="üóë", callback_data=f"del:{i}")
                    ]
                    keyboard.append(row)
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                title = os.path.basename(track)
                max_title_length = 50
                button_text = f"‚ö†Ô∏è {title[:max_title_length]}{'...' if len(title) > max_title_length else ''}"
                row = [
                    InlineKeyboardButton(text=button_text, callback_data="old_format"),
                    InlineKeyboardButton(text="üóë", callback_data=f"del:{i}")
                ]
                keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å –≤—Å–µ"
        keyboard.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ", callback_data="download_all")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if callback.message.text:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                await callback.message.edit_text(
                    f"üéß –í–∞—à–∏ —Ç—Ä–µ–∫–∏ ({len(tracks)}):",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    f"üéß –í–∞—à–∏ —Ç—Ä–µ–∫–∏ ({len(tracks)}):",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                f"üéß –í–∞—à–∏ —Ç—Ä–µ–∫–∏ ({len(tracks)}):",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        import traceback
        logging.error(f"üìã Traceback:\n{traceback.format_exc()}")
        try:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)
        except Exception as edit_error:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)
    
    logging.info("üîç === –§–£–ù–ö–¶–ò–Ø my_music –ó–ê–í–ï–†–®–ï–ù–ê ===")

# –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü

# === Callback: play / play_shared ===
@dp.callback_query(F.data.startswith("play:"))
async def play_track(callback: types.CallbackQuery):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Ç—Ä–µ–∫ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É '–°–∫–∞—á–∞—Ç—å –≤—Å—ë'"""
    global user_tracks
    try:
        user_id = str(callback.from_user.id)
        logging.info(f"üîç play_track –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞
        idx = int(callback.data.split(":")[1])
        logging.info(f"üîç –ò–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞: {idx}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_tracks is None:
            user_tracks = {}
        
        tracks = user_tracks.get(user_id, [])
        if not tracks:
            await callback.answer("üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.", show_alert=True)
            return
        
        if not (0 <= idx < len(tracks)):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        track = tracks[idx]
        logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç—Ä–µ–∫: {track}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–∞
        if isinstance(track, dict):
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
            title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
            original_url = track.get('original_url', '')
            
            if not original_url or not original_url.startswith('http'):
                await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
            loading_msg = await callback.message.edit_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫...")
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ –∑–∞–Ω–æ–≤–æ (–∫–∞–∫ –≤ "–°–∫–∞—á–∞—Ç—å –≤—Å—ë")
                temp_file_path = await download_track_to_temp(user_id, original_url, title)
                
                if temp_file_path and os.path.exists(temp_file_path):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MP3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.answer_audio(types.FSInputFile(temp_file_path), title=title)
                    logging.info(f"‚úÖ –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {title}")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await delete_temp_file(temp_file_path)
                    
                    # –£–¥–∞–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å "‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫..." –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    try:
                        await loading_msg.delete()
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    await callback.answer("‚úÖ –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                else:
                    # –£–¥–∞–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å "‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫..." –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        await loading_msg.delete()
                    except:
                        pass
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.")
                    
            except Exception as e:
                # –£–¥–∞–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å "‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫..." –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    await loading_msg.delete()
                except:
                    pass
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞ {title}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞.")

        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            title = os.path.basename(track)
            await callback.answer("‚ùå –¢—Ä–µ–∫ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                
    except ValueError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç—Ä–µ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç—Ä–µ–∫–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ play_track: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)



# === Callback: download all (self) ===
@dp.callback_query(F.data == "download_all")
async def download_all_tracks(callback: types.CallbackQuery):
    global user_tracks
    try:
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning(f"‚ö†Ô∏è download_all_tracks: user_tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        tracks = user_tracks.get(user_id, [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tracks –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
        if tracks is None:
            tracks = []
            user_tracks[user_id] = tracks
            logging.warning(f"‚ö†Ô∏è download_all_tracks: tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
        
        if not tracks:
            await callback.message.answer("üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.", reply_markup=main_menu)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        loading_msg = await callback.message.answer("üì• –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ —Ç—Ä–µ–∫–∏...")
        
        success_count = 0
        failed_count = 0
        

        
        for track in tracks:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–∞
                if isinstance(track, dict):
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
                    title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                    original_url = track.get('original_url', '')
                    
                    if not original_url or not original_url.startswith('http'):
                        logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç—Ä–µ–∫–∞: {title}")
                        failed_count += 1
                        continue
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    if not track or not isinstance(track, str):
                        logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–∞: {track}")
                        failed_count += 1
                        continue
                        
                    title = os.path.basename(track)
                    original_url = ""  # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Å—Å—ã–ª–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
                
                # –î–ª—è –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ (–Ω–æ–≤—ã—Ö –∏ —Å—Ç–∞—Ä—ã—Ö) —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
                if original_url and original_url.startswith('http'):
                    try:
                        logging.info(f"üì• –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫: {title} –ø–æ —Å—Å—ã–ª–∫–µ: {original_url}")
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                        temp_file_path = await download_track_to_temp(user_id, original_url, title)
                        
                        if temp_file_path and os.path.exists(temp_file_path):
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MP3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            try:
                                await callback.message.answer_audio(types.FSInputFile(temp_file_path), title=title)
                                success_count += 1
                                logging.info(f"‚úÖ –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {title}")
                                
                                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                                await delete_temp_file(temp_file_path)
                                
                                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                                await asyncio.sleep(0.4)
                                
                            except Exception as audio_error:
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ {title}: {audio_error}")
                                failed_count += 1
                                
                                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                                await delete_temp_file(temp_file_path)
                        else:
                            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫: {title}")
                            failed_count += 1
                            
                    except Exception as download_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ {title}: {download_error}")
                        failed_count += 1
                else:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ç—Ä–µ–∫–∞: {title}")
                    failed_count += 1
                    
            except Exception as e:
                logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ {track}: {e}")
                failed_count += 1
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å "üì• –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ —Ç—Ä–µ–∫–∏..." –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await loading_msg.delete()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
        if failed_count > 0:
            result_message = f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n"
            result_message += f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:** {failed_count} —Ç—Ä–µ–∫–æ–≤\n\n"
            result_message += "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            result_message += "‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ YouTube\n"
            result_message += "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            result_message += "‚Ä¢ –ó–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏\n"
            
            await callback.message.answer(result_message, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ download_all_tracks –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤.", reply_markup=main_menu)



async def show_updated_tracks_list(message, user_id: str, tracks: list):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å—Ç–∏–ª–µ –ø–æ–∏—Å–∫–∞
        keyboard = []

        for i, track in enumerate(tracks):
            if isinstance(track, dict):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
                title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                original_url = track.get('original_url', '')
                duration = track.get('duration', 0)
                
                if original_url and original_url.startswith('http'):
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                    duration_text = format_duration(duration)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if duration_text:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –Ω–µ—ë
                        max_title_length = 40
                        button_text = f"üéµ {title[:max_title_length]}{'...' if len(title) > max_title_length else ''} ‚è±{duration_text}"
                    else:
                        # –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ—Ç, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                        max_title_length = 50
                        button_text = f"üéµ {title[:max_title_length]}{'...' if len(title) > max_title_length else ''}"
                    
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
                    row = [
                        InlineKeyboardButton(text=button_text, callback_data=f"play:{i}"),
                        InlineKeyboardButton(text="üóë", callback_data=f"del:{i}")
                    ]
                    keyboard.append(row)
                else:
                    # –¢—Ä–µ–∫ –±–µ–∑ —Å—Å—ã–ª–∫–∏
                    max_title_length = 50
                    button_text = f"‚ö†Ô∏è {title[:max_title_length]}{'...' if len(title) > max_title_length else ''}"
                    row = [
                        InlineKeyboardButton(text=button_text, callback_data="no_url"),
                        InlineKeyboardButton(text="üóë", callback_data=f"del:{i}")
                    ]
                    keyboard.append(row)
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                title = os.path.basename(track)
                max_title_length = 50
                button_text = f"‚ö†Ô∏è {title[:max_title_length]}{'...' if len(title) > max_title_length else ''}"
                row = [
                    InlineKeyboardButton(text=button_text, callback_data="old_format"),
                    InlineKeyboardButton(text="üóë", callback_data=f"del:{i}")
                ]
                keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å –≤—Å–µ"
        keyboard.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ", callback_data="download_all")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
        await message.edit_text(
            f"üéß –í–∞—à–∏ —Ç—Ä–µ–∫–∏ ({len(tracks)}):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        import traceback
        logging.error(f"üìã Traceback:\n{traceback.format_exc()}")
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)

# === –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ ===
@dp.callback_query(F.data.startswith("del:"))
async def delete_track(callback: types.CallbackQuery):
    global user_tracks
    try:
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        idx = int(callback.data.split(":")[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning(f"‚ö†Ô∏è delete_track: user_tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        tracks = user_tracks.get(user_id, [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tracks –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
        if tracks is None:
            tracks = []
            user_tracks[user_id] = tracks
            logging.warning(f"‚ö†Ô∏è delete_track: tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
        
        if not (0 <= idx < len(tracks)):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        track = tracks[idx]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–∞
        if isinstance(track, dict):
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
            title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
            # –í –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ —Ñ–∞–π–ª—ã –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            if track and isinstance(track, str):
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if os.path.exists(track):
                    try:
                        os.remove(track)
                        logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {track}")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ {track}: {e}")
            title = os.path.basename(track) if track else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'
        
        # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
        tracks.pop(idx)
        save_tracks()
        logging.info(f"‚úÖ –¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞: {title}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫–æ–≤
        if not tracks:
            await callback.message.edit_text("üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.", reply_markup=main_menu)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
            await show_updated_tracks_list(callback.message, user_id, tracks)
        
        await callback.answer("‚úÖ –¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω.")
        
    except ValueError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç—Ä–µ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç—Ä–µ–∫–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ delete_track: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ "–ú–æ—è –º—É–∑—ã–∫–∞" ===
@dp.callback_query(F.data == "no_url")
async def handle_no_url_track(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏ –±–µ–∑ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç—Ä–µ–∫ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫.", show_alert=True)

@dp.callback_query(F.data == "old_format")
async def handle_old_format_track(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç—Ä–µ–∫ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫.", show_alert=True)







# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∂–∞–Ω—Ä–∞–º–∏ ===
def get_randomized_genres():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞"""
    base_genres = get_genres()
    randomized_genres = {}
    
    for genre_name, queries in base_genres.items():
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        shuffled_queries = list(queries)
        random.shuffle(shuffled_queries)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Ç 80% –¥–æ 100% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
        min_queries = max(10, int(len(shuffled_queries) * 0.8))
        max_queries = len(shuffled_queries)
        num_queries = random.randint(min_queries, max_queries)
        
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ
        selected_queries = random.sample(shuffled_queries, num_queries)
        randomized_genres[genre_name] = selected_queries
        
        logging.info(f"üé≤ –ñ–∞–Ω—Ä {genre_name}: –≤—ã–±—Ä–∞–Ω–æ {num_queries} –∏–∑ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    return randomized_genres

def get_genres():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    return {
        "üéµ –ü–æ–ø": [
            "pop music 2024 official audio",
            "popular pop songs official",
            "best pop hits official audio",
            "top pop music tracks",
            "pop songs today official",
            "latest pop music official",
            "pop music playlist official",
            "pop hits 2024 official audio",
            "pop music new releases",
            "pop songs popular official",
            "pop music trending tracks",
            "pop hits today official",
            "pop music latest official",
            "pop songs hits official",
            "pop music best tracks",
            "pop hits playlist official",
            "pop music top tracks",
            "pop songs 2024 official",
            "pop music current tracks",
            "pop hits new releases",
            "pop music trending songs",
            "pop songs latest official",
            "pop music popular tracks",
            "pop hits current official",
            "pop music today songs",
            "pop songs trending official",
            "pop music hits official",
            "pop hits latest tracks",
            "pop music current songs",
            "pop songs best official",
            "pop music new hits official"
        ],
        "üé∏ –†–æ–∫": [
            "rock music 2024 official audio",
            "best rock songs official",
            "rock hits today official",
            "popular rock music tracks",
            "rock songs playlist official",
            "top rock hits official audio",
            "rock music latest official",
            "rock songs 2024 official",
            "rock hits playlist official",
            "rock music popular tracks",
            "rock songs trending official",
            "rock music best tracks",
            "rock hits latest official",
            "rock music new releases",
            "rock songs hits official",
            "rock music current tracks",
            "rock hits new releases",
            "rock music trending songs",
            "rock songs latest official",
            "rock music top tracks",
            "rock hits current official",
            "rock music today songs",
            "rock songs popular official",
            "rock music hits official",
            "rock hits trending tracks",
            "rock music playlist official",
            "rock songs best official",
            "rock music new hits official",
            "rock hits today official",
            "rock music latest hits official"
        ],
        "üé§ –•–∏–ø-—Ö–æ–ø": [
            "hip hop music 2024 official audio",
            "rap songs today official",
            "best hip hop hits official audio",
            "hip hop music latest tracks",
            "rap music popular songs official",
            "hip hop songs playlist official",
            "top rap hits official audio",
            "hip hop music trending tracks",
            "rap songs 2024 official",
            "hip hop hits playlist music",
            "rap music best tracks official",
            "hip hop songs latest official",
            "rap music new releases",
            "hip hop hits today music",
            "rap songs popular official",
            "hip hop music current tracks",
            "rap hits new releases",
            "hip hop music trending songs",
            "rap songs latest official",
            "hip hop music top tracks",
            "rap hits current music",
            "hip hop music today songs",
            "rap songs hits official",
            "hip hop hits trending tracks",
            "rap music playlist official",
            "hip hop songs best music",
            "rap music new hits official",
            "hip hop hits latest tracks",
            "rap music current songs",
            "hip hop songs trending official"
        ],
        "üéπ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": [
            "electronic music 2024",
            "edm songs today",
            "best electronic music",
            "electronic hits latest",
            "edm music popular",
            "electronic songs playlist",
            "top edm hits",
            "electronic music trending",
            "edm songs 2024",
            "electronic hits playlist",
            "edm music best",
            "electronic songs latest",
            "edm music new",
            "electronic hits today",
            "edm songs popular",
            "electronic music current",
            "edm hits new",
            "electronic music trending",
            "edm songs latest",
            "electronic music top",
            "edm hits current",
            "electronic music today",
            "edm songs hits",
            "electronic hits trending",
            "edm music playlist",
            "electronic songs best",
            "edm music new hits",
            "electronic hits latest",
            "edm music current",
            "electronic songs trending"
        ],
        "üé∑ –î–∂–∞–∑": [
            "jazz music 2024",
            "best jazz songs",
            "jazz hits today",
            "popular jazz music",
            "jazz songs playlist",
            "top jazz hits",
            "jazz music latest",
            "jazz songs 2024",
            "jazz hits playlist",
            "jazz music popular",
            "jazz songs trending",
            "jazz music best",
            "jazz hits latest",
            "jazz music new",
            "jazz songs hits",
            "jazz music current",
            "jazz hits new",
            "jazz music trending",
            "jazz songs latest",
            "jazz music top",
            "jazz hits current",
            "jazz music today",
            "jazz songs popular",
            "jazz music hits",
            "jazz hits trending",
            "jazz music playlist",
            "jazz songs best",
            "jazz music new hits",
            "jazz hits latest",
            "jazz music current",
            "jazz songs trending"
        ],
        "üéª –ö–ª–∞—Å—Å–∏–∫–∞": [
            "classical music 2024",
            "best classical music",
            "classical hits today",
            "popular classical music",
            "classical music playlist",
            "top classical hits",
            "classical music latest",
            "classical music 2024",
            "classical hits playlist",
            "classical music popular",
            "classical music trending",
            "classical music best",
            "classical hits latest",
            "classical music new",
            "classical music hits",
            "classical music current",
            "classical hits new",
            "classical music trending",
            "classical music latest",
            "classical music top",
            "classical hits current",
            "classical music today",
            "classical music popular",
            "classical music hits",
            "classical hits trending",
            "classical music playlist",
            "classical music best",
            "classical music new hits",
            "classical hits latest",
            "classical music current",
            "classical music trending"
        ],
        "üé∫ –ë–ª—é–∑": [
            "blues music 2024",
            "best blues songs",
            "blues hits today",
            "popular blues music",
            "blues songs playlist",
            "top blues hits",
            "blues music latest",
            "blues songs 2024",
            "blues hits playlist",
            "blues music popular",
            "blues songs trending",
            "blues music best",
            "blues hits latest",
            "blues music new",
            "blues songs hits",
            "blues music current",
            "blues hits new",
            "blues music trending",
            "blues songs latest",
            "blues music top",
            "blues hits current",
            "blues music today",
            "blues songs popular",
            "blues music hits",
            "blues hits trending",
            "blues music playlist",
            "blues songs best",
            "blues music new hits",
            "blues hits latest",
            "blues music current",
            "blues songs trending"
        ],
        "üéº –ö–∞–Ω—Ç—Ä–∏": [
            "country music 2024",
            "best country songs",
            "country hits today",
            "popular country music",
            "country songs playlist",
            "top country hits",
            "country music latest",
            "country songs 2024",
            "country hits playlist",
            "country music popular",
            "country songs trending",
            "country music best",
            "country hits latest",
            "country music new",
            "country songs hits",
            "country music current",
            "country hits new",
            "country music trending",
            "country songs latest",
            "country music top",
            "country hits current",
            "country music today",
            "country songs popular",
            "country music hits",
            "country hits trending",
            "country music playlist",
            "country songs best",
            "country music new hits",
            "country hits latest",
            "country music current",
            "country songs trending"
        ],
        "üé≠ –†—ç–≥–≥–∏": [
            "reggae music 2024",
            "best reggae songs",
            "reggae hits today",
            "popular reggae music",
            "reggae songs playlist",
            "top reggae hits",
            "reggae music latest",
            "reggae songs 2024",
            "reggae hits playlist",
            "reggae music popular",
            "reggae songs trending",
            "reggae music best",
            "reggae hits latest",
            "reggae music new",
            "reggae songs hits",
            "reggae music current",
            "reggae hits new",
            "reggae music trending",
            "reggae songs latest",
            "reggae music top",
            "reggae hits current",
            "reggae music today",
            "reggae songs popular",
            "reggae music hits",
            "reggae hits trending",
            "reggae music playlist",
            "reggae songs best",
            "reggae music new hits",
            "reggae hits latest",
            "reggae music current",
            "reggae songs trending"
        ],
        "üé™ –§–æ–ª–∫": [
            "folk music 2024",
            "best folk songs",
            "folk hits today",
            "popular folk music",
            "folk songs playlist",
            "top folk hits",
            "folk music latest",
            "folk songs 2024",
            "folk hits playlist",
            "folk music popular",
            "folk songs trending",
            "folk music best",
            "folk hits latest",
            "folk music new",
            "folk songs hits",
            "folk music current",
            "folk hits new",
            "folk music trending",
            "folk songs latest",
            "folk music top",
            "folk hits current",
            "folk music today",
            "folk songs popular",
            "folk music hits",
            "folk hits trending",
            "folk music playlist",
            "folk songs best",
            "folk music new hits",
            "folk hits latest",
            "folk music current",
            "folk songs trending"
        ],
        "üé® –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞": [
            "alternative music 2024",
            "best alternative songs",
            "alternative hits today",
            "popular alternative music",
            "alternative songs playlist",
            "top alternative hits",
            "alternative music latest",
            "alternative songs 2024",
            "alternative hits playlist",
            "alternative music popular",
            "alternative songs trending",
            "alternative music best",
            "alternative hits latest",
            "alternative music new",
            "alternative songs hits",
            "alternative music current",
            "alternative hits new",
            "alternative music trending",
            "alternative songs latest",
            "alternative music top",
            "alternative hits current",
            "alternative music today",
            "alternative songs popular",
            "alternative music hits",
            "alternative hits trending",
            "alternative music playlist",
            "alternative songs best",
            "alternative music new hits",
            "alternative hits latest",
            "alternative music current",
            "alternative songs trending"
        ],
        "üé¨ –°–∞—É–Ω–¥—Ç—Ä–µ–∫–∏": [
            "soundtrack music 2024",
            "best soundtrack songs",
            "soundtrack hits today",
            "popular soundtrack music",
            "soundtrack songs playlist",
            "top soundtrack hits",
            "soundtrack music latest",
            "soundtrack songs 2024",
            "soundtrack hits playlist",
            "soundtrack music popular",
            "soundtrack songs trending",
            "soundtrack music best",
            "soundtrack hits latest",
            "soundtrack music new",
            "soundtrack songs hits",
            "soundtrack music current",
            "soundtrack hits new",
            "soundtrack music trending",
            "soundtrack songs latest",
            "soundtrack music top",
            "soundtrack hits current",
            "soundtrack music today",
            "soundtrack songs popular",
            "soundtrack music hits",
            "soundtrack hits trending",
            "soundtrack music playlist",
            "soundtrack songs best",
            "soundtrack music new hits",
            "soundtrack hits latest",
            "soundtrack music current",
            "soundtrack songs trending"
        ]
    }

def search_genre_tracks(genre_queries, limit=20):
    """–ò—â–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
    all_results = []
    
    try:
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        shuffled_queries = list(genre_queries)
        random.shuffle(shuffled_queries)
        
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ 20, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 20-35 –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        if len(shuffled_queries) > 20:
            num_queries = random.randint(20, min(35, len(shuffled_queries)))
            selected_queries = random.sample(shuffled_queries, num_queries)
        else:
            selected_queries = shuffled_queries
        
        # –î–æ–±–∞–≤–ª—è–µ–º fallback –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º—É–∑—ã–∫–∏)
        fallback_queries = [
            "rap music official audio",
            "hip hop songs official",
            "popular rap music",
            "best hip hop tracks",
            "rap hits official",
            "hip hop classics official audio"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º fallback –∑–∞–ø—Ä–æ—Å—ã –∫ –æ—Å–Ω–æ–≤–Ω—ã–º
        selected_queries.extend(fallback_queries)
        logging.info(f"üé≤ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(fallback_queries)} fallback –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        logging.info(f"üé≤ –í—ã–±—Ä–∞–Ω–æ {len(selected_queries)} —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ {len(genre_queries)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        for query in selected_queries:
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ (–±–æ–ª–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –º—É–∑—ã–∫—É)
                search_strategies = [
                    f"ytsearch3:{query} official audio",  # –ò—â–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ
                    f"ytsearch3:{query} music",  # –ò—â–µ–º —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º "music"
                    f"ytsearch3:{query}",  # –ò—â–µ–º 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    f"ytsearch5:{query}",  # –ò—â–µ–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                ]
                
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
                if " - " in query:
                    artist, song = query.split(" - ", 1)
                    search_strategies.extend([
                        f"ytsearch3:{artist} {song}",
                        f"ytsearch3:{artist}",
                        f"ytsearch3:{song}"
                    ])
                
                query_success = False
                
                for strategy in search_strategies:
                    if query_success:
                        break
                        
                    try:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
                        ydl_opts = {
                            'format': 'bestaudio/best',
                            'noplaylist': True,
                            'quiet': True,
                            'cookiefile': COOKIES_FILE if os.path.exists(COOKIES_FILE) else None,
                            'extract_flat': True,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                            'no_warnings': True,
                            'ignoreerrors': True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                            'timeout': 30,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                            'retries': 3,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                        }
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
                        if os.path.exists(COOKIES_FILE):
                            logging.info(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies —Ñ–∞–π–ª: {COOKIES_FILE}")
                        else:
                            logging.warning("‚ö†Ô∏è Cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
                        
                        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                            try:
                                # –ü—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                                info = ydl.extract_info(strategy, download=False)
                                
                                if not info:
                                    logging.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy})")
                                    continue
                                    
                                results = info.get("entries", [])
                                
                                if results:
                                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–±–æ—Ä–Ω–∏–∫–æ–≤ –∏ –Ω–∞—Ä–µ–∑–æ–∫
                                    valid_results = []
                                    for result in results:
                                        if not result:
                                            continue
                                            
                                        title = result.get('title', '').lower()
                                        duration = result.get('duration', 0)
                                        video_id = result.get('id')
                                        
                                        # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
                                        if (duration and duration > 60 and  # –¢—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã
                                            duration < 600 and  # –ò –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–Ω–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)
                                            video_id and  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å ID –≤–∏–¥–µ–æ
                                            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–±–æ—Ä–Ω–∏–∫–∏, –Ω–∞—Ä–µ–∑–∫–∏, –æ–±–∑–æ—Ä—ã
                                            'mix' not in title and 
                                            'compilation' not in title and
                                            'collection' not in title and
                                            'best of' not in title and
                                            'greatest hits' not in title and
                                            'remix' not in title and
                                            'cover' not in title and
                                            'karaoke' not in title and
                                            'instrumental' not in title and
                                            'live' not in title and  # –ò–∑–±–µ–≥–∞–µ–º –∂–∏–≤—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
                                            'concert' not in title and
                                            'performance' not in title and
                                            # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±–∑–æ—Ä—ã, –∏–Ω—Ç–µ—Ä–≤—å—é, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª–∫–∏
                                            'review' not in title and
                                            'interview' not in title and
                                            'documentary' not in title and
                                            'analysis' not in title and
                                            'reaction' not in title and
                                            'commentary' not in title and
                                            'podcast' not in title and
                                            'news' not in title and
                                            'behind the scenes' not in title and
                                            'making of' not in title and
                                            'studio session' not in title and
                                            # –ò—Å–∫–ª—é—á–∞–µ–º –∫–ª–∏–ø—ã —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –æ–±–∑–æ—Ä—ã)
                                            len(title) < 100 and
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                            any(keyword in title for keyword in [
                                                'music', 'song', 'track', 'audio', 'beat', 'melody',
                                                'rap', 'hip hop', 'pop', 'rock', 'jazz', 'blues',
                                                'electronic', 'folk', 'country', 'reggae', 'alternative'
                                            ]) and
                                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–∫–ª—é—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –æ–±–∑–æ—Ä—ã
                                            not any(pattern in title for pattern in [
                                                'vs ', 'versus', 'comparison', 'review', 'analysis',
                                                'breakdown', 'explanation', 'tutorial', 'guide',
                                                'how to', 'what is', 'why ', 'when ', 'where ',
                                                'interview', 'podcast', 'news', 'update', 'announcement'
                                            ])):
                                            
                                            valid_results.append(result)
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (1-5) –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                                    if valid_results:
                                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É randrange - –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                        min_count = min(2, len(valid_results))
                                        max_count = min(5, len(valid_results))
                                        
                                        if min_count <= max_count:
                                            num_to_add = random.randint(min_count, max_count)
                                            selected_results = random.sample(valid_results, num_to_add)
                                            all_results.extend(selected_results)
                                            logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {num_to_add} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy})")
                                            query_success = True
                                            break
                                        else:
                                            logging.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞: {len(valid_results)}")
                                    else:
                                        logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy})")
                                else:
                                    logging.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy})")
                                    
                            except Exception as search_error:
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}): {search_error}")
                                continue
                                
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è yt-dlp –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}): {e}")
                        continue
                
                if not query_success:
                    logging.warning(f"‚ö†Ô∏è –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
                        
            except Exception as e:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        unique_results = []
        seen_ids = set()
        
        for result in all_results:
            if result and result.get('id') and result['id'] not in seen_ids:
                unique_results.append(result)
                seen_ids.add(result['id'])
        
        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É")
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        random.shuffle(unique_results)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
        return unique_results[:limit]
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä—É: {e}")
        return []

def search_artist_tracks(artist_name, limit=25):
    """–ò—â–µ—Ç —Ç—Ä–µ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ YouTube –∏ SoundCloud"""
    try:
        logging.info(f"üë§ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {artist_name}")
        
        # –ü–æ–∏—Å–∫ –Ω–∞ YouTube
        ydl_opts = {
            'format': 'bestaudio/best',
            'noplaylist': True,
            'quiet': True,
            'cookiefile': COOKIES_FILE if os.path.exists(COOKIES_FILE) else None,
            'extract_flat': True,
            'no_warnings': True,
            'ignoreerrors': True
        }
        
        youtube_results = []
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ YouTube
            search_query = f"ytsearch{limit + 5}:{artist_name} music"
            info = ydl.extract_info(search_query, download=False)
            
            if info and info.get("entries"):
                results = info.get("entries", [])
                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–∫–æ–≤ –Ω–∞ YouTube –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã YouTube
                for result in results:
                    if not result:
                        continue
                        
                    title = result.get('title', '').lower()
                    duration = result.get('duration', 0)
                    video_id = result.get('id')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–∫
                    if (duration and duration > 60 and  # –¢—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã
                        duration < 900 and  # –ò –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–Ω–µ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç)
                        'mix' not in title and 
                        'compilation' not in title and
                        'collection' not in title and
                        'best of' not in title and
                        'greatest hits' not in title and
                        'karaoke' not in title and
                        'instrumental' not in title and
                        'live' not in title and  # –ò–∑–±–µ–≥–∞–µ–º –∂–∏–≤—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
                        'concert' not in title and
                        'performance' not in title and
                        video_id):  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å ID –≤–∏–¥–µ–æ
                        
                        result['source'] = 'yt'  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                        youtube_results.append(result)
        
        # –ü–æ–∏—Å–∫ –Ω–∞ SoundCloud
        soundcloud_results = []
        try:
            ydl_opts_sc = {
                'format': 'bestaudio/best',
                'noplaylist': True,
                'quiet': True,
                'extract_flat': True,
                'no_warnings': True,
                'ignoreerrors': True,
                'timeout': 30,
                'retries': 3,
            }
            
            with yt_dlp.YoutubeDL(ydl_opts_sc) as ydl:
                # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ SoundCloud
                search_query_sc = f"scsearch{limit + 5}:{artist_name}"
                info_sc = ydl.extract_info(search_query_sc, download=False)
                
                if info_sc and info_sc.get("entries"):
                    results_sc = info_sc.get("entries", [])
                    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results_sc)} —Ç—Ä–µ–∫–æ–≤ –Ω–∞ SoundCloud –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}")
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SoundCloud
                    for result in results_sc:
                        if not result:
                            continue
                            
                        title = result.get('title', '').lower()
                        duration = result.get('duration', 0)
                        url = result.get('url', '')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–∫
                        if (duration and duration > 60 and  # –¢—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã
                            duration < 900 and  # –ò –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–Ω–µ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç)
                            'mix' not in title and 
                            'compilation' not in title and
                            'collection' not in title and
                            'best of' not in title and
                            'greatest hits' not in title and
                            'karaoke' not in title and
                            'instrumental' not in title and
                            'live' not in title and  # –ò–∑–±–µ–≥–∞–µ–º –∂–∏–≤—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
                            'concert' not in title and
                            'performance' not in title and
                            url and 'soundcloud.com' in url):  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ SoundCloud
                            
                            result['source'] = 'sc'  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                            soundcloud_results.append(result)
        except Exception as sc_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ SoundCloud –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}: {sc_error}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results = youtube_results + soundcloud_results
        
        if not all_results:
            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist_name}' –Ω–∞ –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö")
            return []
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID (YouTube) –∏ URL (SoundCloud)
        unique_results = []
        seen_ids = set()
        seen_urls = set()
        
        for result in all_results:
            if result.get('source') == 'yt' and result.get('id'):
                if result['id'] not in seen_ids:
                    unique_results.append(result)
                    seen_ids.add(result['id'])
            elif result.get('source') == 'sc' and result.get('url'):
                if result['url'] not in seen_urls:
                    unique_results.append(result)
                    seen_urls.add(result['url'])
        
        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} (YouTube: {len(youtube_results)}, SoundCloud: {len(soundcloud_results)})")
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        random.shuffle(unique_results)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
        return unique_results[:limit]
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}: {e}")
        return []

@dp.callback_query(F.data.startswith("genre:"))
async def handle_genre_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
    genre_name = callback.data.split(":", 1)[1]
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
    if not is_premium_user(user_id, username):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return
    
    logging.info(f"üé≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∂–∞–Ω—Ä: {genre_name}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –ø–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∏—Å—å
        await callback.message.edit_text(
            f"üîç **–ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
            "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞—é –∏—Ö –¥–ª—è –≤–∞—Å...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
    except Exception as edit_error:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.answer(
                f"üîç **–ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
                "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞—é –∏—Ö –¥–ª—è –≤–∞—Å...\n"
                "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode="Markdown"
            )
        except Exception as send_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
            return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
        genres = get_randomized_genres()
        genre_queries = genres.get(genre_name, [])
        
        if not genre_queries:
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞**\n\n"
                f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∂–∞–Ω—Ä–∞ {genre_name}.\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–æ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤ (15-25 –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
        random_limit = random.randint(15, 25)
        logging.info(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {random_limit}")
        
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä—É
        try:
            results = await asyncio.to_thread(search_genre_tracks, genre_queries, random_limit)
            
        except Exception as search_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä—É {genre_name}: {search_error}")
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞**\n\n"
                f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É {genre_name}.\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"genre:{genre_name}")],
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
            return
        
        if not results:
            await callback.message.edit_text(
                f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                f"üö´ –ü–æ –∂–∞–Ω—Ä—É {genre_name} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await callback.message.edit_text(
                f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
                "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
                "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode="Markdown"
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ: {edit_error}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
        downloaded_tracks = []
        failed_tracks = []
        
        for i, track in enumerate(results, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await callback.message.edit_text(
                        f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ {i}/{len(results)} –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
                        f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
                        "üíæ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...",
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                url = f"https://www.youtube.com/watch?v={track['id']}"
                
                try:
                    download_task = asyncio.create_task(
                        download_track_from_url_for_genre(user_id, url)
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue
                
                if filename:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            # –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        downloaded_tracks.append({
                            'filename': filename,
                            'title': track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'duration': track.get('duration', 0),
                            'size_mb': file_size_mb
                        })
                    except Exception as size_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {size_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞)")
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
                    try:
                        await callback.message.answer_audio(
                            types.FSInputFile(filename),
                            title=track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            performer=f"–ñ–∞–Ω—Ä: {genre_name}",
                            duration=track.get('duration', 0)
                        )
                        logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {audio_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        try:
                            await callback.message.answer_document(
                                types.FSInputFile(filename),
                                caption=f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\nüé≠ –ñ–∞–Ω—Ä: {genre_name}"
                            )
                            logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        except Exception as doc_error:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {doc_error}")
                            failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            continue
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                else:
                    failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {e}")
                failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_count = len(downloaded_tracks)
        failed_count = len(failed_tracks)
        
        message_text = f"‚úÖ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        message_text += f"üéµ **–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {success_count} —Ç—Ä–µ–∫–æ–≤\n"
        
        if success_count > 0:
            total_size = sum(track.get('size_mb', 0) for track in downloaded_tracks)
            message_text += f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.1f} MB\n\n"
        
        if failed_count > 0:
            message_text += f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:** {failed_count} —Ç—Ä–µ–∫–æ–≤\n\n"
            message_text += "üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å:\n"
            message_text += "‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ YouTube\n"
            message_text += "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            message_text += "‚Ä¢ –ó–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏\n"
            message_text += "‚Ä¢ –ü—Ä–µ–≤—ã—Å–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
        
        message_text += "üéµ –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        message_text += "üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n\n"
        message_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message_text += "‚Ä¢ –°–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å\n"
        message_text += "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä\n"
        message_text += "‚Ä¢ üé≤ **–ù–∞–∂–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∂–µ –∂–∞–Ω—Ä –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤!**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        keyboard_buttons = []
        
        if failed_count > 0:
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"genre:{genre_name}")])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üé≤ –ï—â–µ —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞", callback_data=f"genre:{genre_name}")],
            [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await callback.message.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except Exception as send_error:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
        
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä—É {genre_name}: {e}")
        
        try:
            await callback.message.edit_text(
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}.\n"
                f"üîç –û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"genre:{genre_name}")],
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
        except Exception as final_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {final_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∂–∞–Ω—Ä—É {genre_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                    ])
                )
            except Exception as last_error:
                logging.error(f"‚ùå –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {last_error}")

@dp.callback_query(F.data == "show_genres")
async def show_genres_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ —á–µ—Ä–µ–∑ callback"""
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
    if not is_premium_user(user_id, username):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return
    
    genres = get_genres()
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏ (–ø–æ –¥–≤–æ–µ –≤ —Ä—è–¥)
    keyboard = []
    genre_list = list(genres.keys())
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∂–∞–Ω—Ä—ã –ø–æ –¥–≤–æ–µ
    for i in range(0, len(genre_list), 2):
        row = [InlineKeyboardButton(text=genre_list[i], callback_data=f"genre:{genre_list[i]}")]
        if i + 1 < len(genre_list):
            row.append(InlineKeyboardButton(text=genre_list[i + 1], callback_data=f"genre:{genre_list[i + 1]}"))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üé≠ **–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏:**\n\n"
        "üéµ –Ø –Ω–∞–π–¥—É –∏ —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂—É –¥–ª—è –≤–∞—Å 8-12 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞!\n\n"
        "üí° –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∂–∞–Ω—Ä–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
        "‚Ä¢ üé≤ **–ö–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–µ–∫–∏!**\n\n"
        "üîÑ **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∂–∞–Ω—Ä –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤!**",
        parse_mode="Markdown",
        reply_markup=kb
    )







@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ inline-–º–µ–Ω—é"""
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—é
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png")
            ),
            reply_markup=main_menu
        )
    except Exception as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png")
                ),
                reply_markup=main_menu
            )
        except Exception as photo_error:
            await callback.message.edit_text("üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.callback_query(F.data == "search_artist_again")
async def search_artist_again_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
    if not is_premium_user(user_id, username):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return
    
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="üë§ **–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é**\n\n"
                        "üéµ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã, —á—å—é –º—É–∑—ã–∫—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n\n"
                        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
                        "‚Ä¢ Eminem\n"
                        "‚Ä¢ Queen\n"
                        "‚Ä¢ The Beatles\n"
                        "‚Ä¢ Drake\n"
                        "‚Ä¢ Coldplay\n\n"
                        "üîç –Ø –Ω–∞–π–¥—É –∏ –∑–∞–≥—Ä—É–∂—É –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!"
            ),
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
            ])
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text(
            "üë§ **–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é**\n\n"
            "üéµ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã, —á—å—é –º—É–∑—ã–∫—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ Eminem\n"
            "‚Ä¢ Queen\n"
            "‚Ä¢ The Beatles\n"
            "‚Ä¢ Drake\n"
            "‚Ä¢ Coldplay\n\n"
            "üîç –Ø –Ω–∞–π–¥—É –∏ –∑–∞–≥—Ä—É–∂—É –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
            ])
        )
    await state.set_state(SearchStates.waiting_for_artist)

@dp.callback_query(F.data.startswith("search_artist_retry:"))
async def search_artist_retry_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    artist_name = callback.data.split(":", 1)[1]
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
    if not is_premium_user(user_id, username):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return
    
    logging.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{artist_name}'")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    try:
        search_msg = await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption=f"üîÑ **–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                        "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ YouTube...\n"
                        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            ),
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        search_msg = await callback.message.edit_text(
            f"üîÑ **–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
            "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ YouTube...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
    
    try:
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        results = await asyncio.to_thread(search_artist_tracks, artist_name, 20)
        
        if not results:
            await search_msg.edit_text(
                f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                f"üö´ –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é '{artist_name}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ YouTube\n"
                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É\n\n"
                "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è\n"
                "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await search_msg.edit_text(
            f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
            "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
            "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        downloaded_tracks = []
        failed_tracks = []
        
        for i, track in enumerate(results, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await search_msg.edit_text(
                        f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ {i}/{len(results)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                        f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
                        "üíæ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...",
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
                url = f"https://www.youtube.com/watch?v={track['id']}"
                
                try:
                    download_task = asyncio.create_task(
                        download_track_from_url_for_genre(user_id, url)
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue
                
                if filename:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        downloaded_tracks.append({
                            'filename': filename,
                            'title': track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'duration': track.get('duration', 0),
                            'size_mb': file_size_mb
                        })
                    except Exception as size_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {size_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞)")
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                    try:
                        await callback.message.answer_audio(
                            types.FSInputFile(filename),
                            title=track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            performer=artist_name,
                            duration=track.get('duration', 0)
                        )
                        logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {audio_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        try:
                            await callback.message.answer_document(
                                types.FSInputFile(filename),
                                caption=f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist_name}"
                            )
                            logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        except Exception as doc_error:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {doc_error}")
                            failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            continue
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                else:
                    failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {e}")
                failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_count = len(downloaded_tracks)
        failed_count = len(failed_tracks)
        
        message_text = f"‚úÖ **–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        message_text += f"üéµ **–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {success_count} —Ç—Ä–µ–∫–æ–≤\n"
        
        if success_count > 0:
            total_size = sum(track.get('size_mb', 0) for track in downloaded_tracks)
            message_text += f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.1f} MB\n\n"
        
        if failed_count > 0:
            message_text += f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:** {failed_count} —Ç—Ä–µ–∫–æ–≤\n\n"
            message_text += "üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å:\n"
            message_text += "‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ YouTube\n"
            message_text += "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            message_text += "‚Ä¢ –ó–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏\n"
            message_text += "‚Ä¢ –ü—Ä–µ–≤—ã—Å–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
        
        message_text += "üéµ –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        message_text += "üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n\n"
        message_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message_text += "‚Ä¢ –°–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å\n"
        message_text += "‚Ä¢ –ò—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        message_text += "‚Ä¢ üé≤ **–ù–∞–∂–∞—Ç—å '–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º' –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞!**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        keyboard_buttons = []
        
        if failed_count > 0:
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await search_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except Exception as send_error:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
        
        logging.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {artist_name}: {e}")
        
        try:
            await search_msg.edit_text(
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}.\n"
                f"üîç –û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")],
                    [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                ])
            )
        except Exception as final_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {final_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="search_artist_again")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_premium")]
                    ])
                )
            except Exception as last_error:
                logging.error(f"‚ùå –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {last_error}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ç—Ä–µ–∫–æ–≤ —Å –ø–æ–º–µ—Ç–∫–æ–π ===
@dp.message(F.audio)
async def handle_forwarded_audio(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–º–µ—Ç–∫—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if message.forward_from:
        sender_name = message.forward_from.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–º–µ—Ç–∫—É
        caption = f"ÔøΩÔøΩ –û—Ç {sender_name}\n\n"
        if message.caption:
            caption += message.caption
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ —Å –ø–æ–º–µ—Ç–∫–æ–π
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            await message.answer_audio(
                audio=message.audio.file_id,
                caption=caption
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ main()")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if not bot or not dp:
            logging.error("‚ùå –ë–æ—Ç –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            raise RuntimeError("–ë–æ—Ç –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not API_TOKEN:
            logging.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        try:
            start_background_tasks()
            logging.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å
        
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        
        await dp.start_polling(bot, skip_updates=True)
        logging.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        raise

async def main_worker():
    """–í–µ—Ä—Å–∏—è main() –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ —Å webhook –¥–ª—è Render"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ main_worker() –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø–æ—Ç–æ–∫–µ")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if not bot or not dp:
            logging.error("‚ùå –ë–æ—Ç –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not API_TOKEN:
            logging.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        try:
            start_background_tasks()
            logging.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –≤ Render
        if os.environ.get('RENDER'):
            logging.info("üåê –ó–∞–ø—É—Å–∫ –≤ Render - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook")
            try:
                # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                service_url = os.environ.get('RENDER_EXTERNAL_URL')
                if service_url:
                    webhook_url = f"{service_url}/webhook"
                    logging.info(f"üîó –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook: {webhook_url}")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
                    await bot.set_webhook(url=webhook_url)
                    logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                    logging.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                    webhook_task = asyncio.create_task(webhook_update_processor())
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å–µ–º–∞—Ñ–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    cleanup_task = asyncio.create_task(cleanup_user_semaphores())
                    
                    # –í Render –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ webhook, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º polling
                    logging.info("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    
                    # –î–µ—Ä–∂–∏–º –ø–æ—Ç–æ–∫ –∂–∏–≤—ã–º –¥–ª—è webhook
                    while True:
                        await asyncio.sleep(1)
                else:
                    logging.warning("‚ö†Ô∏è RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ webhook")
                    # –î–µ—Ä–∂–∏–º –ø–æ—Ç–æ–∫ –∂–∏–≤—ã–º –¥–ª—è webhook
                    while True:
                        await asyncio.sleep(1)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
                # –í Render –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling, —Ç–æ–ª—å–∫–æ webhook
                while True:
                    await asyncio.sleep(1)
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
            logging.info("üíª –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º polling")
            await dp.start_polling(bot, skip_updates=True)
        
        logging.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø–æ—Ç–æ–∫–µ")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main_worker(): {e}")
        return

# –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –æ–Ω–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ

@dp.callback_query(F.data.startswith("check_yoomoney_"))
async def check_yoomoney_payment_callback(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooMoney"""
    user_id = callback.data.split("_")[-1]
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã YooMoney –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
        payment_confirmed = await check_yoomoney_payment(user_id)
        
        if payment_confirmed:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
            if add_premium_user(user_id, username):
                success_message = (
                    "üéâ **–û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!**\n\n"
                    "üíé **–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
                    "üöÄ **–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å:**\n"
                    "‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤\n"
                    "‚Ä¢ üéµ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞\n"
                    "‚Ä¢ üé≠ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
                    "‚Ä¢ üíæ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n\n"
                    "üéµ **–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º—É–∑—ã–∫–æ–π!**"
                )
                
                await callback.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=types.FSInputFile("bear.png"),
                        caption=success_message
                    ),
                    reply_markup=main_menu
                )
                
                await callback.answer("‚úÖ –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
                logging.info(f"‚úÖ –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ YooMoney")
                
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
        else:
            # –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
            await callback.answer(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã.", 
                show_alert=True
            )
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã YooMoney: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.callback_query(F.data.startswith("check_payment:"))
async def check_payment_callback(callback: types.CallbackQuery):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TON –ø–ª–∞—Ç–µ–∂–∞"""
    payment_code = callback.data.split(":")[1]
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    await callback.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É...", show_alert=False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TON –ø–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    payment_found = await check_ton_payment(user_id)
    
    if payment_found:
        # –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º
        success = add_premium_user(user_id, username)
        if success:
            success_message = (
                "‚úÖ **–û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!**\n\n"
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                "**–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:**\n"
    
                "‚Ä¢ üë§ –ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º\n\n"
                "**–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** 30 –¥–Ω–µ–π\n"
                "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–º–∏—É–º!** üöÄ"
            )
            
            try:
                await callback.message.edit_text(success_message, parse_mode="Markdown")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await callback.message.answer(success_message, parse_mode="Markdown")
                await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback.message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
    else:
        # –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω
        not_found_message = (
            "‚ùå **–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
            "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª (–ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç)\n"
                            "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 USDT)\n"
            "‚Ä¢ –ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n"
            "‚Ä¢ –ü–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å\n\n"
            "**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.**"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        retry_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment:{payment_code}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main_from_buy_premium")]
        ])
        
        try:
            await callback.message.edit_text(not_found_message, reply_markup=retry_keyboard, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.answer(not_found_message, reply_markup=retry_keyboard, parse_mode="Markdown")
            await callback.message.delete()

@dp.message(Command("check_payments"))
async def check_payments_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    pass

@dp.message(Command("list_premium"))
async def list_premium_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": [], "subscriptions": {}})
        
        premium_users = premium_data.get("premium_users", [])
        premium_usernames = premium_data.get("premium_usernames", [])
        subscriptions = premium_data.get("subscriptions", {})
        
        if not premium_users and not premium_usernames:
            await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return
        
        response = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID
        if premium_users:
            response += "üÜî –ü–æ ID:\n"
            for user_id in premium_users:
                sub_info = subscriptions.get(user_id, {})
                if sub_info:
                    start_date = sub_info.get("start_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    expiry_date = sub_info.get("expiry_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    payment_method = sub_info.get("payment_method", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    response += f"‚Ä¢ ID: {user_id} | {payment_method}\n"
                    response += f"  üìÖ –°: {start_date[:10]} | –î–æ: {expiry_date[:10]}\n\n"
                else:
                    response += f"‚Ä¢ ID: `{user_id}` | –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username
        if premium_usernames:
            response += "üë§ –ü–æ username:\n"
            for username in premium_usernames:
                response += f"‚Ä¢ @{username}\n"
        
        await message.answer(response)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

@dp.message(Command("admin_info"))
async def admin_info_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    debug_response = "üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
    debug_response += f"üÜî –í–∞—à ID: {user_id}\n"
    debug_response += f"üë§ –í–∞—à username: {username}\n"
    debug_response += f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: {is_admin(user_id, username)}\n\n"
    
    if not is_admin(user_id, username):
        await message.answer(f"{debug_response}‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –í–∞—à username: {username}\n‚Ä¢ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: wtfguys4")
        return
    
    response = "üëë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ:\n\n"
    response += f"üÜî –í–∞—à ID: {user_id}\n"
    response += f"üë§ –í–∞—à username: {username}\n"

@dp.message(Command("list_users"))
async def list_users_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        global user_tracks
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning("‚ö†Ô∏è list_users_command: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        if not user_tracks:
            await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        premium_users = set(premium_data.get("premium_users", []))
        premium_usernames = set(premium_data.get("premium_usernames", []))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–µ–∫–æ–≤ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_users = sorted(user_tracks.items(), key=lambda x: len(x[1]) if x[1] else 0, reverse=True)
        
        response = f"üìã –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_tracks)}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—Ä–µ–∫–æ–≤
        top_users = sorted_users[:20]
        
        for i, (user_id, tracks) in enumerate(top_users, 1):
            track_count = len(tracks) if tracks else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in premium_users:
                status = "üíé –ü–†–ï–ú–ò–£–ú"
            elif any(username in premium_usernames for username in [user_id]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º username
                status = "üíé –ü–†–ï–ú–ò–£–ú"
            else:
                status = "üì± –û–ë–´–ß–ù–´–ô"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ MB
            total_size = 0
            if tracks:
                for track in tracks:
                    if isinstance(track, dict):
                        total_size += track.get('size_mb', 0)
                    else:
                        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                        total_size += 0
            
            response += f"{i}. üÜî {user_id} | {status}\n"
            response += f"   üéµ –¢—Ä–µ–∫–æ–≤: {track_count} | üíæ –†–∞–∑–º–µ—Ä: {total_size:.1f} MB\n\n"
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ 20, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if len(user_tracks) > 20:
            remaining_users = sorted_users[20:]
            total_tracks = sum(len(tracks) if tracks else 0 for _, tracks in user_tracks.items())
            total_size = sum(
                sum(track.get('size_mb', 0) if isinstance(track, dict) else 0 for track in tracks) 
                if tracks else 0 
                for _, tracks in user_tracks.items()
            )
            
            response += f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_tracks)}\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks}\n"
            response += f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} MB\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks / len(user_tracks):.1f}\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4000:
            parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for i, part in enumerate(parts, 1):
                await message.answer(f"üìã –ß–∞—Å—Ç—å {i}/{len(parts)}:\n\n{part}")
        else:
            await message.answer(response)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ list_users_command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

@dp.message(Command("user_stats"))
async def user_stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        global user_tracks
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning("‚ö†Ô∏è user_stats_command: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        if not user_tracks:
            await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": []})
        premium_users = set(premium_data.get("premium_users", []))
        premium_usernames = set(premium_data.get("premium_usernames", []))
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(user_tracks)
        premium_count = 0
        regular_count = 0
        total_tracks = 0
        total_size = 0
        users_with_tracks = 0
        
        for user_id, tracks in user_tracks.items():
            track_count = len(tracks) if tracks else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in premium_users or any(username in premium_usernames for username in [user_id]):
                premium_count += 1
            else:
                regular_count += 1
            
            if track_count > 0:
                users_with_tracks += 1
                total_tracks += track_count
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                for track in tracks:
                    if isinstance(track, dict):
                        total_size += track.get('size_mb', 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:\n\n"
        response += f"üë• **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        response += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–µ–∫–∞–º–∏: {users_with_tracks}\n"
        response += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ç—Ä–µ–∫–æ–≤: {total_users - users_with_tracks}\n\n"
        
        response += f"üíé **–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        response += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {premium_count}\n"
        response += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {(premium_count / total_users * 100):.1f}%\n\n"
        
        response += f"üì± **–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        response += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {regular_count}\n"
        response += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {(regular_count / total_users * 100):.1f}%\n\n"
        
        response += f"üéµ **–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks}\n"
        response += f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} MB\n"
        response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks / users_with_tracks:.1f}\n"
        response += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {total_size / users_with_tracks:.1f} MB\n\n"
        
        response += f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
        response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_with_tracks}\n"
        response += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(users_with_tracks / total_users * 100):.1f}%"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ user_stats_command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    response += f"üîê –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
    response += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    response += "‚Ä¢ /add_premium <user_id –∏–ª–∏ username> - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º\n"
    response += "‚Ä¢ /remove_premium <user_id –∏–ª–∏ username> - —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º\n"
    response += "‚Ä¢ /list_premium - —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    response += "‚Ä¢ /list_users - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞\n"
    response += "‚Ä¢ /user_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    response += "‚Ä¢ /admin_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ\n"
    response += "‚Ä¢ /reload_premium - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–º–∏—É–º\n"
    response += "‚Ä¢ /cleanup_status - —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏\n"
    response += "‚Ä¢ /cleanup_toggle - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É\n"
    response += "‚Ä¢ /cleanup_now - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å–µ–π—á–∞—Å\n"
    response += "‚Ä¢ /premium_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    response += "‚Ä¢ /premium_monitor - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–º–∏—É–º–∞\n"
    
    await message.answer(response)

@dp.message(Command("check_me"))
async def check_me_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    response = "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n\n"
    response += f"üÜî ID: {user_id}\n"
    response += f"üë§ Username: {username}\n"
    response += f"üìù –ò–º—è: {first_name}\n"
    response += f"üìù –§–∞–º–∏–ª–∏—è: {last_name}\n"
    response += f"üîê –ê–¥–º–∏–Ω: {is_admin(user_id, username)}\n\n"
    
    if is_admin(user_id, username):
        response += "‚úÖ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
        response += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        response += "‚Ä¢ /admin_info - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        response += "‚Ä¢ /add_premium - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º\n"
        response += "‚Ä¢ /remove_premium - —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º\n"
        response += "‚Ä¢ /list_premium - —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        response += "‚Ä¢ /list_users - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞\n"
        response += "‚Ä¢ /user_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        response += "‚Ä¢ /reload_premium - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        response += "‚Ä¢ /cleanup_status - —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏\n"
        response += "‚Ä¢ /cleanup_toggle - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—á–∏—Å—Ç–∫—É\n"
        response += "‚Ä¢ /cleanup_now - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å–µ–π—á–∞—Å\n"
        response += "‚Ä¢ /premium_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        response += "‚Ä¢ /premium_monitor - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–º–∏—É–º–∞\n"
    else:
        response += "‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        response += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤\n"
    
    await message.answer(response)

@dp.message(Command("reload_premium"))
async def reload_premium_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": [], "subscriptions": {}})
        
        response = "üîÑ –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–º–∏—É–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã:\n\n"
        response += f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID: {len(premium_data.get('premium_users', []))}\n"
        response += f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username: {len(premium_data.get('premium_usernames', []))}\n"
        response += f"üìä –ü–æ–¥–ø–∏—Å–æ–∫: {len(premium_data.get('subscriptions', {}))}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ username'–æ–≤
        usernames = premium_data.get('premium_usernames', [])
        if usernames:
            response += "üë§ Usernames:\n"
            for username in usernames:
                response += f"‚Ä¢ @{username}\n"
        
        await message.answer(response)
        logging.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} ({username}) –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–º–∏—É–º")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º: {e}")

# === –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–û–ô ===
@dp.message(Command("cleanup_status"))
async def cleanup_status_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ cache
        cache_dir = CACHE_DIR
        cache_info = "üìÅ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ cache:**\n\n"
        
        if os.path.exists(cache_dir):
            try:
                files = [f for f in os.listdir(cache_dir) if f.endswith('.mp3')]
                total_files = len(files)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
                total_size = 0
                for filename in files:
                    file_path = os.path.join(cache_dir, filename)
                    try:
                        total_size += os.path.getsize(file_path)
                    except:
                        pass
                
                total_size_mb = total_size / (1024 * 1024)
                
                cache_info += f"‚Ä¢ üìÇ –í—Å–µ–≥–æ MP3 —Ñ–∞–π–ª–æ–≤: {total_files}\n"
                cache_info += f"‚Ä¢ üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.2f} MB\n"
                cache_info += f"‚Ä¢ üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if AUTO_CLEANUP_ENABLED else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
                cache_info += f"‚Ä¢ ‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {AUTO_CLEANUP_DELAY} —Å–µ–∫\n"
                cache_info += f"‚Ä¢ üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if CLEANUP_LOGGING else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}\n\n"
                
                if total_files > 0:
                    cache_info += "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ñ–∞–π–ª–æ–≤:**\n"
                    for i, filename in enumerate(files[:10], 1):
                        file_path = os.path.join(cache_dir, filename)
                        try:
                            file_size = os.path.getsize(file_path)
                            file_size_mb = file_size / (1024 * 1024)
                            cache_info += f"{i}. {filename} ({file_size_mb:.2f} MB)\n"
                        except:
                            cache_info += f"{i}. {filename} (—Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω)\n"
                    
                    if total_files > 10:
                        cache_info += f"... –∏ –µ—â–µ {total_files - 10} —Ñ–∞–π–ª–æ–≤\n"
                else:
                    cache_info += "üìÇ –ü–∞–ø–∫–∞ cache –ø—É—Å—Ç–∞"
                    
            except Exception as e:
                cache_info += f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ cache: {e}"
        else:
            cache_info += "‚ùå –ü–∞–ø–∫–∞ cache –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        await message.answer(cache_info, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

@dp.message(Command("cleanup_toggle"))
async def cleanup_toggle_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        global AUTO_CLEANUP_ENABLED
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        AUTO_CLEANUP_ENABLED = not AUTO_CLEANUP_ENABLED
        
        status = "‚úÖ –≤–∫–ª—é—á–µ–Ω–∞" if AUTO_CLEANUP_ENABLED else "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        response = f"üßπ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ {status}**\n\n"
        response += f"**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        response += f"‚Ä¢ üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if AUTO_CLEANUP_ENABLED else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        response += f"‚Ä¢ ‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {AUTO_CLEANUP_DELAY} —Å–µ–∫\n"
        response += f"‚Ä¢ üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if CLEANUP_LOGGING else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}\n\n"
        
        if AUTO_CLEANUP_ENABLED:
            response += "‚úÖ –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        else:
            response += "‚ùå –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª—ã –ù–ï –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è"
        
        await message.answer(response, parse_mode="Markdown")
        logging.info(f"üßπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} ({username}) {'–≤–∫–ª—é—á–∏–ª' if AUTO_CLEANUP_ENABLED else '–≤—ã–∫–ª—é—á–∏–ª'} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏: {e}")

@dp.message(Command("cleanup_now"))
async def cleanup_now_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        await message.answer("üßπ –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        cleanup_orphaned_files()
        
        await message.answer("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–æ–π /cleanup_status")
        logging.info(f"üßπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—á–∏—Å—Ç–∫–∏: {e}")

@dp.message(Command("premium_stats"))
async def premium_stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–º–∏—É–º–µ
        premium_data = load_json(PREMIUM_USERS_FILE, {"premium_users": [], "premium_usernames": [], "subscriptions": {}})
        premium_users = set(premium_data.get("premium_users", []))
        premium_usernames = set(premium_data.get("premium_usernames", []))
        subscriptions = premium_data.get("subscriptions", {})
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
        global user_tracks
        if not user_tracks:
            await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_premium_users = len(premium_users) + len(premium_usernames)
        active_subscriptions = sum(1 for sub in subscriptions.values() if sub.get("active", False))
        expired_subscriptions = sum(1 for sub in subscriptions.values() if not sub.get("active", False))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
        premium_collections = []
        total_premium_tracks = 0
        total_premium_size = 0
        
        for user_id, tracks in user_tracks.items():
            if user_id in premium_users:
                track_count = len(tracks) if tracks else 0
                collection_size = 0
                
                if tracks:
                    for track in tracks:
                        if isinstance(track, dict):
                            collection_size += track.get('size_mb', 0)
                        else:
                            # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                            collection_size += 0
                
                premium_collections.append({
                    'user_id': user_id,
                    'track_count': track_count,
                    'size_mb': collection_size
                })
                
                total_premium_tracks += track_count
                total_premium_size += collection_size
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        premium_collections.sort(key=lambda x: x['size_mb'], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        response += f"üë• **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_premium_users}\n"
        response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n"
        response += f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {expired_subscriptions}\n\n"
        
        response += f"üéµ **–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ —É –ø—Ä–µ–º–∏—É–º: {total_premium_tracks}\n"
        response += f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–π: {total_premium_size:.1f} MB\n"
        response += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {total_premium_size / max(len(premium_collections), 1):.1f} MB\n\n"
        
        if premium_collections:
            response += f"üèÜ **–¢–æ–ø-10 –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É:**\n"
            for i, collection in enumerate(premium_collections[:10], 1):
                response += f"{i}. ID: {collection['user_id']} | {collection['track_count']} —Ç—Ä–µ–∫–æ–≤ | {collection['size_mb']:.1f} MB\n"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@dp.message(Command("premium_monitor"))
async def premium_monitor_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        await check_premium_expiry()
        await check_premium_files_integrity()
        
        await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–º–∏—É–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
        logging.info(f"üîç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–º–∏—É–º–∞")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

# === –§–£–ù–ö–¶–ò–ò –í–†–ï–ú–ï–ù–ù–û–ì–û –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –ò –£–î–ê–õ–ï–ù–ò–Ø ===
async def download_track_to_temp(user_id: str, url: str, title: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É cache/ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        url: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        title: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        
    Returns:
        –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        logging.info(f"üì• –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {title}")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_title = safe_title[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        timestamp = str(int(time.time()))
        filename = f"{safe_title}_{timestamp}.mp3"
        file_path = os.path.join(CACHE_DIR, filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ cache —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
        try:
            os.makedirs(CACHE_DIR, exist_ok=True)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
            test_file = os.path.join(CACHE_DIR, "test_write.tmp")
            with open(test_file, 'w') as f:
                f.write("test")
            os.remove(test_file)
            logging.info(f"‚úÖ –ü–∞–ø–∫–∞ cache –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {CACHE_DIR}")
        except Exception as cache_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ cache: {cache_error}")
            return None
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
        outtmpl = file_path.replace('.mp3', '.%(ext)s')
        logging.info(f"üîç –®–∞–±–ª–æ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {outtmpl}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ yt-dlp –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            import yt_dlp
            logging.info(f"‚úÖ yt-dlp –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–µ—Ä—Å–∏—è: {yt_dlp.version.__version__}")
        except ImportError:
            logging.error("‚ùå yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        except Exception as ytdlp_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ yt-dlp: {ytdlp_error}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MP3
        try:
            import subprocess
            result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                logging.info("‚úÖ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            else:
                logging.warning("‚ö†Ô∏è FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
        except Exception as ffmpeg_error:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å FFmpeg: {ffmpeg_error}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Semaphore –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        try:
            async with download_semaphore:
                loop = asyncio.get_running_loop()
                logging.info(f"üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ yt-dlp: {url}")
                fn_info = await loop.run_in_executor(yt_executor, _ydl_download_blocking, url, outtmpl, COOKIES_FILE, False)
        except Exception as executor_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ThreadPoolExecutor: {executor_error}")
            return None
        
        logging.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç yt-dlp: {fn_info} (—Ç–∏–ø: {type(fn_info)})")
        
        if not fn_info:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫: {title}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fn_info —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂–µ–º
        if not isinstance(fn_info, tuple) or len(fn_info) != 2:
            logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {type(fn_info)}")
            return None
            
        downloaded_file, info = fn_info
        logging.info(f"üîç –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Ñ–∞–π–ª={downloaded_file}, info={type(info)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞–ª—Å—è
        if not downloaded_file or not isinstance(downloaded_file, str):
            logging.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É: {downloaded_file}")
            return None
            
        logging.info(f"üìÅ –¢—Ä–µ–∫ —Å–∫–∞—á–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {downloaded_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        try:
            if not os.path.exists(downloaded_file):
                logging.error(f"‚ùå –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {downloaded_file}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                cache_dir = CACHE_DIR
                if os.path.exists(cache_dir):
                    cache_files = [f for f in os.listdir(cache_dir) if f.startswith(os.path.basename(file_path).split('_')[0])]
                    logging.info(f"üîç –í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ cache: {cache_files}")
                    
                    # –ò—â–µ–º —Ñ–∞–π–ª —Å –ª—é–±—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                    for cache_file in cache_files:
                        full_path = os.path.join(cache_dir, cache_file)
                        if os.path.exists(full_path) and os.path.getsize(full_path) > 0:
                            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª: {full_path}")
                            return full_path
                return None
                
            size_mb = os.path.getsize(downloaded_file) / (1024 * 1024)
            if size_mb > MAX_FILE_SIZE_MB:
                try:
                    os.remove(downloaded_file)
                    logging.warning(f"‚ùå –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {MAX_FILE_SIZE_MB}MB: {size_mb:.2f}MB")
                except:
                    pass
                return None
                
            logging.info(f"‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {downloaded_file} ({size_mb:.2f}MB)")
            return downloaded_file
            
        except Exception as size_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {size_error}")
            return None
            
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É {title}: {e}")
        return None

async def delete_temp_file(file_path: str) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            logging.info(f"üßπ –§–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω: {file_path}")
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        try:
            file_size = os.path.getsize(file_path)
            file_size_mb = file_size / (1024 * 1024)
        except Exception:
            file_size_mb = 0
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        os.remove(file_path)
        
        logging.info(f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path} ({file_size_mb:.2f} MB)")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False

# === –§–£–ù–ö–¶–ò–ò –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ô –û–ß–ï–†–ï–î–ò ===
async def add_to_download_queue(user_id: str, url: str, is_premium: bool = False, priority: int = 0):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not user_id or not url:
            logging.error("‚ùå add_to_download_queue: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return False
            
        if not isinstance(user_id, str) or not isinstance(url, str):
            logging.error("‚ùå add_to_download_queue: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if url in track_metadata_cache:
            logging.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {url}")
            cached_info = track_metadata_cache[url]
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if user_tracks is None:
                user_tracks = {}
            if str(user_id) not in user_tracks:
                user_tracks[str(user_id)] = []
            elif user_tracks[str(user_id)] is None:
                user_tracks[str(user_id)] = []
                
            user_tracks[str(user_id)].append(cached_info)
            save_tracks()
            
            logging.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –∏–∑ –∫—ç—à–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π
            logging.info(f"üíæ –î–æ–±–∞–≤–ª—è—é —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {url}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ª—É—á–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            success = await add_to_download_queue_fast(user_id, url, False)
        
        if success:
            logging.info(f"‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        return False

async def process_download_queue():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫ (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    global ACTIVE_DOWNLOADS
    
    while True:
        try:
            # –í –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –æ—á–µ—Ä–µ–¥—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –æ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            await asyncio.sleep(10)

async def execute_download_task(task_info: dict):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∑–∞–≥—Ä—É–∑–∫–∏ (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    global ACTIVE_DOWNLOADS
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not task_info or not isinstance(task_info, dict):
            logging.error("‚ùå execute_download_task: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞")
            return
            
        user_id = task_info.get('user_id')
        url = task_info.get('url')
        
        if not user_id or not url:
            logging.error("‚ùå execute_download_task: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        
        logging.info(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –∑–∞–≥—Ä—É–∑–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        
        # –í –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logging.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    finally:
        ACTIVE_DOWNLOADS = max(0, ACTIVE_DOWNLOADS - 1)  # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫—É —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å
        logging.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: {ACTIVE_DOWNLOADS}")

async def download_track_from_url_with_priority(user_id: str, url: str, is_premium: bool = False, add_to_collection: bool = True):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not user_id or not url:
            logging.error("‚ùå download_track_from_url_with_priority: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        try:
            ydl_opts = {
                'format': 'bestaudio/best',
                'quiet': True,
                'no_warnings': True,
                'ignoreerrors': True,
                'extract_flat': True,  # –¢–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                'timeout': 30,
                'retries': 3,
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                if not info:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ: {url}")
                    return None
                title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
        except Exception as info_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ: {info_error}")
            title = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        temp_file_path = await download_track_to_temp(user_id, url, title)
        
        if temp_file_path:
            logging.info(f"‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_file_path}")
            return temp_file_path
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {title}")
            return None
        
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø WEBHOOK ===
async def process_webhook_update(update_data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
    global last_webhook_update
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        last_webhook_update = update_data
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await webhook_update_queue.put(update_data)
        
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

async def webhook_update_processor():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    logging.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
    
    while True:
        try:
            # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            update_data = await webhook_update_queue.get()
            
            if update_data:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
                try:
                    await dp.feed_webhook_update(bot, update_data)
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                webhook_update_queue.task_done()
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        # –£–±—Ä–∞–ª–∏ –ø–∞—É–∑—É –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "set_wakeup_fd only works in main thread" in str(e):
            logging.warning("‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø–æ—Ç–æ–∫–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º asyncio.run")
        else:
            raise