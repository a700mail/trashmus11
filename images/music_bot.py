import logging
import os
import asyncio
import json
import time
import random
import secrets
import yt_dlp
import browser_cookie3
from http.cookiejar import MozillaCookieJar
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
try:
    from pydub import AudioSegment
    AUDIO_AVAILABLE = True
except ImportError:
    AUDIO_AVAILABLE = False
    logging.warning("üêª‚Äç‚ùÑÔ∏è –ú–æ–¥—É–ª—å pydub –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è YooMoney
try:
    from yoomoney_payment import create_simple_payment_url, verify_payment_by_label
    YOOMONEY_AVAILABLE = True
except ImportError:
    YOOMONEY_AVAILABLE = False
    logging.warning("üêª‚Äç‚ùÑÔ∏è –ú–æ–¥—É–ª—å YooMoney –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ YooMoney –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

import re
import urllib.parse
from functools import partial
import aiohttp
from datetime import datetime, timedelta
from collections import deque
from concurrent.futures import ThreadPoolExecutor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
    logging.info("üêª‚Äç‚ùÑÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
except ImportError:
    logging.warning("üêª‚Äç‚ùÑÔ∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
except Exception as e:
    logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: {e}")

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

MAX_FILE_SIZE_MB = 50
CACHE_DIR = "cache"
COOKIES_FILE = os.path.join(os.path.dirname(__file__), "cookies.txt")
TRACKS_FILE = os.path.join(os.path.dirname(__file__), "tracks.json")
SEARCH_CACHE_FILE = os.path.join(os.path.dirname(__file__), "search_cache.json")

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–ò–°–ö–ê ===
SOUNDCLOUD_SEARCH_LIMIT = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–∞ SoundCloud
YOUTUBE_SEARCH_LIMIT = 10      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube
SOUNDCLOUD_CACHE_PREFIX = "sc"  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫—ç—à–∞ SoundCloud

# === –ù–ê–°–¢–†–û–ô–ö–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò –¢–†–ï–ö–û–í ===
MIN_TRACK_DURATION = 60        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)
MAX_TRACK_DURATION = 600       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (10 –º–∏–Ω—É—Ç)

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ===
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")
if not PAYMENT_PROVIDER_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PAYMENT_PROVIDER_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

PAYMENT_AMOUNT = 100  # 1 USD –≤ —Ü–µ–Ω—Ç–∞—Ö (100 —Ü–µ–Ω—Ç–æ–≤ = 1 USD)
PAYMENT_CURRENCY = "USD"
PAYMENT_TITLE = "–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∫ Music Bot"
PAYMENT_DESCRIPTION = "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è (–∫–∞—Ä—Ç—ã Ammer)"

# === –ù–ê–°–¢–†–û–ô–ö–ò YOOMONEY ===
YOOMONEY_CLIENT_ID = os.getenv("YOOMONEY_CLIENT_ID")
if not YOOMONEY_CLIENT_ID:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOOMONEY_CLIENT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

YOOMONEY_CLIENT_SECRET = os.getenv("YOOMONEY_CLIENT_SECRET")
if not YOOMONEY_CLIENT_SECRET:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOOMONEY_CLIENT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

YOOMONEY_REDIRECT_URI = os.getenv("YOOMONEY_REDIRECT_URI")
if not YOOMONEY_REDIRECT_URI:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOOMONEY_REDIRECT_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

YOOMONEY_ACCOUNT = os.getenv("YOOMONEY_ACCOUNT")
if not YOOMONEY_ACCOUNT:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOOMONEY_ACCOUNT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

YOOMONEY_PAYMENT_AMOUNT = 100.0  # –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
YOOMONEY_ENABLED = True  # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å YooMoney

# === –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ü–õ–ê–¢–´ ===
CARD_NUMBER = os.getenv("CARD_NUMBER")  # –ø—Ä–∏–º–µ—Ä: XXXX XXXX XXXX XXXX
if not CARD_NUMBER:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è CARD_NUMBER –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

TON_WALLET = os.getenv("TON_WALLET")
if not TON_WALLET:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TON_WALLET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

PAYMENT_AMOUNT_USD = os.getenv("PAYMENT_AMOUNT_USD")
if not PAYMENT_AMOUNT_USD:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PAYMENT_AMOUNT_USD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

PAYMENT_AMOUNT_USDT = os.getenv("PAYMENT_AMOUNT_USDT")
if not PAYMENT_AMOUNT_USDT:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PAYMENT_AMOUNT_USDT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

TON_API_KEY = os.getenv("TON_API_KEY")
if not TON_API_KEY:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TON_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# === –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–ò ===
AUTO_CLEANUP_ENABLED = True  # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
AUTO_CLEANUP_DELAY = 1.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
CLEANUP_LOGGING = True  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—Å—Ç–∫–∏

ARTIST_FACTS_FILE = os.path.join(os.path.dirname(__file__), "artist_facts.json")
SEARCH_CACHE_TTL = 600
PAGE_SIZE = 10  # –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

# === –ù–ê–°–¢–†–û–ô–ö–ò –û–ß–ï–†–ï–î–ò ===
REGULAR_QUEUE = deque()  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
MAX_CONCURRENT_DOWNLOADS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
ACTIVE_DOWNLOADS = 0  # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–™–ï–ö–¢–´ –î–õ–Ø –ó–ê–ì–†–£–ó–û–ö ===
yt_executor = ThreadPoolExecutor(max_workers=5, thread_name_prefix="yt_downloader")
download_semaphore = asyncio.Semaphore(MAX_CONCURRENT_DOWNLOADS)

# === –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –§–û–ù–û–í–´–• –ó–ê–î–ê–ß ===
task_last_run = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏

# === –ù–ê–°–¢–†–û–ô–ö–ò –ê–ù–¢–ò–°–ü–ê–ú–ê ===
ANTISPAM_DELAY = 1.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —Å–µ–∫)
user_last_request = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
os.makedirs(CACHE_DIR, exist_ok=True)

# === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–ù–û–í–´–ú–ò –ó–ê–î–ê–ß–ê–ú–ò ===

async def run_periodic_task(task_name: str, coro_func, interval_sec: int, max_exec_time_sec: int = 300):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
    
    Args:
        task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        coro_func: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        interval_sec: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        max_exec_time_sec: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
    """
    global task_last_run
    
    while True:
        try:
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(interval_sec)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            start_time = time.time()
            logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {task_name}")
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                await asyncio.wait_for(coro_func(), timeout=max_exec_time_sec)
                
                # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                execution_time = time.time() - start_time
                task_last_run[task_name] = time.time()
                logging.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {execution_time:.2f} —Å–µ–∫")
                
            except asyncio.TimeoutError:
                # –ó–∞–¥–∞—á–∞ –∑–∞–≤–∏—Å–ª–∞
                logging.error(f"‚è∞ –ó–∞–¥–∞—á–∞ {task_name} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({max_exec_time_sec} —Å–µ–∫) –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")
                task_last_run[task_name] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∑–∞–≤–∏—Å–∞–Ω–∏—è
                
            except Exception as task_error:
                # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
                import traceback
                logging.error(f"‚ùå –ó–∞–¥–∞—á–∞ {task_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {task_error}")
                logging.error(f"üìã Traceback –¥–ª—è {task_name}:\n{traceback.format_exc()}")
                task_last_run[task_name] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
                
        except Exception as e:
            # –û—à–∏–±–∫–∞ –≤ —Å–∞–º–æ–π —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
            import traceback
            logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π {task_name}: {e}")
            logging.error(f"üìã Traceback –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è {task_name}:\n{traceback.format_exc()}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

async def log_task_status():
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —Ä–∞–∑ –≤ —á–∞—Å"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            
            current_time = time.time()
            logging.info("üìä === –°–¢–ê–¢–£–° –§–û–ù–û–í–´–• –ó–ê–î–ê–ß ===")
            
            if not task_last_run:
                logging.info("üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
            else:
                for task_name, last_run_time in task_last_run.items():
                    time_since_last_run = current_time - last_run_time
                    hours = int(time_since_last_run // 3600)
                    minutes = int((time_since_last_run % 3600) // 60)
                    
                    if time_since_last_run < 3600:
                        status = f"üü¢ {hours}—á {minutes}–º –Ω–∞–∑–∞–¥"
                    elif time_since_last_run < 7200:
                        status = f"üü° {hours}—á {minutes}–º –Ω–∞–∑–∞–¥"
                    else:
                        status = f"üî¥ {hours}—á {minutes}–º –Ω–∞–∑–∞–¥"
                    
                    logging.info(f"üìä {task_name}: {status}")
            
            logging.info("üìä === –ö–û–ù–ï–¶ –°–¢–ê–¢–£–°–ê ===")
            
        except Exception as e:
            import traceback
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ log_task_status: {e}")
            logging.error(f"üìã Traceback:\n{traceback.format_exc()}")
            await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

# === –û–ë–ï–†–¢–ö–ò –î–õ–Ø –§–û–ù–û–í–´–• –ó–ê–î–ê–ß ===

async def task_antispam_cleanup():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
    cleanup_old_antispam_records()

async def task_file_cleanup():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    await cleanup_orphaned_files(batch_size=200)

async def task_cleanup_tasks():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–¥–∞—á –æ—á–∏—Å—Ç–∫–∏"""
    await cleanup_orphaned_files(batch_size=200)

# === –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê –§–û–ù–û–í–´–• –ó–ê–î–ê–ß (–ó–ê–ú–ï–ù–Ø–Æ–¢–°–Ø) ===

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∞–Ω—Ç–∏—Å–ø–∞–º–∞
async def start_antispam_cleanup():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            cleanup_old_antispam_records()
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –∞–Ω—Ç–∏—Å–ø–∞–º–∞: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤
async def start_file_cleanup():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            await cleanup_orphaned_files(batch_size=200)
        except Exception as e:
            if CLEANUP_LOGGING:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞)
def start_background_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        asyncio.create_task(run_periodic_task("–û—á–∏—Å—Ç–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞", task_antispam_cleanup, 3600))
        asyncio.create_task(run_periodic_task("–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤", task_file_cleanup, 3600))
        asyncio.create_task(run_periodic_task("–ó–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏", task_cleanup_tasks, 3600))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
        asyncio.create_task(log_task_status())
        
        logging.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        logging.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
        import traceback
        logging.error(f"üìã Traceback:\n{traceback.format_exc()}")

# === JSON —Ñ—É–Ω–∫—Ü–∏–∏ ===
def load_json(path, default):
    if not path:
        logging.warning("üêª‚Äç‚ùÑÔ∏è load_json: –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        return default
        
    if not os.path.exists(path):
        logging.info(f"üìÅ –§–∞–π–ª {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return default
        
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            if data is None:
                logging.warning(f"üêª‚Äç‚ùÑÔ∏è –§–∞–π–ª {path} —Å–æ–¥–µ—Ä–∂–∏—Ç None, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return default
            return data
    except json.JSONDecodeError as e:
        logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {path}: {e}")
        return default
    except Exception as e:
        logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {e}")
        return default

def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (MM:SS –∏–ª–∏ HH:MM:SS)"""
    if not seconds or seconds <= 0:
        return "??:??"
    
    try:
        seconds = int(seconds)
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        secs = seconds % 60
        
        if hours > 0:
            return f"{hours:02d}:{minutes:02d}:{secs:02d}"
        else:
            return f"{minutes:02d}:{secs:02d}"
    except (ValueError, TypeError):
        return "??:??"

def load_tracks_with_validation():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        tracks_data = load_json(TRACKS_FILE, {})
        
        if not tracks_data:
            logging.info("üìÅ –§–∞–π–ª —Ç—Ä–µ–∫–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –æ—á–∏—â–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        cleaned_tracks = {}
        total_tracks_before = 0
        total_tracks_after = 0
        
        for user_id, tracks in tracks_data.items():
            if not tracks:
                continue
                
            total_tracks_before += len(tracks)
            valid_tracks = []
            
            for track in tracks:
                if isinstance(track, dict):
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    url = track.get('url', '')
                    if url:
                        file_path = url.replace('file://', '')
                        if os.path.exists(file_path):
                            valid_tracks.append(track)
                        else:
                            title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                            original_url = track.get('original_url', '')
                            logging.warning(f"üóëÔ∏è –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ç—Ä–µ–∫–∞ {title}: {file_path}")
                            
                            if original_url and original_url.startswith('http'):
                                logging.info(f"üí° –¢—Ä–µ–∫ {title} –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: {original_url}")
                            else:
                                logging.warning(f"‚ö†Ô∏è –¢—Ä–µ–∫ {title} –ø–æ—Ç–µ—Ä—è–Ω - –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏")
                    else:
                        logging.warning(f"‚ö†Ô∏è –¢—Ä–µ–∫ –±–µ–∑ URL: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –≤—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º
                    logging.warning(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {track}")
            
            if valid_tracks:
                cleaned_tracks[user_id] = valid_tracks
                total_tracks_after += len(valid_tracks)
            else:
                logging.info(f"üë§ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤")
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Ç—Ä–µ–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if total_tracks_before != total_tracks_after:
            logging.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤: –±—ã–ª–æ {total_tracks_before}, —Å—Ç–∞–ª–æ {total_tracks_after}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try:
                with open(TRACKS_FILE, 'w', encoding='utf-8') as f:
                    json.dump(cleaned_tracks, f, ensure_ascii=False, indent=2)
                logging.info("üíæ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            except Exception as save_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {save_error}")
        
        return cleaned_tracks
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: {e}")
        return load_json(TRACKS_FILE, {})

def check_antispam(user_id: str) -> tuple[bool, float]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ, –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è).
    """
    try:
        current_time = time.time()
        last_request_time = user_last_request.get(str(user_id), 0)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if current_time - last_request_time >= ANTISPAM_DELAY:
            user_last_request[str(user_id)] = current_time
            return True, 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        time_until_next = ANTISPAM_DELAY - (current_time - last_request_time)
        return False, time_until_next
        
    except Exception as e:
        logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
        return True, 0.0

def cleanup_old_antispam_records():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
    try:
        current_time = time.time()
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        cutoff_time = current_time - 3600
        
        users_to_remove = []
        for user_id, last_time in user_last_request.items():
            if last_time < cutoff_time:
                users_to_remove.append(user_id)
        
        for user_id in users_to_remove:
            del user_last_request[user_id]
            
        if users_to_remove:
            logging.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(users_to_remove)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–Ω—Ç–∏—Å–ø–∞–º–∞")
            
    except Exception as e:
        logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞: {e}")

def is_admin(user_id: str, username: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ID –∏ username)
        admin_ids = ["123456789", "987654321"]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_usernames = ["wtfguys4"]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: user_id={user_id}, username={username}")
        logging.info(f"üîç –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ID: {admin_ids}")
        logging.info(f"üîç –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ username: {admin_usernames}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
        if user_id and str(user_id) in admin_ids:
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ –ø–æ ID")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
        if username and username in admin_usernames:
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ –ø–æ username")
            return True
            
        logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤")
        return False
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: {e}")
        return False

def save_json(path, data):
    if not path:
        logging.error("‚ùå save_json: –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        return False
        
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—É—Ç—å –Ω–µ –ø—É—Å—Ç–æ–π
        dir_path = os.path.dirname(path)
        if dir_path:
            os.makedirs(dir_path, exist_ok=True)
        
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {path}")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {e}")
        return False
        






# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
user_tracks = load_tracks_with_validation()
search_cache = load_json(SEARCH_CACHE_FILE, {})


artist_facts = load_json(ARTIST_FACTS_FILE, {"facts": {}})



def save_tracks():
    global user_tracks
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            logging.warning("üêª‚Äç‚ùÑÔ∏è save_tracks: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
            user_tracks = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
        if not isinstance(user_tracks, dict):
            logging.error(f"üå®Ô∏è save_tracks: user_tracks –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(user_tracks)}")
            return False
        
        save_json(TRACKS_FILE, user_tracks)
        logging.info("üêª‚Äç‚ùÑÔ∏è –¢—Ä–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return True
        
    except Exception as e:
        logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤: {e}")
        return False





# === –≠–∫—Å–ø–æ—Ä—Ç cookies (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
def export_cookies():
    try:
        if not COOKIES_FILE:
            logging.error("üå®Ô∏è export_cookies: COOKIES_FILE –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Chrome
        try:
            cj = browser_cookie3.chrome(domain_name=".youtube.com")
            if not cj:
                logging.warning("üêª‚Äç‚ùÑÔ∏è export_cookies: cookies Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        except Exception as chrome_error:
            logging.warning(f"üêª‚Äç‚ùÑÔ∏è export_cookies: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Chrome: {chrome_error}")
            return False
        
        cj_mozilla = MozillaCookieJar()
        cookie_count = 0
        
        for cookie in cj:
            try:
                cj_mozilla.set_cookie(cookie)
                cookie_count += 1
            except Exception as cookie_error:
                logging.warning(f"üêª‚Äç‚ùÑÔ∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ cookie: {cookie_error}")
                continue
        
        if cookie_count == 0:
            logging.warning("üêª‚Äç‚ùÑÔ∏è export_cookies: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ cookie")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(COOKIES_FILE), exist_ok=True)
        
        cj_mozilla.save(COOKIES_FILE, ignore_discard=True, ignore_expires=True)
        logging.info(f"üêª‚Äç‚ùÑÔ∏è Cookies —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {cookie_count} cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {COOKIES_FILE}")
        return True
        
    except Exception as e:
        logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ cookies: {e}")
        return False

# –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
try:
    export_cookies()
except Exception:
    pass

# –Ω–µ–±–æ–ª—å—à–æ–π diagnostic: –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ cookies.txt —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –∏–º–µ–Ω–∞
def check_cookies_file():
    try:
        if not COOKIES_FILE:
            logging.warning("üêª‚Äç‚ùÑÔ∏è check_cookies_file: COOKIES_FILE –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return
            
        if not os.path.exists(COOKIES_FILE):
            logging.warning("üìÅ Cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", COOKIES_FILE)
            return
            
        if os.path.getsize(COOKIES_FILE) == 0:
            logging.warning("üìÅ Cookies —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: %s", COOKIES_FILE)
            return
            
        try:
            cj = MozillaCookieJar()
            cj.load(COOKIES_FILE, ignore_discard=True, ignore_expires=True)
            
            if not cj:
                logging.warning("üêª‚Äç‚ùÑÔ∏è check_cookies_file: cookies –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return
                
            names = [c.name for c in cj if c.name]
            if not names:
                logging.warning("üêª‚Äç‚ùÑÔ∏è check_cookies_file: –∏–º–µ–Ω–∞ cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            logging.info("üç™ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã (%d): %s", len(names), ", ".join(names[:10]) + ("..." if len(names) > 10 else ""))
            
        except Exception as e:
            logging.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies.txt: %s", e)
            
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_cookies_file: {e}")

check_cookies_file()

# === –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–ò MP3 ===
async def auto_cleanup_file(file_path: str, delay: float = None, is_collection_track: bool = False, user_id: str = None):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ MP3 —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        is_collection_track: True –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–∫ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï —É–¥–∞–ª—è–µ–º)
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
    """
    if not AUTO_CLEANUP_ENABLED:
        if CLEANUP_LOGGING:
            logging.info(f"üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}")
        return False
    
    # –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_collection_track:
        if CLEANUP_LOGGING:
            logging.info(f"üßπ –§–∞–π–ª –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ù–ï –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω: {file_path}")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not file_path or not isinstance(file_path, str):
            if CLEANUP_LOGGING:
                logging.warning(f"üêª‚Äç‚ùÑÔ∏è auto_cleanup_file: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            if CLEANUP_LOGGING:
                logging.warning(f"üêª‚Äç‚ùÑÔ∏è auto_cleanup_file: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cleanup_delay = delay if delay is not None else AUTO_CLEANUP_DELAY
        
        if CLEANUP_LOGGING:
            logging.info(f"üßπ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ {file_path} —á–µ—Ä–µ–∑ {cleanup_delay} —Å–µ–∫.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
        asyncio.create_task(delayed_file_cleanup(file_path, cleanup_delay))
        return True
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False

async def delayed_file_cleanup(file_path: str, delay: float):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.
    """
    try:
        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(delay)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(file_path):
            if CLEANUP_LOGGING:
                logging.info(f"üßπ –§–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω: {file_path}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        try:
            file_size = os.path.getsize(file_path)
            file_size_mb = file_size / (1024 * 1024)
        except Exception:
            file_size_mb = 0
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        os.remove(file_path)
        
        if CLEANUP_LOGGING:
            logging.info(f"üßπ –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω: {file_path} ({file_size_mb:.2f} MB)")
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

async def cleanup_orphaned_files(batch_size: int = 200):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—á–∏—â–∞–µ—Ç "–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ" —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ cache, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ.
    
    Args:
        batch_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
    """
    try:
        if not AUTO_CLEANUP_ENABLED:
            return
        
        cache_dir = CACHE_DIR
        if not os.path.exists(cache_dir):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ cache
        cache_files = set()
        for filename in os.listdir(cache_dir):
            if filename.endswith('.mp3'):
                cache_files.add(os.path.join(cache_dir, filename))
        
        if not cache_files:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        used_files = set()
        global user_tracks
        
        if user_tracks:
            for user_id, tracks in user_tracks.items():
                if tracks:
                    for track in tracks:
                        if isinstance(track, dict):
                            file_path = track.get('url', '').replace('file://', '')
                        else:
                            file_path = track
                        
                        if file_path and os.path.exists(file_path):
                            used_files.add(file_path)
        
        # –ù–∞—Ö–æ–¥–∏–º –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã
        orphaned_files = list(cache_files - used_files)
        
        if not orphaned_files:
            return
        
        if CLEANUP_LOGGING:
            logging.info(f"üßπ –ù–∞–π–¥–µ–Ω–æ {len(orphaned_files)} –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
        files_to_process = orphaned_files[:batch_size]
        remaining_files = len(orphaned_files) - batch_size
        
        if remaining_files > 0:
            if CLEANUP_LOGGING:
                logging.info(f"üßπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(files_to_process)} —Ñ–∞–π–ª–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø—Ä–æ—Ö–æ–¥, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_files}")
        
        cleaned_count = 0
        total_size_freed = 0
        
        for i, orphaned_file in enumerate(files_to_process):
            try:
                if os.path.exists(orphaned_file):
                    file_size = os.path.getsize(orphaned_file)
                    os.remove(orphaned_file)
                    cleaned_count += 1
                    total_size_freed += file_size
                    
                    if CLEANUP_LOGGING:
                        logging.info(f"üßπ –£–¥–∞–ª–µ–Ω –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π —Ñ–∞–π–ª: {orphaned_file}")
                        
            except Exception as e:
                if CLEANUP_LOGGING:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å–∏—Ä–æ—Ç–µ–≤—à–µ–≥–æ —Ñ–∞–π–ª–∞ {orphaned_file}: {e}")
            
            # –ö–∞–∂–¥—ã–µ 20 —Ñ–∞–π–ª–æ–≤ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è event loop
            if (i + 1) % 20 == 0:
                await asyncio.sleep(0)
                if CLEANUP_LOGGING:
                    logging.info(f"üßπ –û—á–∏—Å—Ç–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1} –∏–∑ {len(files_to_process)} —Ñ–∞–π–ª–æ–≤")
        
        if CLEANUP_LOGGING and cleaned_count > 0:
            total_size_mb = total_size_freed / (1024 * 1024)
            logging.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {cleaned_count} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {total_size_mb:.2f} MB")
            
            if remaining_files > 0:
                logging.info(f"üßπ –í —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –µ—â–µ {remaining_files} —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")

def is_file_in_collection(file_path: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —á–∞—Å—Ç—å—é –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        global user_tracks
        
        if not user_tracks:
            return False
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        normalized_path = os.path.normpath(file_path)
        
        for user_id, tracks in user_tracks.items():
            if tracks:
                for track in tracks:
                    if isinstance(track, dict):
                        track_path = track.get('url', '').replace('file://', '')
                    else:
                        track_path = track
                    
                    if track_path and os.path.normpath(track_path) == normalized_path:
                        return True
        
        return False
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {file_path}: {e}")
        return False

async def check_file_integrity(file_path: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å MP3 —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª —Ü–µ–ª—ã–π, False –µ—Å–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
    """
    try:
        if not os.path.exists(file_path):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å
        try:
            with open(file_path, 'rb') as f:
                # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –±–∞–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ MP3
                header = f.read(10)
                if len(header) < 10:
                    return False
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ MP3 —Ñ–∞–π–ª (ID3 –∏–ª–∏ MPEG header)
                if not (header.startswith(b'ID3') or header.startswith(b'\xff\xfb') or header.startswith(b'\xff\xf3')):
                    return False
                    
        except Exception:
            return False
        
        return True
        
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False

async def auto_repair_damaged_file(file_path: str, user_id: str, original_url: str = None):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
    
    Args:
        file_path: –ü—É—Ç—å –∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        original_url: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    """
    try:
        if not original_url:
            if CLEANUP_LOGGING:
                logging.warning(f"üêª‚Äç‚ùÑÔ∏è –ù–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path}")
            return False
        
        if CLEANUP_LOGGING:
            logging.info(f"üîß –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
        except Exception as e:
            if CLEANUP_LOGGING:
                logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            if CLEANUP_LOGGING:
                logging.warning(f"üêª‚Äç‚ùÑÔ∏è –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞: {file_path}")
            return False
                
        except Exception as e:
            if CLEANUP_LOGGING:
                logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
            
    except Exception as e:
        if CLEANUP_LOGGING:
            logging.error(f"üå®Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False


            



# === –ö—ç—à –ø–æ–∏—Å–∫–∞ ===
def get_cached_search(query):
    try:
        if not query or not isinstance(query, str):
            logging.warning("üêª‚Äç‚ùÑÔ∏è get_cached_search: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ search_cache –Ω–µ None
        if search_cache is None:
            logging.warning("üêª‚Äç‚ùÑÔ∏è get_cached_search: search_cache –±—ã–ª None")
            return None
            
        query_l = query.lower()
        if query_l in search_cache:
            data = search_cache[query_l]
            if isinstance(data, dict) and "time" in data and "results" in data:
                if time.time() - data["time"] < SEARCH_CACHE_TTL:
                    return data["results"]
                else:
                    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
                    del search_cache[query_l]
                    logging.info(f"üêª‚Äç‚ùÑÔ∏è –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            else:
                # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—ç—à–∞
                logging.warning(f"üêª‚Äç‚ùÑÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—ç—à–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
                del search_cache[query_l]
        return None
        
    except Exception as e:
        logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –≤ get_cached_search: {e}")
        return None

def set_cached_search(query, results):
    global search_cache
    try:
        if not query or not isinstance(query, str):
            logging.warning("üêª‚Äç‚ùÑÔ∏è set_cached_search: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return False
            
        if not results or not isinstance(results, list):
            logging.warning("üêª‚Äç‚ùÑÔ∏è set_cached_search: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ search_cache –Ω–µ None
        if search_cache is None:
            logging.warning("üêª‚Äç‚ùÑÔ∏è set_cached_search: search_cache –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º")
            search_cache = {}
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 100)
        if len(search_cache) > 100:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            sorted_cache = sorted(search_cache.items(), key=lambda x: x[1].get("time", 0))
            items_to_remove = len(sorted_cache) - 80  # –û—Å—Ç–∞–≤–ª—è–µ–º 80 –∑–∞–ø–∏—Å–µ–π
            for i in range(items_to_remove):
                del search_cache[sorted_cache[i][0]]
            logging.info(f"üêª‚Äç‚ùÑÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à –ø–æ–∏—Å–∫–∞, —É–¥–∞–ª–µ–Ω–æ {items_to_remove} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        search_cache[query.lower()] = {"time": time.time(), "results": results}
        save_json(SEARCH_CACHE_FILE, search_cache)
        logging.info(f"üêª‚Äç‚ùÑÔ∏è –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        return True
        
    except Exception as e:
        logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –≤ set_cached_search: {e}")
        return False


# === –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò ===

def _ydl_download_blocking(url, outtmpl, cookies_file=None):
    """
    –ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ —á–µ—Ä–µ–∑ yt-dlp.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ ThreadPoolExecutor.
    
    Args:
        url: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (YouTube –∏–ª–∏ SoundCloud)
        outtmpl: –®–∞–±–ª–æ–Ω –¥–ª—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        cookies_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É cookies (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        tuple: (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ) –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        logging.info(f"üéµ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {url}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        is_soundcloud = 'soundcloud.com' in url.lower()
        source_text = "SoundCloud" if is_soundcloud else "YouTube"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': outtmpl,
            'noplaylist': True,
            'quiet': True,
            'no_warnings': True,
            'ignoreerrors': True,
            'timeout': 60,
            'retries': 3,
            'extractaudio': True,
            'audioformat': 'mp3',
            'audioquality': '192K',
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º cookies –¥–ª—è YouTube
        if cookies_file and os.path.exists(cookies_file) and 'youtube.com' in url.lower():
            ydl_opts['cookiefile'] = cookies_file
            logging.info(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –¥–ª—è YouTube: {cookies_file}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SoundCloud
        if is_soundcloud:
            ydl_opts['extractaudio'] = True
            ydl_opts['audioformat'] = 'mp3'
            ydl_opts['audioquality'] = '192K'
            logging.info(f"üéµ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SoundCloud: —Ñ–æ—Ä–º–∞—Ç MP3, –∫–∞—á–µ—Å—Ç–≤–æ 192K")
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            info = ydl.extract_info(url, download=False)
            if not info:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ: {url}")
                return None
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
            logging.info(f"üì• –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫ —Å {source_text}: {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            ydl.download([url])
            
            # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            downloaded_files = []
            for filename in os.listdir(CACHE_DIR):
                if filename.endswith('.mp3'):
                    file_path = os.path.join(CACHE_DIR, filename)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω (–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
                    if time.time() - os.path.getmtime(file_path) < 300:
                        downloaded_files.append(file_path)
            
            if not downloaded_files:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è: {url}")
                return None
            
            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            downloaded_file = max(downloaded_files, key=os.path.getmtime)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(downloaded_file)
            if file_size == 0:
                logging.error(f"‚ùå –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: {downloaded_file}")
                try:
                    os.remove(downloaded_file)
                except:
                    pass
                return None
            
            file_size_mb = file_size / (1024 * 1024)
            logging.info(f"‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {downloaded_file} ({file_size_mb:.2f} MB)")
            
            return downloaded_file, info
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
        return None


async def download_track_from_url(user_id, url):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ), –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Ç—å –≤ user_tracks.
    """
    global user_tracks
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not user_id or not url:
            logging.error("üå®Ô∏è download_track_from_url: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            logging.warning("üêª‚Äç‚ùÑÔ∏è download_track_from_url: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º")
            user_tracks = {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ (YouTube –∏–ª–∏ SoundCloud)
        is_soundcloud = 'soundcloud.com' in url.lower()
        source_text = "SoundCloud" if is_soundcloud else "YouTube"
        
        outtmpl = os.path.join(CACHE_DIR, '%(title)s.%(ext)s')
        logging.info(f"üéµ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç—Ä–µ–∫–∞ —Å {source_text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {url}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Semaphore –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        async with download_semaphore:
            # –≤—ã–ø–æ–ª–Ω–∏—Ç—å blocking ytdl –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤ —á–µ—Ä–µ–∑ ThreadPoolExecutor
            loop = asyncio.get_running_loop()
            fn_info = await loop.run_in_executor(yt_executor, _ydl_download_blocking, url, outtmpl, COOKIES_FILE)
            
        if not fn_info:
            logging.error(f"üå®Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ —Å {source_text}: {url}")
            return None
            
        filename, info = fn_info
        logging.info(f"üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Å {source_text}: {filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        try:
            size_mb = os.path.getsize(filename) / (1024 * 1024)
            if size_mb > MAX_FILE_SIZE_MB:
                try:
                    os.remove(filename)
                    logging.warning(f"üêª‚Äç‚ùÑÔ∏è –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {MAX_FILE_SIZE_MB}MB: {size_mb:.2f}MB")
                except:
                    pass
                return None
        except Exception as size_error:
            logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {size_error}")
            return None
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        track_info = {
            "title": os.path.basename(filename),
            "url": f"file://{filename}",
            "original_url": url,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            "size_mb": round(size_mb, 2),
            "needs_migration": False,
            "source": "sc" if is_soundcloud else "yt"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if str(user_id) not in user_tracks:
            user_tracks[str(user_id)] = []
        elif user_tracks[str(user_id)] is None:
            user_tracks[str(user_id)] = []
            
        user_tracks[str(user_id)].append(track_info)
        save_tracks()
        
        logging.info(f"üéµ –¢—Ä–µ–∫ —Å {source_text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {filename} ({size_mb:.2f}MB)")
        return filename
        
    except Exception as e:
        logging.exception(f"üå®Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def download_track_from_url_for_genre(user_id, url):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –¥–ª—è –∂–∞–Ω—Ä–æ–≤ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ), –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ user_tracks.
    """
    global user_tracks
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not user_id or not url:
            logging.error("üå®Ô∏è download_track_from_url_for_genre: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            logging.warning("üêª‚Äç‚ùÑÔ∏è download_track_from_url_for_genre: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º")
            user_tracks = {}
        
        outtmpl = os.path.join(CACHE_DIR, '%(title)s.%(ext)s')
        
        quality_text = "192 kbps"
        
        logging.info(f"üíæ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç—Ä–µ–∫–∞ –ø–æ –∂–∞–Ω—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {url} (–∫–∞—á–µ—Å—Ç–≤–æ: {quality_text})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º YouTube –∏ SoundCloud)
        if not url or ('youtube.com' not in url and 'soundcloud.com' not in url):
            logging.error(f"üå®Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {url}")
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Semaphore –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        async with download_semaphore:
            # –≤—ã–ø–æ–ª–Ω–∏—Ç—å blocking ytdl –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤ —á–µ—Ä–µ–∑ ThreadPoolExecutor
            try:
                loop = asyncio.get_running_loop()
                # –î–ª—è SoundCloud cookies –Ω–µ –Ω—É–∂–Ω—ã, –¥–ª—è YouTube –∏—Å–ø–æ–ª—å–∑—É–µ–º cookies
                cookies_file = COOKIES_FILE if 'youtube.com' in url and os.path.exists(COOKIES_FILE) else None
                fn_info = await loop.run_in_executor(yt_executor, _ydl_download_blocking, url, outtmpl, cookies_file)
            except Exception as ytdl_error:
                logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ yt-dlp –¥–ª—è {url}: {ytdl_error}")
                return None
            
        if not fn_info:
            logging.error(f"üå®Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ: {url}")
            return None
            
        filename, info = fn_info
        logging.info(f"üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        try:
            size_mb = os.path.getsize(filename) / (1024 * 1024)
            if size_mb > MAX_FILE_SIZE_MB:
                try:
                    os.remove(filename)
                    logging.warning(f"üêª‚Äç‚ùÑÔ∏è –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {MAX_FILE_SIZE_MB}MB: {size_mb:.2f}MB")
                except:
                    pass
                return None
        except Exception as size_error:
            logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {size_error}")
            return None
            
        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        logging.info(f"üêª‚Äç‚ùÑÔ∏è –¢—Ä–µ–∫ –ø–æ –∂–∞–Ω—Ä—É —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {filename} ({size_mb:.2f}MB, {quality_text})")
        return filename
        
    except Exception as e:
        logging.exception(f"üå®Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –ø–æ –∂–∞–Ω—Ä—É {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class SearchStates(StatesGroup):
    waiting_for_search = State()
    waiting_for_artist = State()
    waiting_for_album_search = State()
    waiting_for_soundcloud_query = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ SoundCloud



# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üêª‚Äç‚ùÑÔ∏è –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", callback_data="find_track"),
            InlineKeyboardButton(text="üå®Ô∏è –ú–æ—è –º—É–∑—ã–∫–∞", callback_data="my_music")
        ],
        [
            InlineKeyboardButton(text="‚ùÑÔ∏è –î–ª—è –≤–∞—Å", callback_data="for_you"),
            InlineKeyboardButton(text="üßä –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", callback_data="search_by_artist")
        ]
    ]
)









back_button = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
)

# === Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    logging.info(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—é
        await callback.message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_main_menu: {e}")
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            await callback.message.answer_photo(
                photo=types.FSInputFile("bear.png"),
                reply_markup=main_menu
            )
        except Exception as photo_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {photo_error}")
            await callback.message.answer("üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—é
    try:
        await message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            reply_markup=main_menu
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("üêª –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å YouTube.", reply_markup=main_menu)



@dp.callback_query(F.data == "show_genres")
async def show_genres(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤"""
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    

    
    genres = get_genres()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_genres() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏ (–ø–æ –¥–≤–æ–µ –≤ —Ä—è–¥)
    keyboard = []
    genre_list = list(genres.keys())
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∂–∞–Ω—Ä—ã –ø–æ –¥–≤–æ–µ
    for i in range(0, len(genre_list), 2):
        row = [InlineKeyboardButton(text=genre_list[i], callback_data=f"genre:{genre_list[i]}")]
        if i + 1 < len(genre_list):
            row.append(InlineKeyboardButton(text=genre_list[i + 1], callback_data=f"genre:{genre_list[i + 1]}"))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—é
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png")
            ),
            reply_markup=kb
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text(
            "üé≠ **–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏:**\n\n"
            "üéµ –Ø –Ω–∞–π–¥—É –∏ —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂—É –¥–ª—è –≤–∞—Å 8-12 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞!\n\n"
            "üí° –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∂–∞–Ω—Ä–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ\n"
            "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
            "‚Ä¢ üé≤ **–ö–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–µ–∫–∏!**\n\n"
            "üîÑ **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∂–∞–Ω—Ä –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤!**",
            parse_mode="Markdown",
            reply_markup=kb
        )

@dp.callback_query(F.data == "search_by_artist")
async def show_artist_search(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    

    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    await state.set_state(SearchStates.waiting_for_artist)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –æ –ø–æ–∏—Å–∫–µ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="üéµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã, —á—å–∏ —Ç—Ä–µ–∫–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏."
            ),
            reply_markup=back_button
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text(
            "üéµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã, —á—å–∏ —Ç—Ä–µ–∫–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.",
            parse_mode="Markdown",
            reply_markup=back_button
        )









# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
# @dp.message(F.text == "üíé –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ TON –∫–æ—à–µ–ª–µ–∫")
# async def pay_with_ton_wallet(message: types.Message):
#     pass

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
# @dp.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π")
# async def pay_with_card(message: types.Message):
#     pass

# –£–¥–∞–ª—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è callback

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
# @dp.message(F.text == "‚úÖ –Ø —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª")
# async def confirm_payment(message: types.Message):
#     pass







# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã ===
@dp.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    pass

@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    pass













# === –ü–æ–∏—Å–∫ ===
@dp.callback_query(F.data == "find_track")
async def ask_track_name(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="üêª‚Äç‚ùÑÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞"
            ),
            reply_markup=back_button
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text("üêª‚Äç‚ùÑÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞", reply_markup=back_button)
    
    await callback.answer()
    await state.set_state(SearchStates.waiting_for_search)

@dp.callback_query(F.data == "back_to_main")
async def back_from_track_search_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    await state.clear()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—é
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png")
            ),
            reply_markup=main_menu
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"üå®Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text("üêª‚Äç‚ùÑÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)







@dp.message(SearchStates.waiting_for_search, F.text)
async def search_music(message: types.Message, state: FSMContext):
    query = message.text.strip()
    user_id = str(message.from_user.id)
    await state.clear()

    logging.info(f"üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
    if not query:
        await message.answer("‚ùÑÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É.", reply_markup=main_menu)
        return

    yt_url_pattern = r"(https?://)?(www\.)?(youtube\.com|youtu\.be)/.+"
    if re.match(yt_url_pattern, query):
        # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ–º –≤ background (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª)
        asyncio.create_task(download_track_from_url(message.from_user.id, query))
        return await message.answer("‚ùÑÔ∏è –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞. –û–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ ¬´–ú–æ—è –º—É–∑—ã–∫–∞¬ª –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.", reply_markup=main_menu)

    search_msg = await message.answer("üîç –ü–æ–∏—Å–∫..")

    cached = get_cached_search(query)
    if cached:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫.." –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
        await search_msg.delete()
        return await send_search_results(message.chat.id, cached)
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–∞ YouTube –∏ SoundCloud –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        async def search_youtube(q):
            try:
                def search_block(q):
                    try:
                        ydl_opts = {
                            'format': 'bestaudio/best',
                            'noplaylist': True,
                            'quiet': True,
                            'no_warnings': True,
                            'ignoreerrors': True,
                            'extract_flat': True
                        }
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ cookies —Ñ–∞–π–ª–∞
                        if os.path.exists(COOKIES_FILE):
                            ydl_opts['cookiefile'] = COOKIES_FILE
                            logging.info(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies —Ñ–∞–π–ª: {COOKIES_FILE}")
                        else:
                            logging.warning("‚ö†Ô∏è Cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
                        
                        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                            result = ydl.extract_info(f"ytsearch{YOUTUBE_SEARCH_LIMIT}:{q}", download=False)
                            if not result:
                                logging.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ YouTube –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{q}'")
                                return None
                            return result
                    except Exception as search_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ search_block YouTube –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{q}': {search_error}")
                        return None
                
                return await asyncio.to_thread(search_block, q)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ YouTube: {e}")
                return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –Ω–∞ –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        youtube_task = asyncio.create_task(search_youtube(query))
        soundcloud_task = asyncio.create_task(search_soundcloud(query))
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        youtube_info, soundcloud_results = await asyncio.gather(
            youtube_task, soundcloud_task, return_exceptions=True
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã YouTube
        youtube_results = []
        if isinstance(youtube_info, Exception):
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ YouTube: {youtube_info}")
        elif youtube_info:
            results = youtube_info.get("entries", [])
            if results:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ç—Ä–µ–∫–∏ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                for result in results:
                    if result and result.get('id') and result.get('title'):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
                        duration = result.get('duration', 0)
                        if duration:
                            if duration < MIN_TRACK_DURATION:  # –ú–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã
                                logging.info(f"‚è±Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º YouTube —Ç—Ä–µ–∫ '{result.get('title')}' - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration} —Å–µ–∫ (< 1 –º–∏–Ω)")
                                continue
                            if duration > MAX_TRACK_DURATION:  # –ë–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç
                                logging.info(f"‚è±Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º YouTube —Ç—Ä–µ–∫ '{result.get('title')}' - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration} —Å–µ–∫ (> 10 –º–∏–Ω)")
                                continue
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                        result['source'] = 'yt'
                        youtube_results.append(result)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SoundCloud
        soundcloud_processed = []
        if isinstance(soundcloud_results, Exception):
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ SoundCloud: {soundcloud_results}")
        elif soundcloud_results:
            for result in soundcloud_results:
                if result and result.get('url') and result.get('title'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
                    duration = result.get('duration', 0)
                if duration:
                    if duration < MIN_TRACK_DURATION:  # –ú–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã
                        logging.info(f"‚è±Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º SoundCloud —Ç—Ä–µ–∫ '{result.get('title')}' - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration} —Å–µ–∫ (< 1 –º–∏–Ω)")
                        continue
                    if duration > MAX_TRACK_DURATION:  # –ë–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç
                        logging.info(f"‚è±Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º SoundCloud —Ç—Ä–µ–∫ '{result.get('title')}' - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration} —Å–µ–∫ (> 10 –º–∏–Ω)")
                        continue
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                    result['source'] = 'sc'
                    soundcloud_processed.append(result)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞—è –ª—É—á—à–∏–µ —Å –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        # –õ–æ–≥–∏–∫–∞: YouTube (3) + SoundCloud (2) = 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–∫—Å–∏–º—É–º
        final_results = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã YouTube (–¥–æ 3)
        youtube_top = youtube_results[:3]
        final_results.extend(youtube_top)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SoundCloud (–¥–æ 2, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç 5)
        soundcloud_top = soundcloud_processed[:2]
        final_results.extend(soundcloud_top)
        
        # –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        # –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
        if len(final_results) < 5:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è YouTube —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            remaining_youtube = youtube_results[3:5-len(final_results)]
            final_results.extend(remaining_youtube)
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–µ–Ω—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è SoundCloud
            if len(final_results) < 5:
                remaining_soundcloud = soundcloud_processed[2:5-len(final_results)]
                final_results.extend(remaining_soundcloud)
        
        if not final_results:
            await search_msg.delete()
            await message.answer("‚ùÑÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=main_menu)
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫.." –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await search_msg.delete()
        
        logging.info(f"üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(final_results)} —Ç—Ä–µ–∫–æ–≤ (YouTube: {len(youtube_results)}, SoundCloud: {len(soundcloud_processed)})")
        logging.info(f"üîç –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_results[0] if final_results else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'}")
        logging.info(f"üîç –¢–∏–ø –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(final_results[0]) if final_results else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'}")
        logging.info(f"üîç –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {list(final_results[0].keys()) if final_results else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'}")
            
        set_cached_search(query, final_results)
        await send_search_results(message.chat.id, final_results)
        
    except Exception as e:
        logging.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùÑÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.", reply_markup=main_menu)



@dp.message(SearchStates.waiting_for_artist, F.text)
async def search_by_artist_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    artist_name = message.text.strip()
    user_id = str(message.from_user.id)
    await state.clear()

    logging.info(f"üë§ –ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{artist_name}'")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    try:
        search_msg = await message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            caption=f"üîç **–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                    "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ SoundCloud...\n"
                    "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        search_msg = await message.answer(
            f"üîç **–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
            "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ SoundCloud...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )

    try:
                # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        results = await asyncio.to_thread(search_artist_tracks, artist_name, 10)
        
        if not results:
            try:
                await search_msg.edit_media(
                    media=types.InputMediaPhoto(
                        media=types.FSInputFile("bear.png"),
                        caption=f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                                f"üö´ –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é '{artist_name}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ SoundCloud.\n"
                                "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏\n"
                                "‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ SoundCloud\n"
                                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É\n\n"
                                "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è\n"
                                "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"
                    ),
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await search_msg.edit_text(
                    f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                    f"üö´ –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é '{artist_name}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ SoundCloud.\n"
                    "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ SoundCloud\n"
                                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É\n\n"
                                "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è\n"
                                "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await search_msg.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png"),
                    caption=f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                            "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
                            "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                ),
                parse_mode="Markdown"
            )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await search_msg.edit_text(
                f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
                "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode="Markdown"
            )

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        downloaded_tracks = []
        failed_tracks = []

        for i, track in enumerate(results, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await search_msg.edit_media(
                        media=types.InputMediaPhoto(
                            media=types.FSInputFile("bear.png"),
                            caption=f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ {i}/{len(results)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}..."
                        ),
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
                url = track.get('url', '')
                if not url:
                    logging.error(f"‚ùå –ù–µ—Ç URL –¥–ª—è —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–Ω–µ—Ç URL)")
                    continue
                
                try:
                    download_task = asyncio.create_task(
                        download_track_from_url_for_genre(user_id, url)
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue

                if filename:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        downloaded_tracks.append({
                            'filename': filename,
                            'title': track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'duration': track.get('duration', 0),
                            'size_mb': file_size_mb
                        })
                    except Exception as size_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {size_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞)")
                        continue

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                    try:
                        await message.answer_audio(
                            types.FSInputFile(filename),
                            title=track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            performer=artist_name,
                            duration=track.get('duration', 0)
                        )
                        logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        
                        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        # –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∂–∞–Ω—Ä–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ - —É–¥–∞–ª—è–µ–º –µ–≥–æ
                        await auto_cleanup_file(filename, is_collection_track=False)
                        
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {audio_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        try:
                            await message.answer_document(
                                types.FSInputFile(filename)
                            )
                            logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                            
                            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            # –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∂–∞–Ω—Ä–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ - —É–¥–∞–ª—è–µ–º –µ–≥–æ
                            await auto_cleanup_file(filename, is_collection_track=False)
                            
                        except Exception as doc_error:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {doc_error}")
                            failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            continue

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)

                else:
                    failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {e}")
                failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_count = len(downloaded_tracks)
        failed_count = len(failed_tracks)

        message_text = f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        keyboard_buttons = []

        if failed_count > 0:
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")])

        keyboard_buttons.extend([
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await search_msg.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png"),
                    caption=message_text
                ),
                reply_markup=keyboard
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.answer_photo(
                    photo=types.FSInputFile("bear.png"),
                    caption=message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except Exception as send_error:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")

        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {artist_name}: {e}")
        
        try:
            await search_msg.edit_text(
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}.\n"
                f"üîç –û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
        except Exception as final_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {final_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            except Exception as last_error:
                logging.error(f"‚ùå –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {last_error}")

async def send_search_results(chat_id, results):
    try:
        logging.info(f"üîç send_search_results: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        logging.info(f"üîç send_search_results: –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
        logging.info(f"üîç send_search_results: —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {type(results)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not results or not isinstance(results, list):
            logging.error(f"‚ùå send_search_results: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {type(results)}")
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu)
            return
        
        logging.info(f"üîç send_search_results: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        valid_results = []
        for i, video in enumerate(results[:5]):  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            logging.info(f"üîç send_search_results: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ {i+1}: {video}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º SoundCloud
            if video and isinstance(video, dict) and video.get('source') == 'sc':
                # SoundCloud —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if video.get('url') and video.get('title'):
                    valid_results.append(video)
                    logging.info(f"üîç send_search_results: SoundCloud —Ç—Ä–µ–∫ {i+1} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–ª–∏–¥–Ω—ã–µ")
                else:
                    logging.warning(f"‚ö†Ô∏è send_search_results: SoundCloud —Ç—Ä–µ–∫ {i+1} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {video}")
            elif video and isinstance(video, dict) and video.get('id') and video.get('title'):
                # YouTube —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                valid_results.append(video)
                logging.info(f"üîç send_search_results: YouTube –≤–∏–¥–µ–æ {i+1} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞–ª–∏–¥–Ω—ã–µ")
            else:
                logging.warning(f"‚ö†Ô∏è send_search_results: —Ä–µ–∑—É–ª—å—Ç–∞—Ç {i+1} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {video}")
        
        logging.info(f"üîç send_search_results: –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(valid_results)}")
        
        if not valid_results:
            logging.warning(f"‚ö†Ô∏è send_search_results: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            await bot.send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.", reply_markup=main_menu)
            return
        
        logging.info(f"üîç send_search_results: –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for i, video in enumerate(valid_results):
            title = video.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            duration = video.get("duration", 0)
            source = video.get("source", "yt")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é YouTube
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            try:
                duration_text = format_duration(duration)
            except Exception as dur_error:
                logging.warning(f"‚ö†Ô∏è send_search_results: –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {dur_error}")
                duration_text = "??:??"
            
            logging.info(f"üîç send_search_results: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ {i+1}: title='{title}', duration={duration}, duration_text='{duration_text}', source='{source}'")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            if duration and duration > 0:
                button_text = f"{title[:45]}... ‚è± {duration_text}" if len(title) > 45 else f"{title} ‚è± {duration_text}"
            else:
                button_text = title[:55] + "..." if len(title) > 55 else title
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if source == 'sc':
                button_text += " üéµ"
            
            logging.info(f"üîç send_search_results: —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ {i+1}: '{button_text}'")
            
            # –°–æ–∑–¥–∞–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if source == 'sc':
                # SoundCloud: –ø–µ—Ä–µ–¥–∞–µ–º URL —Ç—Ä–µ–∫–∞ –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
                url = video.get('url', '')
                if url:
                    # –ö–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback_data
                    encoded_url = urllib.parse.quote(url, safe='')
                    keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"dl_sc:{encoded_url}")])
                else:
                    logging.warning(f"‚ö†Ô∏è send_search_results: —É SoundCloud —Ç—Ä–µ–∫–∞ {i+1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
            else:
                # YouTube: –ø–µ—Ä–µ–¥–∞–µ–º ID –≤–∏–¥–µ–æ
                video_id = video.get('id', '')
                if not video_id:
                    logging.warning(f"‚ö†Ô∏è send_search_results: —É YouTube –≤–∏–¥–µ–æ {i+1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"dl:{video_id}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        logging.info(f"üîç send_search_results: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        await bot.send_message(
            chat_id, 
            "üêª‚Äç‚ùÑÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        logging.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {chat_id}: {len(valid_results)} —Ç—Ä–µ–∫–æ–≤")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_search_results –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        logging.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: results={results}, type={type(results)}")
        logging.error(f"‚ùå –ü–æ–ª–Ω—ã–π traceback –æ—à–∏–±–∫–∏:", exc_info=True)
        try:
            await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu)
        except Exception as send_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {send_error}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ back_to_search –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

# === Callback: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –ø–æ–∏—Å–∫–∞ ===
@dp.callback_query(F.data.startswith("dl:"))
async def download_track(callback: types.CallbackQuery):
    try:
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        video_id = callback.data.split(":")[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å video_id
        if not video_id or len(video_id) < 10:
            await callback.answer("‚ùÑÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ.", show_alert=True)
            return
            
        url = f"https://www.youtube.com/watch?v={video_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        await download_track_from_url(user_id, url)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.answer("‚ùÑÔ∏è –¢—Ä–µ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ú–æ—è –º—É–∑—ã–∫–∞", show_alert=True)
        
    except ValueError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ video_id: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ ID –≤–∏–¥–µ–æ.", show_alert=True)
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ download_track: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏.", show_alert=True)

# === Callback: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ SoundCloud —Ç—Ä–µ–∫–∞ –∏–∑ –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ ===
@dp.callback_query(F.data.startswith("dl_sc:"))
async def download_soundcloud_from_search(callback: types.CallbackQuery):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç SoundCloud —Ç—Ä–µ–∫ –∏–∑ –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ (–∫–∞–∫ YouTube)"""
    try:
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –ø–æ—Å–ª–µ "dl_sc:" –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –µ–≥–æ
        encoded_url = callback.data[6:]  # –£–±–∏—Ä–∞–µ–º "dl_sc:" –≤ –Ω–∞—á–∞–ª–µ
        
        if not encoded_url:
            await callback.answer("‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
        url = urllib.parse.unquote(encoded_url)
        
        logging.info(f"üéµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–∫–∞—á–∏–≤–∞–µ—Ç SoundCloud —Ç—Ä–µ–∫ –∏–∑ –ø–æ–∏—Å–∫–∞: {url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        await download_track_from_url(user_id, url)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –¥–ª—è YouTube)
        await callback.answer("‚ùÑÔ∏è –¢—Ä–µ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ú–æ—è –º—É–∑—ã–∫–∞", show_alert=True)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è SoundCloud —Ç—Ä–µ–∫–∞ –∏–∑ –ø–æ–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏.", show_alert=True)



# === –í—Å–ø–æ–º–æ–≥: —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def build_tracks_keyboard(tracks, page=0, owner_for_buttons=None):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if tracks is None:
            tracks = []
            logging.warning("‚ö†Ô∏è build_tracks_keyboard: tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
        
        if not isinstance(tracks, list):
            logging.error(f"‚ùå build_tracks_keyboard: tracks –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {type(tracks)}")
            tracks = []
        
        kb = []
        start = page * PAGE_SIZE
        end = start + PAGE_SIZE
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        total_pages = (len(tracks) + PAGE_SIZE - 1) // PAGE_SIZE if tracks else 0
        logging.info(f"üîç build_tracks_keyboard: —Ç—Ä–µ–∫–æ–≤={len(tracks)}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞={page+1}/{total_pages}, start={start}, end={end}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 0 or (total_pages > 0 and page >= total_pages):
            logging.warning(f"‚ö†Ô∏è build_tracks_keyboard: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ 0")
            page = 0
            start = 0
            end = PAGE_SIZE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–æ–≤
        if tracks and isinstance(tracks[0], dict):
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            for i, track_info in enumerate(tracks[start:end], start=start):
                if not track_info or not isinstance(track_info, dict):
                    continue
                    
                title = track_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                if not title:
                    title = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'
                    
                # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp3 –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                if title.endswith('.mp3'):
                    title = title[:-4]
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
                duration = track_info.get('duration', 0)
                duration_text = format_duration(duration) if duration and duration > 0 else ""
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                if duration_text:
                    button_text = f"{title[:30]}... ‚è± {duration_text}" if len(title) > 30 else f"{title} ‚è± {duration_text}"
                else:
                    button_text = (title[:35] + '...') if len(title) > 38 else title
                
                row = []
                if owner_for_buttons:
                    row.append(InlineKeyboardButton(text=button_text,
                                                    callback_data=f"play_shared:{owner_for_buttons}:{i}"))
                else:
                    row.append(InlineKeyboardButton(text=button_text,
                                                    callback_data=f"play:{i}"))
                    row.append(InlineKeyboardButton(text="üóë", callback_data=f"del:{i}"))
                kb.append(row)
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π
            for i, path in enumerate(tracks[start:end], start=start):
                if not path or not isinstance(path, str):
                    continue
                    
                title = os.path.basename(path)
                if not title:
                    title = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'
                
                # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp3 –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                if title.endswith('.mp3'):
                    title = title[:-4]
                
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                button_text = (title[:35] + '...') if len(title) > 38 else title
                
                row = []
                if owner_for_buttons:
                    row.append(InlineKeyboardButton(text=button_text,
                                                    callback_data=f"play_shared:{owner_for_buttons}:{i}"))
                else:
                    row.append(InlineKeyboardButton(text=button_text,
                                                    callback_data=f"play:{i}"))
                    row.append(InlineKeyboardButton(text="üóë", callback_data=f"del:{i}"))
                kb.append(row)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav = []
        if page > 0:
            if owner_for_buttons:
                nav.append(InlineKeyboardButton(text="‚óÄ –ü—Ä–µ–¥", callback_data=f"shared_page:{owner_for_buttons}:{page-1}"))
            else:
                nav.append(InlineKeyboardButton(text="‚óÄ –ü—Ä–µ–¥", callback_data=f"music_page:{page-1}"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page < total_pages - 1:
            if owner_for_buttons:
                nav.append(InlineKeyboardButton(text="–°–ª–µ–¥ ‚ñ∂", callback_data=f"shared_page:{owner_for_buttons}:{page+1}"))
            else:
                nav.append(InlineKeyboardButton(text="–°–ª–µ–¥ ‚ñ∂", callback_data=f"music_page:{page+1}"))
        
        if nav:
            kb.append(nav)
            
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        if owner_for_buttons:
            kb.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ", callback_data=f"download_all_shared:{owner_for_buttons}")])
        else:
            kb.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ", callback_data="download_all")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        return InlineKeyboardMarkup(inline_keyboard=kb)
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ build_tracks_keyboard: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

# === –ú–æ—è –º—É–∑—ã–∫–∞ (–ø–æ–∫–∞–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã) ===
@dp.callback_query(F.data == "my_music")
async def my_music(callback: types.CallbackQuery):
    global user_tracks
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
    if user_tracks is None:
        user_tracks = {}
        logging.warning(f"‚ö†Ô∏è user_tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
    
    tracks = user_tracks.get(user_id, [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tracks –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
    if tracks is None:
        tracks = []
        user_tracks[user_id] = tracks
        logging.warning(f"‚ö†Ô∏è tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
    
    if not tracks:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –æ —Ç–æ–º, —á—Ç–æ —Ç—Ä–µ–∫–æ–≤ –Ω–µ—Ç
        try:
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png"),
                    caption="üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤."
                ),
                reply_markup=main_menu
            )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.message.edit_text("üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.", reply_markup=main_menu)
        return
        
    try:
        kb = build_tracks_keyboard(tracks, page=0, owner_for_buttons=None)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–∞—Ö
        try:
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png"),
                    caption=f"‚ùÑÔ∏è –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1):"
                ),
                reply_markup=kb
            )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.message.edit_text("‚ùÑÔ∏è –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1):", reply_markup=kb)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)

# === Callback: –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–≤–æ–µ–π –º—É–∑—ã–∫–∏ ===
@dp.callback_query(F.data.startswith("music_page:"))
async def music_page_cb(callback: types.CallbackQuery):
    global user_tracks
    try:
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        page = int(callback.data.split(":")[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning(f"‚ö†Ô∏è user_tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        tracks = user_tracks.get(user_id, [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tracks –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
        if tracks is None:
            tracks = []
            user_tracks[user_id] = tracks
            logging.warning(f"‚ö†Ô∏è tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
        
        logging.info(f"üîç music_page_cb: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}, —Ç—Ä–µ–∫–æ–≤ {len(tracks)}")
        
        if not tracks:
            await callback.message.edit_text("‚ùÑÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤", reply_markup=main_menu)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        total_pages = (len(tracks) + PAGE_SIZE - 1) // PAGE_SIZE if tracks else 0
        if page < 0 or page >= total_pages:
            logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 0")
            page = 0
        
        kb = build_tracks_keyboard(tracks, page=page, owner_for_buttons=None)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Ç—Ä–µ–∫–æ–≤
        try:
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png"),
                    caption=f"‚ùÑÔ∏è –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}):"
                ),
                reply_markup=kb
            )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.message.edit_text(f"‚ùÑÔ∏è –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}):", reply_markup=main_menu)
        
    except ValueError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ music_page_cb –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

# === Callback: –î–ª—è –≤–∞—Å ===
@dp.callback_query(F.data == "for_you")
async def for_you_recommendations(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    

    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.."
            ),
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç—Ä–µ–∫–∏
        recommended_tracks = await get_recommended_tracks(user_id)
        
        if not recommended_tracks:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png"),
                    caption="‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–∫–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="for_you")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption=f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(recommended_tracks)} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤...**\n\n"
                        "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
                        "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            ),
            parse_mode="Markdown"
        )

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
        downloaded_tracks = []
        failed_tracks = []

        for i, track in enumerate(recommended_tracks, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await callback.message.edit_media(
                        media=types.InputMediaPhoto(
                            media=types.FSInputFile("bear.png"),
                            caption=f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç—Ä–µ–∫ {i}/{len(recommended_tracks)}..."
                        ),
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
                url = track.get('url', '')
                if not url:
                    logging.error(f"‚ùå –ù–µ—Ç URL –¥–ª—è —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–Ω–µ—Ç URL)")
                    continue
                
                try:
                    download_task = asyncio.create_task(
                        download_track_from_url_for_genre(user_id, url)
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue

                if filename:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        downloaded_tracks.append({
                            'filename': filename,
                            'title': track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'duration': track.get('duration', 0),
                            'size_mb': file_size_mb
                        })
                    except Exception as size_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {size_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞)")
                        continue

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                    try:
                        await callback.message.answer_audio(
                            types.FSInputFile(filename),
                            title=track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            performer="SoundCloud",
                            duration=track.get('duration', 0)
                        )
                        logging.info(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        
                        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        await auto_cleanup_file(filename, is_collection_track=False, user_id=user_id)
                        
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {audio_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        try:
                            await callback.message.answer_document(
                                types.FSInputFile(filename)
                            )
                            logging.info(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                            
                            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            await auto_cleanup_file(filename, is_collection_track=False, user_id=user_id)
                            
                        except Exception as doc_error:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {doc_error}")
                            failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            continue

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)

                else:
                    failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {e}")
                failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption=message_text
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="for_you")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        
        logging.info(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {len(recommended_tracks)} —Ç—Ä–µ–∫–æ–≤")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ for_you_recommendations –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="for_you")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )

# === Callback: play / play_shared ===
@dp.callback_query(F.data.startswith("play:"))
async def play_track(callback: types.CallbackQuery):
    global user_tracks
    try:
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        idx = int(callback.data.split(":")[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning(f"‚ö†Ô∏è play_track: user_tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        tracks = user_tracks.get(user_id, [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tracks –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
        if tracks is None:
            tracks = []
            user_tracks[user_id] = tracks
            logging.warning(f"‚ö†Ô∏è play_track: tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
        
        if not tracks:
            await callback.answer("üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.", show_alert=True)
            return
        
        if not (0 <= idx < len(tracks)):
            await callback.answer("‚ùÑÔ∏è –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        track = tracks[idx]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–∞
        if isinstance(track, dict):
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
            file_path = track.get('url', '').replace('file://', '')
            title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
            
            if not file_path:
                await callback.answer("‚ùÑÔ∏è –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if os.path.exists(file_path):
                try:
                    await callback.message.answer_audio(types.FSInputFile(file_path), title=title)
                    logging.info(f"‚úÖ –¢—Ä–µ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω: {title} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await auto_cleanup_file(file_path, is_collection_track=True, user_id=user_id)
                    
                except Exception as audio_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ {title}: {audio_error}")
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞.", show_alert=True)
            else:
                logging.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ.", show_alert=True)

        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            if not track or not isinstance(track, str):
                await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–∞.", show_alert=True)
                return
            
            # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤ —É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            title = os.path.basename(track)
            logging.warning(f"‚ö†Ô∏è –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–∞ –±–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {title}")
            await callback.answer("‚ùå –¢—Ä–µ–∫ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                
    except ValueError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç—Ä–µ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç—Ä–µ–∫–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ play_track: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)



# === Callback: download all (self) ===
@dp.callback_query(F.data == "download_all")
async def download_all_tracks(callback: types.CallbackQuery):
    global user_tracks
    try:
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning(f"‚ö†Ô∏è download_all_tracks: user_tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        tracks = user_tracks.get(user_id, [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tracks –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
        if tracks is None:
            tracks = []
            user_tracks[user_id] = tracks
            logging.warning(f"‚ö†Ô∏è download_all_tracks: tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
        
        if not tracks:
            await callback.message.answer("‚ùÑÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.", reply_markup=main_menu)
            return
        
        await callback.message.answer("üì• –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ —Ç—Ä–µ–∫–∏...")
        
        success_count = 0
        failed_count = 0
        

        
        for track in tracks:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–∞
                if isinstance(track, dict):
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
                    file_path = track.get('url', '').replace('file://', '')
                    title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                    original_url = track.get('original_url', '')
                    
                    if not file_path:
                        logging.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ç—Ä–µ–∫–∞: {title}")
                        failed_count += 1
                        continue
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    if not track or not isinstance(track, str):
                        logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–∞: {track}")
                        failed_count += 1
                        continue
                        
                    file_path = track
                    title = os.path.basename(track)
                    original_url = title  # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                if os.path.exists(file_path):
                    try:
                        await callback.message.answer_audio(types.FSInputFile(file_path), title=title)
                        success_count += 1
                        logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
                        await asyncio.sleep(0.4)
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ {title}: {audio_error}")
                        failed_count += 1
                else:
                    logging.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    failed_count += 1

                    
            except Exception as e:
                logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ {track}: {e}")
                failed_count += 1
        


        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ download_all_tracks –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤.", reply_markup=main_menu)



# === –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ ===
@dp.callback_query(F.data.startswith("del:"))
async def delete_track(callback: types.CallbackQuery):
    global user_tracks
    try:
        user_id = str(callback.from_user.id)
        
        logging.info(f"üîç === –ù–ê–ß–ê–õ–û –£–î–ê–õ–ï–ù–ò–Ø –¢–†–ï–ö–ê ===")
        logging.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        logging.info(f"üîç –ò–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞: {callback.data}")
        logging.info(f"üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π user_tracks –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {user_tracks}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        idx = int(callback.data.split(":")[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning(f"‚ö†Ô∏è delete_track: user_tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        tracks = user_tracks.get(user_id, [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tracks –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
        if tracks is None:
            tracks = []
            user_tracks[user_id] = tracks
            logging.warning(f"‚ö†Ô∏è delete_track: tracks –±—ã–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
        
        if not (0 <= idx < len(tracks)):
            await callback.answer("‚ùÑÔ∏è –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        track = tracks[idx]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫–∞
        if isinstance(track, dict):
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
            file_path = track.get('url', '').replace('file://', '')
            title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file_path = track
            title = os.path.basename(track)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if file_path and os.path.exists(file_path):
            try:
                os.remove(file_path)
                logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–∏–ª—Å—è
        
        # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —É–¥–∞–ª–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª)
        tracks.pop(idx)
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π user_tracks
        user_tracks[user_id] = tracks
        save_tracks()
        logging.info(f"‚úÖ –¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞: {title}")
        logging.info(f"üîç –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: –≤—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(tracks)}")
        logging.info(f"üîç –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π user_tracks –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_tracks.get(user_id, [])}")
        logging.info(f"üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π user_tracks –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {user_tracks}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        if save_tracks():
            logging.info(f"‚úÖ –¢—Ä–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –≤ —Ñ–∞–π–ª")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if not tracks:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—é
            try:
                await callback.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=types.FSInputFile("bear.png")
                    ),
                    reply_markup=main_menu
                )
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await callback.message.edit_text("‚ùÑÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.", reply_markup=main_menu)
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
            current_page = idx // PAGE_SIZE
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –º—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å—Ç—Ä–∞–Ω–∏—Ü
            total_pages = (len(tracks) + PAGE_SIZE - 1) // PAGE_SIZE if tracks else 0
            if current_page >= total_pages:
                current_page = max(0, total_pages - 1)
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é
            if current_page > 0 and len(tracks) <= current_page * PAGE_SIZE:
                current_page = max(0, current_page - 1)
            
            try:
                logging.info(f"üîç –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {current_page+1}, —Ç—Ä–µ–∫–æ–≤: {len(tracks)}")
                kb = build_tracks_keyboard(tracks, page=current_page, owner_for_buttons=None)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if not kb:
                    logging.warning(f"‚ö†Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {current_page+1}")
                    # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if current_page > 0:
                        current_page = current_page - 1
                        logging.info(f"üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {current_page+1}")
                        kb = build_tracks_keyboard(tracks, page=current_page, owner_for_buttons=None)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Ç—Ä–µ–∫–æ–≤
                try:
                    await callback.message.edit_media(
                        media=types.InputMediaPhoto(
                            media=types.FSInputFile("bear.png"),
                            caption=f"‚ùÑÔ∏è –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1})"
                        ),
                        reply_markup=kb
                    )
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    await callback.message.edit_text(f"‚ùÑÔ∏è –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1})", reply_markup=kb)
            except Exception as kb_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {kb_error}")
                await callback.message.edit_text("‚ùÑÔ∏è –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)", reply_markup=main_menu)
        
        await callback.answer("‚úÖ –¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω.")
        
        logging.info(f"üîç === –ö–û–ù–ï–¶ –£–î–ê–õ–ï–ù–ò–Ø –¢–†–ï–ö–ê ===")
        logging.info(f"üîç –§–∏–Ω–∞–ª—å–Ω—ã–π user_tracks: {user_tracks}")
        logging.info(f"üîç –¢—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_tracks.get(user_id, [])}")
        
    except ValueError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç—Ä–µ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç—Ä–µ–∫–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ delete_track: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)







# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∂–∞–Ω—Ä–∞–º–∏ ===
def get_randomized_genres():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞"""
    base_genres = get_genres()
    randomized_genres = {}
    
    for genre_name, queries in base_genres.items():
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        shuffled_queries = list(queries)
        random.shuffle(shuffled_queries)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Ç 80% –¥–æ 100% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
        min_queries = max(10, int(len(shuffled_queries) * 0.8))
        max_queries = len(shuffled_queries)
        num_queries = random.randint(min_queries, max_queries)
        
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ
        selected_queries = random.sample(shuffled_queries, num_queries)
        randomized_genres[genre_name] = selected_queries
        
        logging.info(f"üé≤ –ñ–∞–Ω—Ä {genre_name}: –≤—ã–±—Ä–∞–Ω–æ {num_queries} –∏–∑ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    return randomized_genres

def get_genres():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    return {
        "üéµ –ü–æ–ø": [
            "pop music 2024 official audio",
            "popular pop songs official",
            "best pop hits official audio",
            "top pop music tracks",
            "pop songs today official",
            "latest pop music official",
            "pop music playlist official",
            "pop hits 2024 official audio",
            "pop music new releases",
            "pop songs popular official",
            "pop music trending tracks",
            "pop hits today official",
            "pop music latest official",
            "pop songs hits official",
            "pop music best tracks",
            "pop hits playlist official",
            "pop music top tracks",
            "pop songs 2024 official",
            "pop music current tracks",
            "pop hits new releases",
            "pop music trending songs",
            "pop songs latest official",
            "pop music popular tracks",
            "pop hits current official",
            "pop music today songs",
            "pop songs trending official",
            "pop music hits official",
            "pop hits latest tracks",
            "pop music current songs",
            "pop songs best official",
            "pop music new hits official"
        ],
        "üé∏ –†–æ–∫": [
            "rock music 2024 official audio",
            "best rock songs official",
            "rock hits today official",
            "popular rock music tracks",
            "rock songs playlist official",
            "top rock hits official audio",
            "rock music latest official",
            "rock songs 2024 official",
            "rock hits playlist official",
            "rock music popular tracks",
            "rock songs trending official",
            "rock music best tracks",
            "rock hits latest official",
            "rock music new releases",
            "rock songs hits official",
            "rock music current tracks",
            "rock hits new releases",
            "rock music trending songs",
            "rock songs latest official",
            "rock music top tracks",
            "rock hits current official",
            "rock music today songs",
            "rock songs popular official",
            "rock music hits official",
            "rock hits trending tracks",
            "rock music playlist official",
            "rock songs best official",
            "rock music new hits official",
            "rock hits today official",
            "rock music latest hits official"
        ],
        "üé§ –•–∏–ø-—Ö–æ–ø": [
            "hip hop music 2024 official audio",
            "rap songs today official",
            "best hip hop hits official audio",
            "hip hop music latest tracks",
            "rap music popular songs official",
            "hip hop songs playlist official",
            "top rap hits official audio",
            "hip hop music trending tracks",
            "rap songs 2024 official",
            "hip hop hits playlist music",
            "rap music best tracks official",
            "hip hop songs latest official",
            "rap music new releases",
            "hip hop hits today music",
            "rap songs popular official",
            "hip hop music current tracks",
            "rap hits new releases",
            "hip hop music trending songs",
            "rap songs latest official",
            "hip hop music top tracks",
            "rap hits current music",
            "hip hop music today songs",
            "rap songs hits official",
            "hip hop hits trending tracks",
            "rap music playlist official",
            "hip hop songs best music",
            "rap music new hits official",
            "hip hop hits latest tracks",
            "rap music current songs",
            "hip hop songs trending official"
        ],
        "üéπ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": [
            "electronic music 2024",
            "edm songs today",
            "best electronic music",
            "electronic hits latest",
            "edm music popular",
            "electronic songs playlist",
            "top edm hits",
            "electronic music trending",
            "edm songs 2024",
            "electronic hits playlist",
            "edm music best",
            "electronic songs latest",
            "edm music new",
            "electronic hits today",
            "edm songs popular",
            "electronic music current",
            "edm hits new",
            "electronic music trending",
            "edm songs latest",
            "electronic music top",
            "edm hits current",
            "electronic music today",
            "edm songs hits",
            "electronic hits trending",
            "edm music playlist",
            "electronic songs best",
            "edm music new hits",
            "electronic hits latest",
            "edm music current",
            "electronic songs trending"
        ],
        "üé∑ –î–∂–∞–∑": [
            "jazz music 2024",
            "best jazz songs",
            "jazz hits today",
            "popular jazz music",
            "jazz songs playlist",
            "top jazz hits",
            "jazz music latest",
            "jazz songs 2024",
            "jazz hits playlist",
            "jazz music popular",
            "jazz songs trending",
            "jazz music best",
            "jazz hits latest",
            "jazz music new",
            "jazz songs hits",
            "jazz music current",
            "jazz hits new",
            "jazz music trending",
            "jazz songs latest",
            "jazz music top",
            "jazz hits current",
            "jazz music today",
            "jazz songs popular",
            "jazz music hits",
            "jazz hits trending",
            "jazz music playlist",
            "jazz songs best",
            "jazz music new hits",
            "jazz hits latest",
            "jazz music current",
            "jazz songs trending"
        ],
        "üéª –ö–ª–∞—Å—Å–∏–∫–∞": [
            "classical music 2024",
            "best classical music",
            "classical hits today",
            "popular classical music",
            "classical music playlist",
            "top classical hits",
            "classical music latest",
            "classical music 2024",
            "classical hits playlist",
            "classical music popular",
            "classical music trending",
            "classical music best",
            "classical hits latest",
            "classical music new",
            "classical music hits",
            "classical music current",
            "classical hits new",
            "classical music trending",
            "classical music latest",
            "classical music top",
            "classical hits current",
            "classical music today",
            "classical music popular",
            "classical music hits",
            "classical hits trending",
            "classical music playlist",
            "classical music best",
            "classical music new hits",
            "classical hits latest",
            "classical music current",
            "classical music trending"
        ],
        "üé∫ –ë–ª—é–∑": [
            "blues music 2024",
            "best blues songs",
            "blues hits today",
            "popular blues music",
            "blues songs playlist",
            "top blues hits",
            "blues music latest",
            "blues songs 2024",
            "blues hits playlist",
            "blues music popular",
            "blues songs trending",
            "blues music best",
            "blues hits latest",
            "blues music new",
            "blues songs hits",
            "blues music current",
            "blues hits new",
            "blues music trending",
            "blues songs latest",
            "blues music top",
            "blues hits current",
            "blues music today",
            "blues songs popular",
            "blues music hits",
            "blues hits trending",
            "blues music playlist",
            "blues songs best",
            "blues music new hits",
            "blues hits latest",
            "blues music current",
            "blues songs trending"
        ],
        "üéº –ö–∞–Ω—Ç—Ä–∏": [
            "country music 2024",
            "best country songs",
            "country hits today",
            "popular country music",
            "country songs playlist",
            "top country hits",
            "country music latest",
            "country songs 2024",
            "country hits playlist",
            "country music popular",
            "country songs trending",
            "country music best",
            "country hits latest",
            "country music new",
            "country songs hits",
            "country music current",
            "country hits new",
            "country music trending",
            "country songs latest",
            "country music top",
            "country hits current",
            "country music today",
            "country songs popular",
            "country music hits",
            "country hits trending",
            "country music playlist",
            "country songs best",
            "country music new hits",
            "country hits latest",
            "country music current",
            "country songs trending"
        ],
        "üé≠ –†—ç–≥–≥–∏": [
            "reggae music 2024",
            "best reggae songs",
            "reggae hits today",
            "popular reggae music",
            "reggae songs playlist",
            "top reggae hits",
            "reggae music latest",
            "reggae songs 2024",
            "reggae hits playlist",
            "reggae music popular",
            "reggae songs trending",
            "reggae music best",
            "reggae hits latest",
            "reggae music new",
            "reggae songs hits",
            "reggae music current",
            "reggae hits new",
            "reggae music trending",
            "reggae songs latest",
            "reggae music top",
            "reggae hits current",
            "reggae music today",
            "reggae songs popular",
            "reggae music hits",
            "reggae hits trending",
            "reggae music playlist",
            "reggae songs best",
            "reggae music new hits",
            "reggae hits latest",
            "reggae music current",
            "reggae songs trending"
        ],
        "üé™ –§–æ–ª–∫": [
            "folk music 2024",
            "best folk songs",
            "folk hits today",
            "popular folk music",
            "folk songs playlist",
            "top folk hits",
            "folk music latest",
            "folk songs 2024",
            "folk hits playlist",
            "folk music popular",
            "folk songs trending",
            "folk music best",
            "folk hits latest",
            "folk music new",
            "folk songs hits",
            "folk music current",
            "folk hits new",
            "folk music trending",
            "folk songs latest",
            "folk music top",
            "folk hits current",
            "folk music today",
            "folk songs popular",
            "folk music hits",
            "folk hits trending",
            "folk music playlist",
            "folk songs best",
            "folk music new hits",
            "folk hits latest",
            "folk music current",
            "folk songs trending"
        ],
        "üé® –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞": [
            "alternative music 2024",
            "best alternative songs",
            "alternative hits today",
            "popular alternative music",
            "alternative songs playlist",
            "top alternative hits",
            "alternative music latest",
            "alternative songs 2024",
            "alternative hits playlist",
            "alternative music popular",
            "alternative songs trending",
            "alternative music best",
            "alternative hits latest",
            "alternative music new",
            "alternative songs hits",
            "alternative music current",
            "alternative hits new",
            "alternative music trending",
            "alternative songs latest",
            "alternative music top",
            "alternative hits current",
            "alternative music today",
            "alternative songs popular",
            "alternative music hits",
            "alternative hits trending",
            "alternative music playlist",
            "alternative songs best",
            "alternative music new hits",
            "alternative hits latest",
            "alternative music current",
            "alternative songs trending"
        ],
        "üé¨ –°–∞—É–Ω–¥—Ç—Ä–µ–∫–∏": [
            "soundtrack music 2024",
            "best soundtrack songs",
            "soundtrack hits today",
            "popular soundtrack music",
            "soundtrack songs playlist",
            "top soundtrack hits",
            "soundtrack music latest",
            "soundtrack songs 2024",
            "soundtrack hits playlist",
            "soundtrack music popular",
            "soundtrack songs trending",
            "soundtrack music best",
            "soundtrack hits latest",
            "soundtrack music new",
            "soundtrack songs hits",
            "soundtrack music current",
            "soundtrack hits new",
            "soundtrack music trending",
            "soundtrack songs latest",
            "soundtrack music top",
            "soundtrack hits current",
            "soundtrack music today",
            "soundtrack songs popular",
            "soundtrack music hits",
            "soundtrack hits trending",
            "soundtrack music playlist",
            "soundtrack songs best",
            "soundtrack music new hits",
            "soundtrack hits latest",
            "soundtrack music current",
            "soundtrack songs trending"
        ]
    }

def search_genre_tracks(genre_queries, limit=20):
    """–ò—â–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
    all_results = []
    
    try:
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        shuffled_queries = list(genre_queries)
        random.shuffle(shuffled_queries)
        
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ 20, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 20-35 –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        if len(shuffled_queries) > 20:
            num_queries = random.randint(20, min(35, len(shuffled_queries)))
            selected_queries = random.sample(shuffled_queries, num_queries)
        else:
            selected_queries = shuffled_queries
        
        # –î–æ–±–∞–≤–ª—è–µ–º fallback –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º—É–∑—ã–∫–∏)
        fallback_queries = [
            "rap music official audio",
            "hip hop songs official",
            "popular rap music",
            "best hip hop tracks",
            "rap hits official",
            "hip hop classics official audio"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º fallback –∑–∞–ø—Ä–æ—Å—ã –∫ –æ—Å–Ω–æ–≤–Ω—ã–º
        selected_queries.extend(fallback_queries)
        logging.info(f"üé≤ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(fallback_queries)} fallback –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        logging.info(f"üé≤ –í—ã–±—Ä–∞–Ω–æ {len(selected_queries)} —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ {len(genre_queries)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        for query in selected_queries:
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ (–±–æ–ª–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –º—É–∑—ã–∫—É)
                search_strategies = [
                    f"ytsearch3:{query} official audio",  # –ò—â–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ
                    f"ytsearch3:{query} music",  # –ò—â–µ–º —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º "music"
                    f"ytsearch3:{query}",  # –ò—â–µ–º 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    f"ytsearch5:{query}",  # –ò—â–µ–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                ]
                
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
                if " - " in query:
                    artist, song = query.split(" - ", 1)
                    search_strategies.extend([
                        f"ytsearch3:{artist} {song}",
                        f"ytsearch3:{artist}",
                        f"ytsearch3:{song}"
                    ])
                
                query_success = False
                
                for strategy in search_strategies:
                    if query_success:
                        break
                        
                    try:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
                        ydl_opts = {
                            'format': 'bestaudio/best',
                            'noplaylist': True,
                            'quiet': True,
                            'cookiefile': COOKIES_FILE if os.path.exists(COOKIES_FILE) else None,
                            'extract_flat': True,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                            'no_warnings': True,
                            'ignoreerrors': True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                            'timeout': 30,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                            'retries': 3,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                        }
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
                        if os.path.exists(COOKIES_FILE):
                            logging.info(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies —Ñ–∞–π–ª: {COOKIES_FILE}")
                        else:
                            logging.warning("‚ö†Ô∏è Cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
                        
                        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                            try:
                                # –ü—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                                info = ydl.extract_info(strategy, download=False)
                                
                                if not info:
                                    logging.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy})")
                                    continue
                                    
                                results = info.get("entries", [])
                                
                                if results:
                                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–±–æ—Ä–Ω–∏–∫–æ–≤ –∏ –Ω–∞—Ä–µ–∑–æ–∫
                                    valid_results = []
                                    for result in results:
                                        if not result:
                                            continue
                                            
                                        title = result.get('title', '').lower()
                                        duration = result.get('duration', 0)
                                        video_id = result.get('id')
                                        
                                        # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
                                        if (duration and duration >= MIN_TRACK_DURATION and  # –¢—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 1 –º–∏–Ω—É—Ç—ã
                                            duration <= MAX_TRACK_DURATION and  # –ò –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–Ω–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)
                                            video_id and  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å ID –≤–∏–¥–µ–æ
                                            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–±–æ—Ä–Ω–∏–∫–∏, –Ω–∞—Ä–µ–∑–∫–∏, –æ–±–∑–æ—Ä—ã
                                            'mix' not in title and 
                                            'compilation' not in title and
                                            'collection' not in title and
                                            'best of' not in title and
                                            'greatest hits' not in title and
                                            'remix' not in title and
                                            'cover' not in title and
                                            'karaoke' not in title and
                                            'instrumental' not in title and
                                            'live' not in title and  # –ò–∑–±–µ–≥–∞–µ–º –∂–∏–≤—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
                                            'concert' not in title and
                                            'performance' not in title and
                                            # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±–∑–æ—Ä—ã, –∏–Ω—Ç–µ—Ä–≤—å—é, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª–∫–∏
                                            'review' not in title and
                                            'interview' not in title and
                                            'documentary' not in title and
                                            'analysis' not in title and
                                            'reaction' not in title and
                                            'commentary' not in title and
                                            'podcast' not in title and
                                            'news' not in title and
                                            'behind the scenes' not in title and
                                            'making of' not in title and
                                            'studio session' not in title and
                                            # –ò—Å–∫–ª—é—á–∞–µ–º –∫–ª–∏–ø—ã —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –æ–±–∑–æ—Ä—ã)
                                            len(title) < 100 and
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                            any(keyword in title for keyword in [
                                                'music', 'song', 'track', 'audio', 'beat', 'melody',
                                                'rap', 'hip hop', 'pop', 'rock', 'jazz', 'blues',
                                                'electronic', 'folk', 'country', 'reggae', 'alternative'
                                            ]) and
                                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–∫–ª—é—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –æ–±–∑–æ—Ä—ã
                                            not any(pattern in title for pattern in [
                                                'vs ', 'versus', 'comparison', 'review', 'analysis',
                                                'breakdown', 'explanation', 'tutorial', 'guide',
                                                'how to', 'what is', 'why ', 'when ', 'where ',
                                                'interview', 'podcast', 'news', 'update', 'announcement'
                                            ])):
                                            
                                            valid_results.append(result)
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (1-5) –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                                    if valid_results:
                                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É randrange - –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                        min_count = min(2, len(valid_results))
                                        max_count = min(5, len(valid_results))
                                        
                                        if min_count <= max_count:
                                            num_to_add = random.randint(min_count, max_count)
                                            selected_results = random.sample(valid_results, num_to_add)
                                            all_results.extend(selected_results)
                                            logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {num_to_add} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy})")
                                            query_success = True
                                            break
                                        else:
                                            logging.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞: {len(valid_results)}")
                                    else:
                                        logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy})")
                                else:
                                    logging.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy})")
                                    
                            except Exception as search_error:
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}): {search_error}")
                                continue
                                
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è yt-dlp –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}' (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}): {e}")
                        continue
                
                if not query_success:
                    logging.warning(f"‚ö†Ô∏è –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
                        
            except Exception as e:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        unique_results = []
        seen_ids = set()
        
        for result in all_results:
            if result and result.get('id') and result['id'] not in seen_ids:
                unique_results.append(result)
                seen_ids.add(result['id'])
        
        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É")
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        random.shuffle(unique_results)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
        return unique_results[:limit]
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä—É: {e}")
        return []

def search_artist_tracks(artist_name, limit=10):
    """–ò—â–µ—Ç —Ç—Ä–µ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ SoundCloud"""
    try:
        logging.info(f"üë§ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ SoundCloud: {artist_name}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º scsearch –¥–ª—è SoundCloud
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        search_query = f"scsearch{limit * 3}:{artist_name}"
        
        ydl_opts = {
            'format': 'bestaudio/best',
            'noplaylist': True,
            'quiet': True,
            'extract_flat': True,
            'no_warnings': True,
            'ignoreerrors': True,
            'timeout': 30,
            'retries': 3,
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ SoundCloud
            info = ydl.extract_info(search_query, download=False)
            
            if not info:
                logging.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist_name}' –Ω–∞ SoundCloud")
                return []
                
            results = info.get("entries", [])
            
            if not results:
                logging.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist_name}' –Ω–∞ SoundCloud")
                return []
            
            logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –Ω–∞ SoundCloud")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            valid_results = []
            for result in results:
                if not result:
                    continue
                    
                title = result.get('title', '').lower()
                duration = result.get('duration', 0)
                url = result.get('url', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–∫
                if (duration and duration >= MIN_TRACK_DURATION and  # –¢—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 1 –º–∏–Ω—É—Ç—ã
                    duration <= MAX_TRACK_DURATION and  # –ò –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–Ω–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)
                    'mix' not in title and 
                    'compilation' not in title and
                    'collection' not in title and
                    'best of' not in title and
                    'greatest hits' not in title and
                    'karaoke' not in title and
                    'instrumental' not in title and
                    'live' not in title and  # –ò–∑–±–µ–≥–∞–µ–º –∂–∏–≤—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è
                    'concert' not in title and
                    'performance' not in title and
                    url and 'soundcloud.com' in url):  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ SoundCloud
                    
                    valid_results.append(result)
            
            logging.info(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(valid_results)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–∫–æ–≤")
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL
            unique_results = []
            seen_urls = set()
            
            for result in valid_results:
                if result and result.get('url') and result['url'] not in seen_urls:
                    unique_results.append(result)
                    seen_urls.add(result['url'])
            
            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –Ω–∞ SoundCloud")
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            random.shuffle(unique_results)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
            return unique_results[:limit]
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –Ω–∞ SoundCloud: {e}")
        return []

@dp.callback_query(F.data.startswith("genre:"))
async def handle_genre_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
    genre_name = callback.data.split(":", 1)[1]
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    logging.info(f"üé≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∂–∞–Ω—Ä: {genre_name}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –ø–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∏—Å—å
        await callback.message.edit_text(
            f"üîç **–ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
            "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞—é –∏—Ö –¥–ª—è –≤–∞—Å...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
    except Exception as edit_error:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.answer(
                f"üîç **–ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
                "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞—é –∏—Ö –¥–ª—è –≤–∞—Å...\n"
                "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode="Markdown"
            )
        except Exception as send_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
            return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
        genres = get_randomized_genres()
        genre_queries = genres.get(genre_name, [])
        
        if not genre_queries:
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞**\n\n"
                f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∂–∞–Ω—Ä–∞ {genre_name}.\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–æ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤ (15-25 –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
        random_limit = random.randint(15, 25)
        logging.info(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {random_limit}")
        
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä—É
        try:
            results = await asyncio.to_thread(search_genre_tracks, genre_queries, random_limit)
            
        except Exception as search_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä—É {genre_name}: {search_error}")
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞**\n\n"
                f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É {genre_name}.\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"genre:{genre_name}")],
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return
        
        if not results:
            await callback.message.edit_text(
                f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                f"üö´ –ü–æ –∂–∞–Ω—Ä—É {genre_name} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await callback.message.edit_text(
                f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**\n\n"
                "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
                "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode="Markdown"
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ: {edit_error}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
        downloaded_tracks = []
        failed_tracks = []
        
        for i, track in enumerate(results, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await callback.message.edit_text(
                        f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ {i}/{len(results)} –ø–æ –∂–∞–Ω—Ä—É {genre_name}...**",
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                url = track.get('url', '')
                if not url:
                    logging.error(f"‚ùå –ù–µ—Ç URL –¥–ª—è —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–Ω–µ—Ç URL)")
                    continue
                
                try:
                    download_task = asyncio.create_task(
                        download_track_from_url_for_genre(user_id, url)
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue
                
                if filename:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            # –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        downloaded_tracks.append({
                            'filename': filename,
                            'title': track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'duration': track.get('duration', 0),
                            'size_mb': file_size_mb
                        })
                    except Exception as size_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {size_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞)")
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
                    try:
                        await callback.message.answer_audio(
                            types.FSInputFile(filename),
                            title=track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            performer=f"–ñ–∞–Ω—Ä: {genre_name}",
                            duration=track.get('duration', 0)
                        )
                        logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {audio_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        try:
                            await callback.message.answer_document(
                                types.FSInputFile(filename),
                                caption=f"üéµ **{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\nüé≠ –ñ–∞–Ω—Ä: {genre_name}"
                            )
                            logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        except Exception as doc_error:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {doc_error}")
                            failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            continue
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                else:
                    failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {e}")
                failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_count = len(downloaded_tracks)
        failed_count = len(failed_tracks)
        
        message_text = f"‚úÖ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        message_text += f"üéµ **–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {success_count} —Ç—Ä–µ–∫–æ–≤\n"
        
        if success_count > 0:
            total_size = sum(track.get('size_mb', 0) for track in downloaded_tracks)
            message_text += f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.1f} MB\n\n"
        
        if failed_count > 0:
            message_text += f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:** {failed_count} —Ç—Ä–µ–∫–æ–≤\n\n"
            message_text += "üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å:\n"
            message_text += "‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ SoundCloud\n"
            message_text += "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            message_text += "‚Ä¢ –ó–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏\n"
            message_text += "‚Ä¢ –ü—Ä–µ–≤—ã—Å–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
        
        message_text += "üéµ –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        message_text += "üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n\n"
        message_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message_text += "‚Ä¢ –°–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å\n"
        message_text += "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä\n"
        message_text += "‚Ä¢ üé≤ **–ù–∞–∂–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∂–µ –∂–∞–Ω—Ä –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤!**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        keyboard_buttons = []
        
        if failed_count > 0:
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"genre:{genre_name}")])
        

        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üé≤ –ï—â–µ —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞", callback_data=f"genre:{genre_name}")],
            [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await callback.message.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except Exception as send_error:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
        
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä—É {genre_name}: {e}")
        
        try:
            await callback.message.edit_text(
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É {genre_name}.\n"
                f"üîç –û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"genre:{genre_name}")],
                    [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
        except Exception as final_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {final_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∂–∞–Ω—Ä—É {genre_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            except Exception as last_error:
                logging.error(f"‚ùå –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {last_error}")

@dp.callback_query(F.data == "show_genres")
async def show_genres_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ —á–µ—Ä–µ–∑ callback"""
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    genres = get_genres()
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏ (–ø–æ –¥–≤–æ–µ –≤ —Ä—è–¥)
    keyboard = []
    genre_list = list(genres.keys())
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∂–∞–Ω—Ä—ã –ø–æ –¥–≤–æ–µ
    for i in range(0, len(genre_list), 2):
        row = [InlineKeyboardButton(text=genre_list[i], callback_data=f"genre:{genre_list[i]}")]
        if i + 1 < len(genre_list):
            row.append(InlineKeyboardButton(text=genre_list[i + 1], callback_data=f"genre:{genre_list[i + 1]}"))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üé≠ **–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏:**\n\n"
        "üéµ –Ø –Ω–∞–π–¥—É –∏ —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂—É –¥–ª—è –≤–∞—Å 8-12 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞!\n\n"
        "üí° –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∂–∞–Ω—Ä–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
        "‚Ä¢ üé≤ **–ö–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–µ–∫–∏!**\n\n"
        "üîÑ **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∂–∞–Ω—Ä –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤!**",
        parse_mode="Markdown",
        reply_markup=kb
    )







@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ inline-–º–µ–Ω—é"""
    user_id = str(callback.from_user.id)
    
    logging.info(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—é
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png")
            ),
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_main_menu: {e}")
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("bear.png")
                ),
                reply_markup=main_menu
            )
        except Exception as photo_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {photo_error}")
            await callback.message.edit_text("üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.callback_query(F.data == "search_artist_again")
async def search_artist_again_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="üéµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã, —á—å–∏ —Ç—Ä–µ–∫–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏."
            ),
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text(
            "üéµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã, —á—å–∏ —Ç—Ä–µ–∫–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )
    await state.set_state(SearchStates.waiting_for_artist)

@dp.callback_query(F.data.startswith("search_artist_retry:"))
async def search_artist_retry_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    artist_name = callback.data.split(":", 1)[1]
    user_id = str(callback.from_user.id)
    username = callback.from_user.username
    
    logging.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{artist_name}'")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    try:
        search_msg = await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption=f"üîÑ **–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
                        "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ SoundCloud...\n"
                        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            ),
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        search_msg = await callback.message.edit_text(
            f"üîÑ **–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
            "üéµ –ò—â—É –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ SoundCloud...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
    
    try:
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        results = await asyncio.to_thread(search_artist_tracks, artist_name, 10)
        
        if not results:
            await search_msg.edit_text(
                f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                f"üö´ –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é '{artist_name}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ SoundCloud.\n"
                "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ SoundCloud\n"
                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É\n\n"
                "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è\n"
                "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await search_msg.edit_text(
            f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é {len(results)} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...**\n\n"
            "üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...\n"
            "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        downloaded_tracks = []
        failed_tracks = []
        
        for i, track in enumerate(results, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                try:
                    await search_msg.edit_text(
                        f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ {i}/{len(results)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}...",
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
                url = track.get('url', '')
                if not url:
                    logging.error(f"‚ùå –ù–µ—Ç URL –¥–ª—è —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–Ω–µ—Ç URL)")
                    continue
                
                try:
                    download_task = asyncio.create_task(
                        download_track_from_url_for_genre(user_id, url)
                    )
                    filename = await asyncio.wait_for(download_task, timeout=120.0)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                except asyncio.TimeoutError:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")
                    continue
                
                if filename:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    try:
                        file_size = os.path.getsize(filename)
                        file_size_mb = file_size / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
                            failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)")
                            try:
                                os.remove(filename)
                            except:
                                pass
                            continue
                        
                        downloaded_tracks.append({
                            'filename': filename,
                            'title': track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'duration': track.get('duration', 0),
                            'size_mb': file_size_mb
                        })
                    except Exception as size_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {size_error}")
                        failed_tracks.append(f"{track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞)")
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                    try:
                        await callback.message.answer_audio(
                            types.FSInputFile(filename),
                            title=track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            performer=artist_name,
                            duration=track.get('duration', 0)
                        )
                        logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    except Exception as audio_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {audio_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        try:
                            await callback.message.answer_document(
                                types.FSInputFile(filename)
                            )
                            logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        except Exception as doc_error:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {doc_error}")
                            failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            continue
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                else:
                    failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {e}")
                failed_tracks.append(track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_count = len(downloaded_tracks)
        failed_count = len(failed_tracks)
        
        message_text = f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        keyboard_buttons = []
        
        if failed_count > 0:
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await search_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except Exception as send_error:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
        
        logging.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {artist_name}: {e}")
        
        try:
            await search_msg.edit_text(
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}.\n"
                f"üîç –û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"search_artist_retry:{artist_name}")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
        except Exception as final_error:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {final_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
                )
            except Exception as last_error:
                logging.error(f"‚ùå –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {last_error}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ç—Ä–µ–∫–æ–≤ —Å –ø–æ–º–µ—Ç–∫–æ–π ===
@dp.message(F.audio)
async def handle_forwarded_audio(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–º–µ—Ç–∫—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if message.forward_from:
        sender_name = message.forward_from.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–º–µ—Ç–∫—É
        caption = f"ÔøΩÔøΩ –û—Ç {sender_name}\n\n"
        if message.caption:
            caption += message.caption
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ —Å –ø–æ–º–µ—Ç–∫–æ–π
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            await message.answer_audio(
                audio=message.audio.file_id,
                caption=caption
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ main()")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if not bot or not dp:
            logging.error("‚ùå –ë–æ—Ç –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            raise RuntimeError("–ë–æ—Ç –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not API_TOKEN:
            logging.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        try:
            start_background_tasks()
            logging.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å
        
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        
        await dp.start_polling(bot, skip_updates=True)
        logging.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        raise

# –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –æ–Ω–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ





@dp.message(Command("check_payments"))
async def check_payments_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    pass



@dp.message(Command("admin_info"))
async def admin_info_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    debug_response = "üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
    debug_response += f"üÜî –í–∞—à ID: {user_id}\n"
    debug_response += f"üë§ –í–∞—à username: {username}\n"
    debug_response += f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: {is_admin(user_id, username)}\n\n"
    
    if not is_admin(user_id, username):
        await message.answer(f"{debug_response}‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –í–∞—à username: {username}\n‚Ä¢ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: wtfguys4")
        return
    
    response = "üëë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ:\n\n"
    response += f"üÜî –í–∞—à ID: {user_id}\n"
    response += f"üë§ –í–∞—à username: {username}\n"

@dp.message(Command("list_users"))
async def list_users_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        global user_tracks
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning("‚ö†Ô∏è list_users_command: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        if not user_tracks:
            await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–µ–∫–æ–≤ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_users = sorted(user_tracks.items(), key=lambda x: len(x[1]) if x[1] else 0, reverse=True)
        
        response = f"üìã –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_tracks)}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—Ä–µ–∫–æ–≤
        top_users = sorted_users[:20]
        
        for i, (user_id, tracks) in enumerate(top_users, 1):
            track_count = len(tracks) if tracks else 0
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ MB
            total_size = 0
            if tracks:
                for track in tracks:
                    if isinstance(track, dict):
                        total_size += track.get('size_mb', 0)
                    else:
                        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                        total_size += 0
            
            response += f"{i}. üÜî {user_id}\n"
            response += f"   üéµ –¢—Ä–µ–∫–æ–≤: {track_count} | üíæ –†–∞–∑–º–µ—Ä: {total_size:.1f} MB\n\n"
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ 20, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if len(user_tracks) > 20:
            remaining_users = sorted_users[20:]
            total_tracks = sum(len(tracks) if tracks else 0 for _, tracks in user_tracks.items())
            total_size = sum(
                sum(track.get('size_mb', 0) if isinstance(track, dict) else 0 for track in tracks) 
                if tracks else 0 
                for _, tracks in user_tracks.items()
            )
            
            response += f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_tracks)}\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks}\n"
            response += f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} MB\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks / len(user_tracks):.1f}\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4000:
            parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for i, part in enumerate(parts, 1):
                await message.answer(f"üìã –ß–∞—Å—Ç—å {i}/{len(parts)}:\n\n{part}")
        else:
            await message.answer(response)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ list_users_command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

@dp.message(Command("user_stats"))
async def user_stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        global user_tracks
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning("‚ö†Ô∏è user_stats_command: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        if not user_tracks:
            await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        

        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(user_tracks)
        total_tracks = 0
        total_size = 0
        users_with_tracks = 0
        
        for user_id, tracks in user_tracks.items():
            track_count = len(tracks) if tracks else 0
            
            if track_count > 0:
                users_with_tracks += 1
                total_tracks += track_count
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                for track in tracks:
                    if isinstance(track, dict):
                        total_size += track.get('size_mb', 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:\n\n"
        response += f"üë• **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        response += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–µ–∫–∞–º–∏: {users_with_tracks}\n"
        response += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ç—Ä–µ–∫–æ–≤: {total_users - users_with_tracks}\n\n"
        
        response += f"üéµ **–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks}\n"
        response += f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} MB\n"
        response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks / users_with_tracks:.1f}\n"
        response += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {total_size / users_with_tracks:.1f} MB\n\n"
        
        response += f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
        response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_with_tracks}\n"
        response += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(users_with_tracks / total_users * 100):.1f}%"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ user_stats_command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    response += f"üîê –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
    response += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    response += "‚Ä¢ /list_users - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞\n"
    response += "‚Ä¢ /user_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    response += "‚Ä¢ /admin_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ\n"
    response += "‚Ä¢ /cleanup_status - —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏\n"
    response += "‚Ä¢ /cleanup_toggle - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É\n"
    response += "‚Ä¢ /cleanup_now - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å–µ–π—á–∞—Å\n"
    
    await message.answer(response)

@dp.message(Command("check_me"))
async def check_me_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    response = "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n\n"
    response += f"üÜî ID: {user_id}\n"
    response += f"üë§ Username: {username}\n"
    response += f"üìù –ò–º—è: {first_name}\n"
    response += f"üìù –§–∞–º–∏–ª–∏—è: {last_name}\n"
    response += f"üîê –ê–¥–º–∏–Ω: {is_admin(user_id, username)}\n\n"
    
    if is_admin(user_id, username):
        response += "‚úÖ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
        response += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        response += "‚Ä¢ /admin_info - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        response += "‚Ä¢ /list_users - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞\n"
        response += "‚Ä¢ /user_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        response += "‚Ä¢ /cleanup_status - —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏\n"
        response += "‚Ä¢ /cleanup_toggle - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—á–∏—Å—Ç–∫—É\n"
        response += "‚Ä¢ /cleanup_now - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å–µ–π—á–∞—Å\n"
    else:
        response += "‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        response += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤\n"
    
    await message.answer(response)



# === –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–û–ô ===
@dp.message(Command("cleanup_status"))
async def cleanup_status_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ cache
        cache_dir = CACHE_DIR
        cache_info = "üìÅ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ cache:**\n\n"
        
        if os.path.exists(cache_dir):
            try:
                files = [f for f in os.listdir(cache_dir) if f.endswith('.mp3')]
                total_files = len(files)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
                total_size = 0
                for filename in files:
                    file_path = os.path.join(cache_dir, filename)
                    try:
                        total_size += os.path.getsize(file_path)
                    except:
                        pass
                
                total_size_mb = total_size / (1024 * 1024)
                
                cache_info += f"‚Ä¢ üìÇ –í—Å–µ–≥–æ MP3 —Ñ–∞–π–ª–æ–≤: {total_files}\n"
                cache_info += f"‚Ä¢ üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.2f} MB\n"
                cache_info += f"‚Ä¢ üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if AUTO_CLEANUP_ENABLED else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
                cache_info += f"‚Ä¢ ‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {AUTO_CLEANUP_DELAY} —Å–µ–∫\n"
                cache_info += f"‚Ä¢ üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if CLEANUP_LOGGING else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}\n\n"
                
                if total_files > 0:
                    cache_info += "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ñ–∞–π–ª–æ–≤:**\n"
                    for i, filename in enumerate(files[:10], 1):
                        file_path = os.path.join(cache_dir, filename)
                        try:
                            file_size = os.path.getsize(file_path)
                            file_size_mb = file_size / (1024 * 1024)
                            cache_info += f"{i}. {filename} ({file_size_mb:.2f} MB)\n"
                        except:
                            cache_info += f"{i}. {filename} (—Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω)\n"
                    
                    if total_files > 10:
                        cache_info += f"... –∏ –µ—â–µ {total_files - 10} —Ñ–∞–π–ª–æ–≤\n"
                else:
                    cache_info += "üìÇ –ü–∞–ø–∫–∞ cache –ø—É—Å—Ç–∞"
                    
            except Exception as e:
                cache_info += f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ cache: {e}"
        else:
            cache_info += "‚ùå –ü–∞–ø–∫–∞ cache –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        await message.answer(cache_info, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

@dp.message(Command("cleanup_toggle"))
async def cleanup_toggle_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        global AUTO_CLEANUP_ENABLED
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        AUTO_CLEANUP_ENABLED = not AUTO_CLEANUP_ENABLED
        
        status = "‚úÖ –≤–∫–ª—é—á–µ–Ω–∞" if AUTO_CLEANUP_ENABLED else "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        response = f"üßπ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ {status}**\n\n"
        response += f"**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        response += f"‚Ä¢ üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if AUTO_CLEANUP_ENABLED else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        response += f"‚Ä¢ ‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {AUTO_CLEANUP_DELAY} —Å–µ–∫\n"
        response += f"‚Ä¢ üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if CLEANUP_LOGGING else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}\n\n"
        
        if AUTO_CLEANUP_ENABLED:
            response += "‚úÖ –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        else:
            response += "‚ùå –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª—ã –ù–ï –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è"
        
        await message.answer(response, parse_mode="Markdown")
        logging.info(f"üßπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} ({username}) {'–≤–∫–ª—é—á–∏–ª' if AUTO_CLEANUP_ENABLED else '–≤—ã–∫–ª—é—á–∏–ª'} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏: {e}")

@dp.message(Command("cleanup_now"))
async def cleanup_now_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    if not is_admin(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        await message.answer("üßπ –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        cleanup_orphaned_files()
        
        await message.answer("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–æ–π /cleanup_status")
        logging.info(f"üßπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—á–∏—Å—Ç–∫–∏: {e}")


        






@dp.callback_query(F.data.startswith("add_genre_to_collection:"))
async def add_genre_tracks_to_collection(callback: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –∂–∞–Ω—Ä–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data_parts = callback.data.split(":")
        if len(data_parts) != 3:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        genre_name = data_parts[1]
        track_count = int(data_parts[2])
        user_id = str(callback.from_user.id)
        
        logging.info(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª—è–µ—Ç {track_count} —Ç—Ä–µ–∫–æ–≤ –∂–∞–Ω—Ä–∞ {genre_name} –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"üíæ **–î–æ–±–∞–≤–ª—è—é {track_count} —Ç—Ä–µ–∫–æ–≤ –∂–∞–Ω—Ä–∞ {genre_name} –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é...**\n\n"
            "üéµ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
            parse_mode="Markdown"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ cache
        cache_files = []
        for filename in os.listdir(CACHE_DIR):
            if filename.endswith('.mp3'):
                file_path = os.path.join(CACHE_DIR, filename)
                if os.path.exists(file_path):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —É–∂–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if not is_file_in_collection(file_path):
                        cache_files.append(file_path)
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ñ–∞–π–ª–æ–≤ (–≥–¥–µ N = track_count)
        recent_files = cache_files[-track_count:] if len(cache_files) >= track_count else cache_files
        
        added_count = 0
        total_size = 0
        
        for file_path in recent_files:
            try:
                if os.path.exists(file_path):
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size = os.path.getsize(file_path)
                    file_size_mb = file_size / (1024 * 1024)
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                    track_info = {
                        "title": os.path.basename(file_path),
                        "url": f"file://{file_path}",
                        "original_url": "",  # –î–ª—è —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä–∞–º/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º/–∞–ª—å–±–æ–º–∞–º URL –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                        "size_mb": round(file_size_mb, 2),
                        "needs_migration": False
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if str(user_id) not in user_tracks:
                        user_tracks[str(user_id)] = []
                    elif user_tracks[str(user_id)] is None:
                        user_tracks[str(user_id)] = []
                    
                    user_tracks[str(user_id)].append(track_info)
                    added_count += 1
                    total_size += file_size_mb
                    
                    logging.info(f"‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é: {os.path.basename(file_path)}")
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ {file_path}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        save_tracks()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"‚úÖ **–¢—Ä–µ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!**\n\n"
        message_text += f"üéµ **–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤:** {added_count}\n"
        message_text += f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.1f} MB\n"
        message_text += f"üé≠ **–ñ–∞–Ω—Ä:** {genre_name}\n\n"
        message_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message_text += "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –º—É–∑—ã–∫–∞¬ª\n"
        message_text += "‚Ä¢ –°–ª—É—à–∞—Ç—å –∏—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
        message_text += "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏\n\n"
        message_text += "üéµ **–í—Å–µ —Ç—Ä–µ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéº –ú–æ—è –º—É–∑—ã–∫–∞", callback_data="my_music")],
            [InlineKeyboardButton(text="üé≤ –ï—â–µ —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞", callback_data=f"genre:{genre_name}")],
            [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="show_genres")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª {added_count} —Ç—Ä–µ–∫–æ–≤ –∂–∞–Ω—Ä–∞ {genre_name} –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∂–∞–Ω—Ä–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤", show_alert=True)

@dp.callback_query(F.data.startswith("add_artist_to_collection:"))
async def add_artist_tracks_to_collection(callback: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data_parts = callback.data.split(":")
        if len(data_parts) != 3:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        artist_name = data_parts[1]
        track_count = int(data_parts[2])
        user_id = str(callback.from_user.id)
        
        logging.info(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª—è–µ—Ç {track_count} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"üíæ **–î–æ–±–∞–≤–ª—è—é {track_count} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é...**\n\n"
            "üéµ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
            parse_mode="Markdown"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ cache
        cache_files = []
        for filename in os.listdir(CACHE_DIR):
            if filename.endswith('.mp3'):
                file_path = os.path.join(CACHE_DIR, filename)
                if os.path.exists(file_path):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —É–∂–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if not is_file_in_collection(file_path):
                        cache_files.append(file_path)
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ñ–∞–π–ª–æ–≤ (–≥–¥–µ N = track_count)
        recent_files = cache_files[-track_count:] if len(cache_files) >= track_count else cache_files
        
        added_count = 0
        total_size = 0
        
        for file_path in recent_files:
            try:
                if os.path.exists(file_path):
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size = os.path.getsize(file_path)
                    file_size_mb = file_size / (1024 * 1024)
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                    track_info = {
                        "title": os.path.basename(file_path),
                        "url": f"file://{file_path}",
                        "original_url": "",  # –î–ª—è —Ç—Ä–µ–∫–æ–≤ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º URL –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                        "size_mb": round(file_size_mb, 2),
                        "needs_migration": False
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if str(user_id) not in user_tracks:
                        user_tracks[str(user_id)] = []
                    elif user_tracks[str(user_id)] is None:
                        user_tracks[str(user_id)] = []
                    
                    user_tracks[str(user_id)].append(track_info)
                    added_count += 1
                    total_size += file_size_mb
                    
                    logging.info(f"‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é: {os.path.basename(file_path)}")
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ {file_path}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        save_tracks()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"‚úÖ **–¢—Ä–µ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!**\n\n"
        message_text += f"üéµ **–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤:** {added_count}\n"
        message_text += f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.1f} MB\n"
        message_text += f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {artist_name}\n\n"
        message_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message_text += "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –º—É–∑—ã–∫–∞¬ª\n"
        message_text += "‚Ä¢ –°–ª—É—à–∞—Ç—å –∏—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
        message_text += "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏\n\n"
        message_text += "üéµ **–í—Å–µ —Ç—Ä–µ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéº –ú–æ—è –º—É–∑—ã–∫–∞", callback_data="my_music")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª {added_count} —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name} –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤", show_alert=True)

@dp.callback_query(F.data == "soundcloud_search")
async def soundcloud_search_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –Ω–∞ SoundCloud"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="üéµ **–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud**\n\n"
                        "üîç **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:**\n\n"
                        "üí° **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:**\n"
                        "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º—É–∑—ã–∫–∏\n"
                        "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã\n"
                        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
                        "üîç **–°–≤–æ–π –∑–∞–ø—Ä–æ—Å:**\n"
                        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n"
                        "‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –∏—â–µ—Ç–µ\n\n"
                        "üéµ **SoundCloud - –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –æ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!**"
            ),
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", callback_data="soundcloud_try_search")],
                [InlineKeyboardButton(text="üîç –°–≤–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="sc_custom_search")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text(
            "üéµ **–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud**\n\n"
            "üîç **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:**\n\n"
            "üí° **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:**\n"
            "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º—É–∑—ã–∫–∏\n"
            "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã\n"
            "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
            "üîç **–°–≤–æ–π –∑–∞–ø—Ä–æ—Å:**\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –∏—â–µ—Ç–µ\n\n"
            "üéµ **SoundCloud - –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –æ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!**",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", callback_data="soundcloud_try_search")],
                [InlineKeyboardButton(text="üîç –°–≤–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="sc_custom_search")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

@dp.callback_query(F.data == "soundcloud_try_search")
async def soundcloud_try_search_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –Ω–∞ SoundCloud"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="üéµ **–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud**\n\n"
                        "üîç **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:**\n\n"
                        "üí° **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
                        "‚Ä¢ Electronic Music\n"
                        "‚Ä¢ Hip Hop Beats\n"
                        "‚Ä¢ Ambient Sounds\n"
                        "‚Ä¢ Rock Instrumental\n"
                        "‚Ä¢ Chill Music\n"
                        "‚Ä¢ Dance Music",
                parse_mode="Markdown"
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéµ Electronic Music", callback_data="sc_search:electronic music")],
                [InlineKeyboardButton(text="üéµ Hip Hop Beats", callback_data="sc_search:hip hop beats")],
                [InlineKeyboardButton(text="üéµ Ambient Sounds", callback_data="sc_search:ambient sounds")],
                [InlineKeyboardButton(text="üéµ Rock Instrumental", callback_data="sc_search:rock instrumental")],
                [InlineKeyboardButton(text="üéµ Chill Music", callback_data="sc_search:chill music")],
                [InlineKeyboardButton(text="üéµ Dance Music", callback_data="sc_search:dance music")],
                [InlineKeyboardButton(text="üîç –°–≤–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="sc_custom_search")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="soundcloud_search")]
            ])
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text(
            "üéµ **–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud**\n\n"
            "üîç **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:**\n\n"
            "üí° **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
            "‚Ä¢ Electronic Music\n"
            "‚Ä¢ Hip Hop Beats\n"
            "‚Ä¢ Ambient Sounds\n"
            "‚Ä¢ Rock Instrumental\n"
            "‚Ä¢ Chill Music\n"
            "‚Ä¢ Dance Music",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéµ Electronic Music", callback_data="sc_search:electronic music")],
                [InlineKeyboardButton(text="üéµ Hip Hop Beats", callback_data="sc_search:hip hop beats")],
                [InlineKeyboardButton(text="üéµ Ambient Sounds", callback_data="sc_search:ambient sounds")],
                [InlineKeyboardButton(text="üéµ Rock Instrumental", callback_data="sc_search:rock instrumental")],
                [InlineKeyboardButton(text="üéµ Chill Music", callback_data="sc_search:chill music")],
                [InlineKeyboardButton(text="üéµ Dance Music", callback_data="sc_search:dance music")],
                [InlineKeyboardButton(text="üîç –°–≤–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="sc_custom_search")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="soundcloud_search")]
            ])
        )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º SoundCloud ===
@dp.callback_query(F.data.startswith("sc_search:"))
async def quick_soundcloud_search(callback: types.CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ SoundCloud"""
    try:
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = callback.data.split(":", 1)[1]
        
        logging.info(f"üéµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ SoundCloud: '{query}'")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –Ω–∞—á–∞–ª—Å—è –ø–æ–∏—Å–∫
        await callback.message.edit_text(
            f"üîç **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–∞ SoundCloud...**\n\n"
            f"üéµ –ò—â—É —Ç—Ä–µ–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: `{query}`\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
            parse_mode="Markdown"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = await search_soundcloud(query)
        
        if results and len(results) > 0:
            await send_search_results(callback.message.chat.id, results)
            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ '{query}'")
        else:
            await callback.message.edit_text(
                f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                f"üîç –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{query}` –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ –î—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
                "‚Ä¢ –ë–æ–ª–µ–µ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="soundcloud_try_search")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="soundcloud_search")]
                ])
            )
            logging.info(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ '{query}'")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ SoundCloud: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ", show_alert=True)

@dp.callback_query(F.data == "sc_custom_search")
async def custom_soundcloud_search(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
        await state.set_state(SearchStates.waiting_for_soundcloud_query)
        
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="üéµ **–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å**\n\n"
                        "üîç **–ß—Ç–æ –∏—Å–∫–∞—Ç—å:**\n"
                        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞\n"
                        "‚Ä¢ –ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
                        "‚Ä¢ –ñ–∞–Ω—Ä –º—É–∑—ã–∫–∏\n"
                        "‚Ä¢ –õ—é–±–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
                        "üí° **–°–æ–≤–µ—Ç—ã:**\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞\n"
                        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏\n"
                        "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏\n\n"
                        "üéµ **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç!**",
                parse_mode="Markdown"
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ SoundCloud", callback_data="soundcloud_search")],
                [InlineKeyboardButton(text="‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        
        logging.info(f"üéµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ SoundCloud –∑–∞–ø—Ä–æ—Å–∞")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ custom_soundcloud_search: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data == "search_soundcloud_again")
async def search_soundcloud_again_callback(callback: types.CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞ SoundCloud"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("bear.png"),
                caption="üéµ **–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud**\n\n"
                        "üîç **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:**\n\n"
                        "üí° **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:**\n"
                        "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º—É–∑—ã–∫–∏\n"
                        "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã\n"
                        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
                        "üîç **–°–≤–æ–π –∑–∞–ø—Ä–æ—Å:**\n"
                        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n"
                        "‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –∏—â–µ—Ç–µ\n\n"
                        "üéµ **SoundCloud - –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –æ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!**"
            ),
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", callback_data="soundcloud_try_search")],
                [InlineKeyboardButton(text="üîç –°–≤–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="sc_custom_search")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text(
            "üéµ **–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud**\n\n"
            "üîç **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:**\n\n"
            "üí° **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:**\n"
            "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º—É–∑—ã–∫–∏\n"
            "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã\n"
            "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
            "üîç **–°–≤–æ–π –∑–∞–ø—Ä–æ—Å:**\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –∏—â–µ—Ç–µ\n\n"
            "üéµ **SoundCloud - –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –æ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!**",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", callback_data="soundcloud_try_search")],
                [InlineKeyboardButton(text="üîç –°–≤–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="sc_custom_search")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

@dp.callback_query(F.data.startswith("sc:"))
async def download_soundcloud_track(callback: types.CallbackQuery):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ —Å SoundCloud"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback - –∏—Å–ø–æ–ª—å–∑—É–µ–º split —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–º—É –¥–≤–æ–µ—Ç–æ—á–∏—é
        callback_data = callback.data
        if not callback_data.startswith("sc:"):
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –ø–æ—Å–ª–µ "sc:" –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –µ–≥–æ
        encoded_url = callback_data[3:]  # –£–±–∏—Ä–∞–µ–º "sc:" –≤ –Ω–∞—á–∞–ª–µ
        
        if not encoded_url:
            await callback.answer("‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
        url = urllib.parse.unquote(encoded_url)
        
        logging.info(f"üîó –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: {url}")
        user_id = str(callback.from_user.id)
        
        logging.info(f"üéµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ —Å SoundCloud: {url}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        await callback.message.edit_text(
            f"üíæ **–°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫ —Å SoundCloud...**\n\n"
            "üéµ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
            parse_mode="Markdown"
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        filename = await download_track_from_url(user_id, url)
        
        if filename:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success = await send_audio_file(callback.message, filename, auto_cleanup=True, user_id=user_id)
            
            if success:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = f"‚úÖ **–¢—Ä–µ–∫ —Å SoundCloud —Å–∫–∞—á–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!**\n\n"
                message_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                message_text += "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –º—É–∑—ã–∫–∞¬ª\n"
                message_text += "‚Ä¢ –°–ª—É—à–∞—Ç—å –∏—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
                message_text += "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏\n\n"
                message_text += "üéµ **–í—Å–µ —Ç—Ä–µ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!**"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üéº –ú–æ—è –º—É–∑—ã–∫–∞", callback_data="my_music")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
                
                await callback.message.edit_text(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
                
                logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–ª —Ç—Ä–µ–∫ —Å SoundCloud: {url}")
            else:
                await callback.message.edit_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞**\n\n"
                    "–¢—Ä–µ–∫ –±—ã–ª —Å–∫–∞—á–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ—è –º—É–∑—ã–∫–∞¬ª.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üéº –ú–æ—è –º—É–∑—ã–∫–∞", callback_data="my_music")],
                        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
        else:
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ —Å SoundCloud.\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –¢—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "‚Ä¢ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏\n"
                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è SoundCloud",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=callback.data)],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ —Å SoundCloud: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞", show_alert=True)

@dp.message(Command("sc"))
async def search_soundcloud_command(message: types.Message):
    """–ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ —Å SoundCloud"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        if len(message.text.split()) < 2:
            await message.answer(
                "üéµ **–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud**\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/sc <–∑–∞–ø—Ä–æ—Å>`\n\n"
                "üîç **–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/sc electronic music`\n"
                "‚Ä¢ `/sc hip hop beats`\n"
                "‚Ä¢ `/sc ambient sounds`\n"
                "‚Ä¢ `/sc rock instrumental`\n\n"
                "üéµ –Ø –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ SoundCloud!",
                parse_mode="Markdown"
            )
            return
        
        query = message.text.split(" ", 1)[1].strip()
        user_id = str(message.from_user.id)
        
        logging.info(f"üéµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—â–µ—Ç –Ω–∞ SoundCloud: '{query}'")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        search_msg = await message.answer(
            f"üîç **–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud...**\n\n"
            f"üéµ –ò—â—É —Ç—Ä–µ–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: `{query}`\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
            parse_mode="Markdown"
        )
        
        # –ò—â–µ–º –Ω–∞ SoundCloud
        results = await search_soundcloud(query)
        
        if results and len(results) > 0:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            await search_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            await send_search_results(message.chat.id, results)
            
            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–∫–æ–≤ –Ω–∞ SoundCloud –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            await search_msg.edit_text(
                f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ SoundCloud**\n\n"
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É `{query}` –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="search_soundcloud_again")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            
            logging.info(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ SoundCloud –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}'")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ SoundCloud: {e}")
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ SoundCloud.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_soundcloud_again")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è SoundCloud –ø–æ–∏—Å–∫–∞ ===
@dp.message(SearchStates.waiting_for_soundcloud_query)
async def handle_soundcloud_query_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è SoundCloud"""
    try:
        user_id = str(message.from_user.id)
        query = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
            return
        
        if not query or len(query) < 2:
            await message.answer(
                "‚ùå **–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å**\n\n"
                "üí° –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).",
                parse_mode="Markdown"
            )
            return
        
        logging.info(f"üéµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å SoundCloud: '{query}'")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        search_msg = await message.answer(
            f"üîç **–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud...**\n\n"
            f"üéµ –ò—â—É —Ç—Ä–µ–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: `{query}`\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
            parse_mode="Markdown"
        )
        
        # –ò—â–µ–º –Ω–∞ SoundCloud
        results = await search_soundcloud(query)
        
        if results and len(results) > 0:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            await search_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            await send_search_results(message.chat.id, results)
            
            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            await search_msg.edit_text(
                f"‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ SoundCloud**\n\n"
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É `{query}` –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="soundcloud_try_search")],
                    [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="soundcloud_search")]
                ])
            )
            
            logging.info(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}'")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SoundCloud –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ SoundCloud.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="soundcloud_try_search")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="soundcloud_search")]
            ])
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await state.clear()

async def get_recommended_tracks(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
    try:
        global user_tracks, user_recommendation_history
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user_recommendation_history' not in globals():
            user_recommendation_history = {}
        
        if user_id not in user_recommendation_history:
            user_recommendation_history[user_id] = {
                'shown_tracks': set(),  # –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
                'used_queries': set(),  # –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                'last_artist': None,    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç
                'query_counter': 0      # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            }
        
        history = user_recommendation_history[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_tracks –Ω–µ None
        if user_tracks is None:
            user_tracks = {}
            logging.warning(f"‚ö†Ô∏è get_recommended_tracks: user_tracks –±—ã–ª None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        
        user_tracks_list = user_tracks.get(str(user_id), [])
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ç—Ä–µ–∫–∏, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ –∞—Ä—Ç–∏—Å—Ç–∞–º
        if user_tracks_list and len(user_tracks_list) > 0:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            artists = set()
            for track in user_tracks_list:
                if track and isinstance(track, dict):
                    title = track.get('title', '')
                    if title:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (–æ–±—ã—á–Ω–æ —Ñ–æ—Ä–º–∞—Ç "–ê—Ä—Ç–∏—Å—Ç - –ù–∞–∑–≤–∞–Ω–∏–µ")
                        if ' - ' in title:
                            artist = title.split(' - ')[0].strip()
                            if artist and len(artist) > 2:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                                artists.add(artist)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏
            if artists:
                logging.info(f"üéØ –ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ {len(artists)} –∞—Ä—Ç–∏—Å—Ç–∞–º: {', '.join(list(artists)[:3])}")
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–µ–∫–∏ –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                all_results = []
                used_artists = set()
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –æ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏
                available_artists = [a for a in artists if a != history['last_artist']]
                if not available_artists:
                    available_artists = list(artists)
                
                # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
                random.shuffle(available_artists)
                
                # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π
                max_artists_to_search = min(4, len(available_artists))
                
                # –ï—Å–ª–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –º–∞–ª–æ (1-2), –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                if len(available_artists) <= 2:
                    # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    for i, artist in enumerate(available_artists):
                        if len(all_results) >= 10:
                            break
                            
                        logging.info(f"üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –æ—Ç –∞—Ä—Ç–∏—Å—Ç–∞ {i+1}/{len(available_artists)}: {artist}")
                        
                        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
                        search_variations = [
                            artist,  # –ü—Ä–æ—Å—Ç–æ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞
                            f"{artist} music",  # –ê—Ä—Ç–∏—Å—Ç + music
                            f"{artist} songs",  # –ê—Ä—Ç–∏—Å—Ç + songs
                            f"{artist} tracks",  # –ê—Ä—Ç–∏—Å—Ç + tracks
                            f"{artist} new",  # –ê—Ä—Ç–∏—Å—Ç + new
                            f"{artist} latest"  # –ê—Ä—Ç–∏—Å—Ç + latest
                        ]
                        
                        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
                        random.shuffle(search_variations)
                        
                        for search_query in search_variations[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
                            if len(all_results) >= 10:
                                break
                                
                            artist_results = await search_soundcloud(search_query)
                            if artist_results:
                                # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
                                new_tracks = []
                                for track in artist_results:
                                    track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                                    if track_id not in history['shown_tracks']:
                                        new_tracks.append(track)
                                        if len(new_tracks) >= 4:  # –ë–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
                                            break
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –∫ –æ–±—â–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                                all_results.extend(new_tracks)
                                used_artists.add(artist)
                                
                                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                                await asyncio.sleep(0.1)
                                
                                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞—Ä—Ç–∏—Å—Ç—É
                                if len(new_tracks) >= 3:
                                    break
                else:
                    # –ï—Å–ª–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
                    tracks_per_artist = max(3, 10 // max_artists_to_search)
                    
                    for i, artist in enumerate(available_artists[:max_artists_to_search]):
                        if len(all_results) >= 10:
                            break
                            
                        logging.info(f"üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –æ—Ç –∞—Ä—Ç–∏—Å—Ç–∞ {i+1}/{max_artists_to_search}: {artist}")
                        
                        # –ò—â–µ–º —Ç—Ä–µ–∫–∏ —ç—Ç–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ –Ω–∞ SoundCloud
                        artist_results = await search_soundcloud(artist)
                        if artist_results:
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
                            new_tracks = []
                            for track in artist_results:
                                track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                                if track_id not in history['shown_tracks']:
                                    new_tracks.append(track)
                                    if len(new_tracks) >= tracks_per_artist:
                                        break
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –∫ –æ–±—â–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                            all_results.extend(new_tracks)
                            used_artists.add(artist)
                            
                            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                            await asyncio.sleep(0.1)
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
                if all_results:
                    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    random.shuffle(all_results)
                    
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç—Ä–µ–∫–æ–≤
                    final_tracks = all_results[:10]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
                    for track in final_tracks:
                        track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                        history['shown_tracks'].add(track_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
                    if used_artists:
                        history['last_artist'] = random.choice(list(used_artists))
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 100 —Ç—Ä–µ–∫–æ–≤)
                    if len(history['shown_tracks']) > 100:
                        history['shown_tracks'] = set(list(history['shown_tracks'])[-50:])
                    
                    logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(final_tracks)} —Ç—Ä–µ–∫–æ–≤ –æ—Ç {len(used_artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
                    
                    # –ò–Ω–æ–≥–¥–∞ (20% —Å–ª—É—á–∞–µ–≤) –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    if random.random() < 0.2 and len(final_tracks) < 10:
                        logging.info(f"üé≤ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è")
                        popular_tracks = await get_popular_tracks_for_diversity(history)
                        if popular_tracks:
                            # –î–æ–±–∞–≤–ª—è–µ–º 2-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–∞
                            num_popular = min(3, 10 - len(final_tracks))
                            final_tracks.extend(popular_tracks[:num_popular])
                            logging.info(f"üé≤ –î–æ–±–∞–≤–ª–µ–Ω–æ {num_popular} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤")
                    
                    # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, –∏–Ω–æ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–ª—è —Å–≤–µ–∂–µ—Å—Ç–∏
                    if len(history['shown_tracks']) > 80 and random.random() < 0.3:
                        logging.info(f"üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Å–≤–µ–∂–µ—Å—Ç–∏")
                        history['shown_tracks'].clear()
                        history['used_queries'].clear()
                    
                    return final_tracks
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏
        logging.info(f"üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        popular_queries = [
            # –¢—Ä–µ–Ω–¥—ã 2024
            "trending music 2024", "top hits 2024", "viral music 2024", "chart toppers 2024",
            "popular songs 2024", "music trending now", "trending audio 2024", "hit songs 2024",
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã
            "pop music trending", "hip hop trending", "electronic music trending", "rock music trending",
            "indie music trending", "alternative trending", "r&b trending", "country music trending",
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "music this week", "songs this month", "trending this week", "popular this month",
            "viral this week", "hits this month", "new music today", "fresh tracks today",
            
            # –û–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "trending tracks", "popular music", "viral songs", "chart music",
            "music charts", "trending audio", "popular tracks", "hit music"
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏
        available_queries = [q for q in popular_queries if q not in history['used_queries']]
        if not available_queries:
            # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            history['used_queries'].clear()
            available_queries = popular_queries
        
        query = random.choice(available_queries)
        history['used_queries'].add(query)
        history['query_counter'] += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        if len(history['used_queries']) > 20:
            history['used_queries'] = set(list(history['used_queries'])[-10:])
        
        results = await search_soundcloud(query)
        
        if results:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
            new_tracks = []
            for track in results:
                track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                if track_id not in history['shown_tracks']:
                    new_tracks.append(track)
                    if len(new_tracks) >= 10:
                        break
            
            # –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if len(new_tracks) < 5:
                remaining_tracks = [t for t in results if t not in new_tracks]
                random.shuffle(remaining_tracks)
                new_tracks.extend(remaining_tracks[:10-len(new_tracks)])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
            for track in new_tracks:
                track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                history['shown_tracks'].add(track_id)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 100 —Ç—Ä–µ–∫–æ–≤)
            if len(history['shown_tracks']) > 100:
                history['shown_tracks'] = set(list(history['shown_tracks'])[-50:])
            
            return new_tracks[:10]
        
        return []
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []

async def get_popular_tracks_for_diversity(history):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    try:
        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –º—É–∑—ã–∫–∏
        diversity_queries = [
            "trending music", "viral songs", "popular tracks", "chart music",
            "music trending now", "hit songs", "trending audio", "popular music",
            "viral music", "trending tracks", "chart toppers", "music charts"
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        query = random.choice(diversity_queries)
        
        # –ò—â–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏
        results = await search_soundcloud(query)
        
        if results:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
            new_tracks = []
            for track in results:
                track_id = f"{track.get('title', '')}_{track.get('url', '')}"
                if track_id not in history['shown_tracks']:
                    new_tracks.append(track)
                    if len(new_tracks) >= 5:  # –ë–µ—Ä–µ–º –¥–æ 5 —Ç—Ä–µ–∫–æ–≤
                        break
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            random.shuffle(new_tracks)
            return new_tracks
        
        return []
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è: {e}")
        return []

async def search_soundcloud(query):
    """–ü–æ–∏—Å–∫ –Ω–∞ SoundCloud —á–µ—Ä–µ–∑ yt-dlp"""
    try:
        logging.info(f"üîç –ü–æ–∏—Å–∫ –Ω–∞ SoundCloud: {query}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º scsearch
        search_query = f"scsearch{SOUNDCLOUD_SEARCH_LIMIT}:{query}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –¥–ª—è –ø–æ–∏—Å–∫–∞
        ydl_opts = {
            'format': 'bestaudio/best',
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            'ignoreerrors': True,
            'no_warnings': True,
            'timeout': 30,
            'retries': 3,
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(search_query, download=False)
            
        if info and 'entries' in info:
            results = []
            for entry in info['entries']:
                if entry and isinstance(entry, dict):
                    title = entry.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    url = entry.get('url', '')
                    duration = entry.get('duration', 0)
                    
                    if url and title:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
                        if duration:
                            if duration < MIN_TRACK_DURATION:  # –ú–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã
                                logging.info(f"‚è±Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º SoundCloud —Ç—Ä–µ–∫ '{title}' - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration} —Å–µ–∫ (< 1 –º–∏–Ω)")
                                continue
                            if duration > MAX_TRACK_DURATION:  # –ë–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç
                                logging.info(f"‚è±Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º SoundCloud —Ç—Ä–µ–∫ '{title}' - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration} —Å–µ–∫ (> 10 –º–∏–Ω)")
                                continue
                        
                        results.append({
                            'title': title,
                            'url': url,
                            'duration': duration,
                            'source': 'sc',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'sc' –¥–ª—è SoundCloud
                        })
            
            logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–∫–æ–≤ –Ω–∞ SoundCloud –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º SoundCloud
            cache_key = f"{SOUNDCLOUD_CACHE_PREFIX}:{query}"
            set_cached_search(cache_key, results)
            
            return results
        
        logging.warning(f"üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ SoundCloud: {query}")
        return []
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ SoundCloud: {e}")
        return []

async def send_audio_file(message, file_path, auto_cleanup=True, user_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
    try:
        if not os.path.exists(file_path):
            logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_size = os.path.getsize(file_path)
        file_size_mb = file_size / (1024 * 1024)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size_mb > MAX_FILE_SIZE_MB:
            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.2f}MB > {MAX_FILE_SIZE_MB}MB")
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        try:
            await message.answer_audio(
                types.FSInputFile(file_path),
                title=os.path.basename(file_path).replace('.mp3', ''),
                performer="SoundCloud",
                duration=0  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            )
            logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if auto_cleanup and user_id:
                await auto_cleanup_file(file_path, is_collection_track=False, user_id=user_id)
            
            return True
            
        except Exception as audio_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {audio_error}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            try:
                await message.answer_document(
                    types.FSInputFile(file_path)
                )
                logging.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {file_path}")
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                if auto_cleanup and user_id:
                    await auto_cleanup_file(file_path, is_collection_track=False, user_id=user_id)
                
                return True
                
            except Exception as doc_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_error}")
                return False
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_audio_file: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(main())