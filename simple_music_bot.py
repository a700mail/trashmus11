import logging
import os
import asyncio
import json
import time
import random
import secrets
import yt_dlp
import browser_cookie3
from http.cookiejar import MozillaCookieJar
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import re
from functools import partial
import aiohttp
from datetime import datetime, timedelta
from collections import deque
from asyncio import PriorityQueue
from concurrent.futures import ThreadPoolExecutor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
    logging.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
except ImportError:
    logging.warning("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: {e}")

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

MAX_FILE_SIZE_MB = 50
CACHE_DIR = "cache"
COOKIES_FILE = os.path.join(os.path.dirname(__file__), "cookies.txt")
TRACKS_FILE = os.path.join(os.path.dirname(__file__), "tracks.json")
SEARCH_CACHE_FILE = os.path.join(os.path.dirname(__file__), "search_cache.json")

# === –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–ò ===
AUTO_CLEANUP_ENABLED = True
AUTO_CLEANUP_DELAY = 1.0
CLEANUP_LOGGING = True

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–ò–°–ö–ê ===
SEARCH_CACHE_TTL = 600
PAGE_SIZE = 10

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–• –ó–ê–ì–†–£–ó–û–ö ===
MAX_CONCURRENT_DOWNLOADS = 5
MAX_CONCURRENT_DOWNLOADS_PER_USER = 2
ACTIVE_DOWNLOADS = 0
user_download_semaphores = {}

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–™–ï–ö–¢–´ –î–õ–Ø –ó–ê–ì–†–£–ó–û–ö ===
yt_executor = ThreadPoolExecutor(max_workers=8, thread_name_prefix="yt_downloader")
download_semaphore = asyncio.Semaphore(MAX_CONCURRENT_DOWNLOADS)

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
user_tracks = {}
user_recommendation_history = {}

# === –ù–ê–°–¢–†–û–ô–ö–ò –ê–ù–¢–ò–°–ü–ê–ú–ê ===
ANTISPAM_DELAY = 1.0
user_last_request = {}

# === –ù–ê–°–¢–†–û–ô–ö–ò RENDER ===
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/bot/{API_TOKEN}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
os.makedirs(CACHE_DIR, exist_ok=True)

# === –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===
class SearchStates(StatesGroup):
    waiting_for_search = State()
    waiting_for_artist = State()
    waiting_for_artist_search = State()

# === JSON —Ñ—É–Ω–∫—Ü–∏–∏ ===
def load_json(path, default):
    if not path:
        logging.warning("‚ö†Ô∏è load_json: –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        return default
        
    if not os.path.exists(path):
        logging.info(f"üìÅ –§–∞–π–ª {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return default
        
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            if data is None:
                logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {path} —Å–æ–¥–µ—Ä–∂–∏—Ç None, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return default
            return data
    except json.JSONDecodeError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {path}: {e}")
        return default
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {e}")
        return default

def save_json(path, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {e}")
        return False

def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (MM:SS –∏–ª–∏ HH:MM:SS)"""
    try:
        if not seconds or not isinstance(seconds, (int, float)) or seconds <= 0:
            return ""
        
        seconds = int(float(seconds))
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        secs = seconds % 60
        
        if hours > 0:
            return f"{hours}:{minutes:02d}:{secs:02d}"
        else:
            return f"{minutes}:{secs:02d}"
            
    except (ValueError, TypeError, OverflowError):
        return ""

def check_antispam(user_id: str) -> tuple[bool, float]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        current_time = time.time()
        last_request_time = user_last_request.get(str(user_id), 0)
        
        if current_time - last_request_time >= ANTISPAM_DELAY:
            user_last_request[str(user_id)] = current_time
            return True, 0.0
        
        time_until_next = ANTISPAM_DELAY - (current_time - last_request_time)
        return False, time_until_next
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return True, 0.0

def get_user_download_semaphore(user_id: str) -> asyncio.Semaphore:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_download_semaphores:
        user_download_semaphores[user_id] = asyncio.Semaphore(MAX_CONCURRENT_DOWNLOADS_PER_USER)
    return user_download_semaphores[user_id]

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–†–ï–ö–ê–ú–ò ===
async def download_track_to_temp(user_id: str, url: str, title: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É"""
    try:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_title = re.sub(r'[^\w\s-]', '', title).strip()
        safe_title = re.sub(r'[-\s]+', '-', safe_title)
        timestamp = int(time.time())
        random_suffix = secrets.token_hex(4)
        filename = f"{safe_title}_{timestamp}_{random_suffix}.mp3"
        file_path = os.path.join(CACHE_DIR, filename)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'outtmpl': file_path.replace('.mp3', ''),
            'quiet': True,
            'no_warnings': True,
            'extractaudio': True,
            'audioformat': 'mp3',
            'audioquality': '192K',
        }
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
        if os.path.exists(file_path):
            logging.info(f"‚úÖ –¢—Ä–µ–∫ —Å–∫–∞—á–∞–Ω: {file_path}")
            return file_path
        else:
            # –ò—â–µ–º —Ñ–∞–π–ª —Å –¥—Ä—É–≥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            for ext in ['.mp3', '.m4a', '.webm']:
                alt_path = file_path.replace('.mp3', ext)
                if os.path.exists(alt_path):
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ .mp3
                    os.rename(alt_path, file_path)
                    logging.info(f"‚úÖ –¢—Ä–µ–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤: {file_path}")
                    return file_path
            
            logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {url}")
            return None
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ {url}: {e}")
        return None

async def delete_temp_file(file_path: str):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    try:
        if file_path and os.path.exists(file_path):
            await asyncio.sleep(AUTO_CLEANUP_DELAY)
            os.remove(file_path)
            if CLEANUP_LOGGING:
                logging.info(f"üßπ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")

# === –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê ===
async def search_youtube_tracks(query: str, limit: int = 5) -> list:
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ YouTube"""
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
            'default_search': 'ytsearch',
            'playlist_items': f'1-{limit}'
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            results = ydl.extract_info(f"ytsearch{limit}:{query}", download=False)
            
        tracks = []
        if 'entries' in results:
            for entry in results['entries']:
                if entry:
                    track_info = {
                        'title': entry.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'),
                        'duration': entry.get('duration', 0),
                        'url': f"https://www.youtube.com/watch?v={entry.get('id', '')}",
                        'webpage_url': entry.get('webpage_url', ''),
                        'thumbnail': entry.get('thumbnail', ''),
                        'uploader': entry.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
                    }
                    tracks.append(track_info)
        
        return tracks
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ YouTube: {e}")
        return []

async def search_youtube_artist_improved(artist: str, limit: int = 10) -> list:
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –Ω–∞ YouTube"""
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
            'default_search': 'ytsearch',
            'playlist_items': f'1-{limit}'
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            results = ydl.extract_info(f"ytsearch{limit}:{artist} music", download=False)
            
        tracks = []
        if 'entries' in results:
            for entry in results['entries']:
                if entry:
                    track_info = {
                        'title': entry.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'),
                        'duration': entry.get('duration', 0),
                        'url': f"https://www.youtube.com/watch?v={entry.get('id', '')}",
                        'webpage_url': entry.get('webpage_url', ''),
                        'thumbnail': entry.get('thumbnail', ''),
                        'uploader': entry.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
                    }
                    tracks.append(track_info)
        
        return tracks
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
        return []

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üêª‚Äç‚ùÑÔ∏è –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", callback_data="find_track"),
            InlineKeyboardButton(text="üå®Ô∏è –ú–æ—è –º—É–∑—ã–∫–∞", callback_data="my_music")
        ],
        [
            InlineKeyboardButton(text="üå®Ô∏è –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º", callback_data="by_artist")
        ]
    ]
)

artist_search_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üêª‚Äç‚ùÑÔ∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", callback_data="search_by_artist")
        ],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
)

back_button = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        await callback.message.delete()
        
        await callback.message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            reply_markup=main_menu
        )
    except Exception as e:
        try:
            await callback.message.answer_photo(
                photo=types.FSInputFile("bear.png"),
                reply_markup=main_menu
            )
        except Exception as photo_error:
            await callback.message.answer("üêª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    try:
        await message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("üêª –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å YouTube.", reply_markup=main_menu)

# === –ü–û–ò–°–ö –ú–£–ó–´–ö–ò ===
@dp.callback_query(F.data == "find_track")
async def ask_track_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        await callback.message.delete()
    except:
        pass
    
    try:
        await callback.message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            caption="üéµ–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            reply_markup=back_button
        )
    except Exception as e:
        await callback.message.edit_text("üéµ–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", reply_markup=back_button)
    
    await state.set_state(SearchStates.waiting_for_search)

@dp.message(SearchStates.waiting_for_search, F.text)
async def search_tracks(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    query = message.text.strip()
    user_id = str(message.from_user.id)
    
    if not query:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞.", reply_markup=main_menu)
        await state.clear()
        return
    
    try:
        await message.delete()
    except:
        pass
    
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
    search_msg = await message.answer("üîç –ò—â—É —Ç—Ä–µ–∫–∏...")
    
    try:
        tracks = await search_youtube_tracks(query, 5)
        
        if not tracks:
            await search_msg.edit_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", reply_markup=back_button)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = []
        for i, track in enumerate(tracks):
            duration_text = format_duration(track['duration'])
            button_text = f"üéµ {track['title'][:40]}{'...' if len(track['title']) > 40 else ''}"
            if duration_text:
                button_text += f" ‚è±{duration_text}"
            
            row = [
                InlineKeyboardButton(text=button_text, callback_data=f"download:{i}"),
                InlineKeyboardButton(text="üíæ", callback_data=f"save:{i}")
            ]
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:** `{query}`\n\n"
        for i, track in enumerate(tracks):
            duration_text = format_duration(track['duration'])
            result_text += f"{i+1}. **{track['title']}**\n"
            if duration_text:
                result_text += f"   ‚è± {duration_text}\n"
            result_text += f"   üë§ {track['uploader']}\n\n"
        
        await search_msg.edit_text(result_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è callback
        await state.update_data(search_results=tracks)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await search_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=back_button)

# === –°–ö–ê–ß–ò–í–ê–ù–ò–ï –¢–†–ï–ö–û–í ===
@dp.callback_query(F.data.startswith("download:"))
async def download_track(callback: types.CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫"""
    await callback.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        idx = int(callback.data.split(":")[1])
        state_data = await state.get_data()
        tracks = state_data.get('search_results', [])
        
        if not tracks or idx >= len(tracks):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        track = tracks[idx]
        title = track['title']
        url = track['url']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
        loading_msg = await callback.message.edit_text(f"‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫: {title}")
        
        try:
            temp_file_path = await download_track_to_temp(user_id, url, title)
            
            if temp_file_path and os.path.exists(temp_file_path):
                await callback.message.answer_audio(types.FSInputFile(temp_file_path), title=title)
                await delete_temp_file(temp_file_path)
                await callback.answer("‚úÖ –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                await loading_msg.delete()
                await callback.message.answer(f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:** `{title}`\n\n–¢—Ä–µ–∫ —Å–∫–∞—á–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=back_button)
            else:
                await loading_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.", reply_markup=back_button)
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", reply_markup=back_button)
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_track: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–†–ï–ö–û–í ===
@dp.callback_query(F.data.startswith("save:"))
async def save_track(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer("üíæ –°–æ—Ö—Ä–∞–Ω—è—é...")
    
    user_id = str(callback.from_user.id)
    
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        idx = int(callback.data.split(":")[1])
        state_data = await state.get_data()
        tracks = state_data.get('search_results', [])
        
        if not tracks or idx >= len(tracks):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        track = tracks[idx]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–∫–∏
        global user_tracks
        if user_tracks is None:
            user_tracks = load_json(TRACKS_FILE, {})
        
        if user_id not in user_tracks:
            user_tracks[user_id] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ç—Ä–µ–∫
        track_exists = any(t.get('title') == track['title'] for t in user_tracks[user_id])
        
        if track_exists:
            await callback.answer("‚ö†Ô∏è –¢—Ä–µ–∫ —É–∂–µ –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫
        track_to_save = {
            'title': track['title'],
            'original_url': track['url'],
            'duration': track['duration'],
            'uploader': track['uploader'],
            'added_at': datetime.now().isoformat()
        }
        
        user_tracks[user_id].append(track_to_save)
        save_json(TRACKS_FILE, user_tracks)
        
        await callback.answer("‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)

# === –ú–û–Ø –ú–£–ó–´–ö–ê ===
@dp.callback_query(F.data == "my_music")
async def my_music(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    global user_tracks
    user_tracks = load_json(TRACKS_FILE, {})
    
    tracks = user_tracks.get(user_id, [])
    
    if not tracks:
        try:
            await callback.message.answer("üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.")
        except Exception as answer_error:
            pass
        return
    
    try:
        keyboard = []
        
        for i, track in enumerate(tracks):
            if isinstance(track, dict):
                title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                original_url = track.get('original_url', '')
                duration = track.get('duration', 0)
                
                if original_url and original_url.startswith('http'):
                    duration_text = format_duration(duration)
                    
                    if duration_text:
                        max_title_length = 40
                        button_text = f"üéµ {title[:max_title_length]}{'...' if len(title) > max_title_length else ''} ‚è±{duration_text}"
                    else:
                        max_title_length = 50
                        button_text = f"üéµ {title[:max_title_length]}{'...' if len(title) > max_title_length else ''}"
                    
                    row = [
                        InlineKeyboardButton(text=button_text, callback_data=f"play:{i}"),
                        InlineKeyboardButton(text="üóë", callback_data=f"del:{i}")
                    ]
                    keyboard.append(row)
                else:
                    max_title_length = 50
                    button_text = f"‚ö†Ô∏è {title[:max_title_length]}{'...' if len(title) > max_title_length else ''}"
                    row = [
                        InlineKeyboardButton(text=button_text, callback_data="no_url"),
                        InlineKeyboardButton(text="üóë", callback_data=f"del:{i}")
                    ]
                    keyboard.append(row)
            else:
                title = os.path.basename(track)
                max_title_length = 50
                button_text = f"‚ö†Ô∏è {title[:max_title_length]}{'...' if len(title) > max_title_length else ''}"
                row = [
                    InlineKeyboardButton(text=button_text, callback_data="old_format"),
                    InlineKeyboardButton(text="üóë", callback_data=f"del:{i}")
                ]
                keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        try:
            await callback.message.answer_photo(
                photo=types.FSInputFile("bear.png"),
                caption="üå®Ô∏è **–ú–æ—è –º—É–∑—ã–∫–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        except Exception as e:
            await callback.message.answer("üå®Ô∏è **–ú–æ—è –º—É–∑—ã–∫–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–æ–µ–π –º—É–∑—ã–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

# === –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò–ó –ú–û–ï–ô –ú–£–ó–´–ö–ò ===
@dp.callback_query(F.data.startswith("play:"))
async def play_track(callback: types.CallbackQuery):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Ç—Ä–µ–∫ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    global user_tracks
    try:
        user_id = str(callback.from_user.id)
        
        is_allowed, time_until = check_antispam(user_id)
        if not is_allowed:
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
            return
        
        idx = int(callback.data.split(":")[1])
        
        if user_tracks is None:
            user_tracks = {}
        
        tracks = user_tracks.get(user_id, [])
        if not tracks:
            await callback.answer("üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.", show_alert=True)
            return
        
        if not (0 <= idx < len(tracks)):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        track = tracks[idx]
        
        if isinstance(track, dict):
            title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
            original_url = track.get('original_url', '')
            
            if not original_url or not original_url.startswith('http'):
                await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
            await callback.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫...", show_alert=False)
            
            try:
                temp_file_path = await download_track_to_temp(user_id, original_url, title)
                
                if temp_file_path and os.path.exists(temp_file_path):
                    await callback.message.answer_audio(types.FSInputFile(temp_file_path), title=title)
                    await delete_temp_file(temp_file_path)
                    await callback.answer("‚úÖ –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.")
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞ {title}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞.")

        else:
            title = os.path.basename(track)
            await callback.answer("‚ùå –¢—Ä–µ–∫ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                
    except ValueError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç—Ä–µ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç—Ä–µ–∫–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ play_track: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

# === –£–î–ê–õ–ï–ù–ò–ï –¢–†–ï–ö–û–í ===
@dp.callback_query(F.data.startswith("del:"))
async def delete_track(callback: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–∫ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    await callback.answer("üóë –£–¥–∞–ª—è—é...")
    
    user_id = str(callback.from_user.id)
    
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        idx = int(callback.data.split(":")[1])
        
        global user_tracks
        if user_tracks is None:
            user_tracks = {}
        
        tracks = user_tracks.get(user_id, [])
        if not tracks or idx >= len(tracks):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        deleted_track = tracks.pop(idx)
        save_json(TRACKS_FILE, user_tracks)
        
        title = deleted_track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫') if isinstance(deleted_track, dict) else os.path.basename(deleted_track)
        await callback.answer(f"‚úÖ –¢—Ä–µ–∫ '{title}' —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏!")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)

# === –ü–û–ò–°–ö –ü–û –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø–ú ===
@dp.callback_query(F.data == "by_artist")
async def by_artist_section(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        await callback.message.delete()
    except:
        pass
    
    try:
        await callback.message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            caption="üå®Ô∏è **–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º**\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤:",
            reply_markup=artist_search_menu
        )
    except Exception as e:
        await callback.message.answer("üå®Ô∏è **–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º**\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤:", reply_markup=artist_search_menu)
    
    await state.set_state(SearchStates.waiting_for_artist_search)

@dp.callback_query(F.data == "search_by_artist")
async def search_by_artist_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        await callback.message.delete()
    except:
        pass
    
    try:
        await callback.message.answer_photo(
            photo=types.FSInputFile("bear.png"),
            caption="üå®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
            reply_markup=back_button
        )
    except Exception as e:
        await callback.message.answer("üå®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=back_button)
    
    await state.set_state(SearchStates.waiting_for_artist_search)

@dp.message(SearchStates.waiting_for_artist_search, F.text)
async def search_by_artist(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    artist = message.text.strip()
    user_id = str(message.from_user.id)
    
    await state.clear()

    if not artist:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", reply_markup=main_menu)
        return

    try:
        await message.delete()
    except:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
    search_msg = await message.answer(f"üîç –ò—â—É —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {artist}")

    try:
        tracks = await search_youtube_artist_improved(artist, 10)
        
        if not tracks:
            await search_msg.edit_text(f"‚ùå –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=back_button)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = []
        for i, track in enumerate(tracks):
            duration_text = format_duration(track['duration'])
            button_text = f"üéµ {track['title'][:40]}{'...' if len(track['title']) > 40 else ''}"
            if duration_text:
                button_text += f" ‚è±{duration_text}"
            
            row = [
                InlineKeyboardButton(text=button_text, callback_data=f"download_artist:{i}"),
                InlineKeyboardButton(text="üíæ", callback_data=f"save_artist:{i}")
            ]
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_text = f"üå®Ô∏è **–¢—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:** `{artist}`\n\n"
        for i, track in enumerate(tracks):
            duration_text = format_duration(track['duration'])
            result_text += f"{i+1}. **{track['title']}**\n"
            if duration_text:
                result_text += f"   ‚è± {duration_text}\n"
            result_text += f"   üë§ {track['uploader']}\n\n"
        
        await search_msg.edit_text(result_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è callback
        await state.update_data(artist_search_results=tracks, artist_name=artist)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
        await search_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=back_button)

# === –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–†–ï–ö–û–í –ü–û –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Æ ===
@dp.callback_query(F.data.startswith("download_artist:"))
async def download_artist_track(callback: types.CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    await callback.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é...")
    
    user_id = str(callback.from_user.id)
    
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        idx = int(callback.data.split(":")[1])
        state_data = await state.get_data()
        tracks = state_data.get('artist_search_results', [])
        artist_name = state_data.get('artist_name', '')
        
        if not tracks or idx >= len(tracks):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        track = tracks[idx]
        title = track['title']
        url = track['url']
        
        loading_msg = await callback.message.edit_text(f"‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫: {title}")
        
        try:
            temp_file_path = await download_track_to_temp(user_id, url, title)
            
            if temp_file_path and os.path.exists(temp_file_path):
                await callback.message.answer_audio(types.FSInputFile(temp_file_path), title=title)
                await delete_temp_file(temp_file_path)
                await callback.answer("‚úÖ –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                
                await loading_msg.delete()
                await callback.message.answer(f"üå®Ô∏è **–¢—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:** `{artist_name}`\n\n–¢—Ä–µ–∫ —Å–∫–∞—á–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=back_button)
            else:
                await loading_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.", reply_markup=back_button)
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", reply_markup=back_button)
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_artist_track: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@dp.callback_query(F.data.startswith("save_artist:"))
async def save_artist_track(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–µ–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
    await callback.answer("üíæ –°–æ—Ö—Ä–∞–Ω—è—é...")
    
    user_id = str(callback.from_user.id)
    
    is_allowed, time_until = check_antispam(user_id)
    if not is_allowed:
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_until:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=True)
        return
    
    try:
        idx = int(callback.data.split(":")[1])
        state_data = await state.get_data()
        tracks = state_data.get('artist_search_results', [])
        
        if not tracks or idx >= len(tracks):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        track = tracks[idx]
        
        global user_tracks
        if user_tracks is None:
            user_tracks = load_json(TRACKS_FILE, {})
        
        if user_id not in user_tracks:
            user_tracks[user_id] = []
        
        track_exists = any(t.get('title') == track['title'] for t in user_tracks[user_id])
        
        if track_exists:
            await callback.answer("‚ö†Ô∏è –¢—Ä–µ–∫ —É–∂–µ –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!", show_alert=True)
            return
        
        track_to_save = {
            'title': track['title'],
            'original_url': track['url'],
            'duration': track['duration'],
            'uploader': track['uploader'],
            'added_at': datetime.now().isoformat()
        }
        
        user_tracks[user_id].append(track_to_save)
        save_json(TRACKS_FILE, user_tracks)
        
        await callback.answer("‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===
@dp.callback_query(F.data == "no_url")
async def no_url_handler(callback: types.CallbackQuery):
    await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç—Ä–µ–∫ –Ω–µ –∏–º–µ–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", show_alert=True)

@dp.callback_query(F.data == "old_format")
async def old_format_handler(callback: types.CallbackQuery):
    await callback.answer("‚ö†Ô∏è –¢—Ä–µ–∫ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.", show_alert=True)

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not os.path.exists("bear.png"):
            logging.warning("‚ö†Ô∏è –§–∞–π–ª bear.png –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies
        if not os.path.exists(COOKIES_FILE):
            logging.warning("‚ö†Ô∏è –§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(CACHE_DIR, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–∫–∏
        global user_tracks
        user_tracks = load_json(TRACKS_FILE, {})
        
        logging.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
